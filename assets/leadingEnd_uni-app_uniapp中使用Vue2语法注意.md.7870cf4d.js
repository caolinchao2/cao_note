import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.b5309610.js";const b=JSON.parse('{"title":"uniapp中使用Vue2语法注意","description":"","frontmatter":{},"headers":[],"relativePath":"leadingEnd/uni-app/uniapp中使用Vue2语法注意.md","filePath":"leadingEnd/uni-app/uniapp中使用Vue2语法注意.md","lastUpdated":1730456661000}'),p={name:"leadingEnd/uni-app/uniapp中使用Vue2语法注意.md"},t=l(`<h1 id="uniapp中使用vue2语法注意" tabindex="-1">uniapp中使用Vue2语法注意 <a class="header-anchor" href="#uniapp中使用vue2语法注意" aria-label="Permalink to &quot;uniapp中使用Vue2语法注意&quot;">​</a></h1><h3 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h3><h4 id="在-uni-app-中使用vue的差异" tabindex="-1">在 uni-app 中使用vue的差异 <a class="header-anchor" href="#在-uni-app-中使用vue的差异" aria-label="Permalink to &quot;在 uni-app 中使用vue的差异&quot;">​</a></h4><p><code>uni-app</code> 在发布到H5时支持所有vue的语法；发布到App和小程序时,由于平台限制,无法实现全部vue语法,但 <code>uni-app</code> 仍是对vue语法支持度最高的跨端框架。</p><p>相比Web平台, Vue.js 在 <code>uni-app</code> 中使用差异主要集中在两个方面：</p><ul><li>新增：<code>uni-app</code> 除了支持Vue实例的生命周期,还支持<a href="https://uniapp.dcloud.io/collocation/App#%E5%BA%94%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F" target="_blank" rel="noreferrer">应用生命周期 (opens new window)</a>以及<a href="https://uniapp.dcloud.io/tutorial/page#lifecycle" target="_blank" rel="noreferrer">页面生命周期 (opens new window)</a>。</li><li>受限：相比web平台,在小程序和App端部分功能受限,<a href="https://uniapp.dcloud.net.cn/vue3-api" target="_blank" rel="noreferrer">具体见 (opens new window)</a>。</li></ul><p><code>uni-app</code> 项目对 vue 3.0 的支持版本情况如下：</p><ul><li>Web平台：支持。</li><li>小程序平台：<code>HBuilderX 3.3.3+</code> 编译器改为 <code>vite</code>,之前版本的编译器为<code>webpack</code>。</li><li>App 平台：<code>uni-app 3.2.5+</code>支持。<code>HBuilderX 3.3.13</code> 起 <code>nvue</code>编译器升级为<code>vite</code>。</li></ul><p><strong>注意事项</strong></p><ul><li>vue3 响应式基于 <code>Proxy</code> 实现,不支持<code>iOS9</code>和<code>ie11</code>。</li><li>暂不支持新增的 <code>Teleport</code>,<code>Suspense</code> 组件。</li><li>目前 <code>HBuilderX 3.2</code> 起已预置,之前的版本只能使用cli方式</li></ul><h4 id="v-show" tabindex="-1">v-show <a class="header-anchor" href="#v-show" aria-label="Permalink to &quot;v-show&quot;">​</a></h4><p><code>v-show</code> 是一个根据条件展示元素选项的指令 。用法大致和 <code>v-if</code> 一样：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-show</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ok&quot;</span><span style="color:#E1E4E8;">&gt;Hello!&lt;/</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-show</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ok&quot;</span><span style="color:#24292E;">&gt;Hello!&lt;/</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>不同的是带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 <code>CSS</code> 属性的 <code>display</code> 。</p><blockquote><p>注意,v-show 不支持 template 元素,也不支持 v-else。nvue 页面不支持 v-show</p></blockquote><h4 id="v-for" tabindex="-1">v-for <a class="header-anchor" href="#v-for" aria-label="Permalink to &quot;v-for&quot;">​</a></h4><ul><li>在H5平台 使用 v-for 循环整数时和其他平台存在差异,如 <code>v-for=&quot;(item, index) in 10&quot;</code> 中,在H5平台 item 从 1 开始,其他平台 item 从 0 开始,可使用第二个参数 index 来保持一致。</li><li>在非H5平台 循环对象时不支持第三个参数,如 <code>v-for=&quot;(value, name, index) in object&quot;</code> 中,index 参数是不支持的</li></ul><h4 id="v-html" tabindex="-1">v-html <a class="header-anchor" href="#v-html" aria-label="Permalink to &quot;v-html&quot;">​</a></h4><p>更新元素的 <code>innerHTML</code> 。</p><ul><li>注意：<strong>内容按普通 HTML 插入 - 不会作为 Vue 模板进行编译。</strong></li><li>如果试图使用 v-html 组合模板,可以重新考虑是否通过使用组件来替代。</li><li>App端和H5端支持 <code>v-html</code> ,微信小程序会被转为 <code>rich-text</code>,其他端不支持 <code>v-html</code> 。</li></ul><p>跨端的富文本处理方案详见：<a href="https://ask.dcloud.net.cn/article/35772" target="_blank" rel="noreferrer">https://ask.dcloud.net.cn/article/35772</a></p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			&lt;</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-html</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;rawHtml&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;/</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">					rawHtml: </span><span style="color:#9ECBFF;">&#39;&lt;div style=&quot;text-align:center;background-color: #007AFF;&quot;&gt;&lt;div &gt;我是内容&lt;/div&gt;&lt;img src=&quot;https://web-assets.dcloud.net.cn/unidoc/zh/uni@2x.png&quot;/&gt;&lt;/div&gt;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">				}</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-html</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;rawHtml&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;/</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">					rawHtml: </span><span style="color:#032F62;">&#39;&lt;div style=&quot;text-align:center;background-color: #007AFF;&quot;&gt;&lt;div &gt;我是内容&lt;/div&gt;&lt;img src=&quot;https://web-assets.dcloud.net.cn/unidoc/zh/uni@2x.png&quot;/&gt;&lt;/div&gt;&#39;</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="class-与-style-绑定" tabindex="-1">Class 与 Style 绑定 <a class="header-anchor" href="#class-与-style-绑定" aria-label="Permalink to &quot;Class 与 Style 绑定&quot;">​</a></h4><blockquote><p>小程序端不支持 <code>classObject</code> 和 <code>styleObject</code> 语法。</p></blockquote><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			&lt;</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;activeClass&quot;</span><span style="color:#E1E4E8;">&gt;hello uni-app&lt;/</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			&lt;</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;styleObject&quot;</span><span style="color:#E1E4E8;">&gt;hello uni-app&lt;/</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;/</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">					activeClass: {</span></span>
<span class="line"><span style="color:#E1E4E8;">						</span><span style="color:#9ECBFF;">&#39;active&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">						</span><span style="color:#9ECBFF;">&#39;text-danger&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">					},</span></span>
<span class="line"><span style="color:#E1E4E8;">					styleObject: {</span></span>
<span class="line"><span style="color:#E1E4E8;">						color: </span><span style="color:#9ECBFF;">&#39;red&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">						fontSize: </span><span style="color:#9ECBFF;">&#39;20px&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">					}</span></span>
<span class="line"><span style="color:#E1E4E8;">				}</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">.active</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#79B8FF;">background-color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">#007AFF</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">.text-danger</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#79B8FF;">font-size</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">rpx;</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">#DD524D</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;activeClass&quot;</span><span style="color:#24292E;">&gt;hello uni-app&lt;/</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:style</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;styleObject&quot;</span><span style="color:#24292E;">&gt;hello uni-app&lt;/</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;/</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">					activeClass: {</span></span>
<span class="line"><span style="color:#24292E;">						</span><span style="color:#032F62;">&#39;active&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">						</span><span style="color:#032F62;">&#39;text-danger&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">					},</span></span>
<span class="line"><span style="color:#24292E;">					styleObject: {</span></span>
<span class="line"><span style="color:#24292E;">						color: </span><span style="color:#032F62;">&#39;red&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">						fontSize: </span><span style="color:#032F62;">&#39;20px&#39;</span></span>
<span class="line"><span style="color:#24292E;">					}</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">.active</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#005CC5;">background-color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">#007AFF</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">.text-danger</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#005CC5;">font-size</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">rpx;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">#DD524D</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h4 id="事件修饰符" tabindex="-1">事件修饰符 <a class="header-anchor" href="#事件修饰符" aria-label="Permalink to &quot;事件修饰符&quot;">​</a></h4><p>修饰符 (modifier) 是以半角句号 . 指明的特殊后缀,用于指出一个指令应该以特殊方式绑定。例如,<code>.prevent</code> 修饰符告诉 @事件对于触发的事件调用 <code>event.preventDefault()</code>：</p><p>@事件（v-on）提供了事件修饰符:</p><ul><li><code>.stop</code>: 各平台均支持, 使用时会阻止事件冒泡,在非 H5 端同时也会阻止事件的默认行为</li><li><code>.native</code>: 监听原生事件,各平台均支持</li><li><code>.prevent</code>: 仅在 H5 平台支持</li><li><code>.capture</code>: 仅在 H5 平台支持</li><li><code>.self</code>: 仅在 H5 平台支持</li><li><code>.once</code>: 仅在 H5 平台支持</li><li><code>.passive</code>: 仅在 H5 平台支持</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">@click.stop</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;doThis&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@click.stop</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;doThis&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>使用修饰符时,顺序很重要；相应的代码会以同样的顺序产生。因此,用 <code>@click.prevent.self</code> 会阻止所有的点击,而 <code>@click.self.prevent</code> 只会阻止对元素自身的点击。</p></blockquote><p><strong>注意</strong></p><ul><li>为兼容各端,事件需使用 <strong>@</strong> 的方式绑定,请勿使用小程序端的 <code>bind</code> 和 <code>catch</code> 进行事件绑定；也不能在 JS 中使用<code>event.preventDefault()</code>和<code>event.stopPropagation()</code>方法；</li><li>若需要禁止蒙版下的页面滚动,可使用 <code>@touchmove.stop.prevent=&quot;moveHandle&quot;</code>,<code>moveHandle</code> 可以用来处理 <code>touchmove</code> 的事件,也可以是一个空函数。</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;mask&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">@touchmove.stop.prevent</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;moveHandle&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;mask&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@touchmove.stop.prevent</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;moveHandle&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>按键修饰符：<code>uni-app</code> 运行在手机端,没有键盘事件,所以不支持按键修饰符</li></ul><h4 id="表单控件绑定" tabindex="-1">表单控件绑定 <a class="header-anchor" href="#表单控件绑定" aria-label="Permalink to &quot;表单控件绑定&quot;">​</a></h4><p>你可以用 v-model 指令在表单 <code>input</code>、<code>textarea</code> 及 <code>select</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇,但 <code>v-model</code> 本质上不过是语法糖。它负责监听用户的输入事件以更新数据,并对一些极端场景进行一些特殊处理。</p><blockquote><p>v-model 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。</p></blockquote><p>建议开发过程中直接使用 <code>uni-app</code>：<a href="https://uniapp.dcloud.io/component/button" target="_blank" rel="noreferrer">表单组件(opens new window)</a></p><p><strong>用法示例：</strong></p><ul><li>H5 的 <code>select</code> 标签用 <code>picker</code> 组件进行代替</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			&lt;</span><span style="color:#FDAEB7;font-style:italic;">picker</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">@change</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;bindPickerChange&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;index&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:range</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;array&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				&lt;</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;picker&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">					当前选择：{{array[index]}}</span></span>
<span class="line"><span style="color:#E1E4E8;">				&lt;/</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			&lt;/</span><span style="color:#FDAEB7;font-style:italic;">picker</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;/</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">					index: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">					array: [</span><span style="color:#9ECBFF;">&#39;A&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;B&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;C&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">				}</span></span>
<span class="line"><span style="color:#E1E4E8;">			},</span></span>
<span class="line"><span style="color:#E1E4E8;">			methods: {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#B392F0;">bindPickerChange</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">					console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(e)</span></span>
<span class="line"><span style="color:#E1E4E8;">				}</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;</span><span style="color:#B31D28;font-style:italic;">picker</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@change</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bindPickerChange&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;index&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:range</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;array&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">				&lt;</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;picker&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">					当前选择：{{array[index]}}</span></span>
<span class="line"><span style="color:#24292E;">				&lt;/</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;/</span><span style="color:#B31D28;font-style:italic;">picker</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;/</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">					index: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">					array: [</span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;B&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;C&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			},</span></span>
<span class="line"><span style="color:#24292E;">			methods: {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">bindPickerChange</span><span style="color:#24292E;">(</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">					console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(e)</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><ul><li>表单元素 <code>radio</code> 用 <code>radio-group</code> 组件进行代替</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			&lt;</span><span style="color:#85E89D;">radio-group</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;radio-group&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">@change</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;radioChange&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				&lt;</span><span style="color:#85E89D;">label</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;radio&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;(item, index) in items&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;item.name&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">					&lt;</span><span style="color:#FDAEB7;font-style:italic;">radio</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;item.name&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:checked</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;item.checked&quot;</span><span style="color:#E1E4E8;"> /&gt; {{item.value}}</span></span>
<span class="line"><span style="color:#E1E4E8;">				&lt;/</span><span style="color:#85E89D;">label</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			&lt;/</span><span style="color:#85E89D;">radio-group</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;/</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">					items: [{</span></span>
<span class="line"><span style="color:#E1E4E8;">							name: </span><span style="color:#9ECBFF;">&#39;USA&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">							value: </span><span style="color:#9ECBFF;">&#39;美国&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">						},</span></span>
<span class="line"><span style="color:#E1E4E8;">						{</span></span>
<span class="line"><span style="color:#E1E4E8;">							name: </span><span style="color:#9ECBFF;">&#39;CHN&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">							value: </span><span style="color:#9ECBFF;">&#39;中国&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">							checked: </span><span style="color:#9ECBFF;">&#39;true&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">						},</span></span>
<span class="line"><span style="color:#E1E4E8;">						{</span></span>
<span class="line"><span style="color:#E1E4E8;">							name: </span><span style="color:#9ECBFF;">&#39;BRA&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">							value: </span><span style="color:#9ECBFF;">&#39;巴西&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">						},</span></span>
<span class="line"><span style="color:#E1E4E8;">						{</span></span>
<span class="line"><span style="color:#E1E4E8;">							name: </span><span style="color:#9ECBFF;">&#39;JPN&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">							value: </span><span style="color:#9ECBFF;">&#39;日本&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">						},</span></span>
<span class="line"><span style="color:#E1E4E8;">						{</span></span>
<span class="line"><span style="color:#E1E4E8;">							name: </span><span style="color:#9ECBFF;">&#39;ENG&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">							value: </span><span style="color:#9ECBFF;">&#39;英国&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">						},</span></span>
<span class="line"><span style="color:#E1E4E8;">						{</span></span>
<span class="line"><span style="color:#E1E4E8;">							name: </span><span style="color:#9ECBFF;">&#39;TUR&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">							value: </span><span style="color:#9ECBFF;">&#39;法国&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">						}</span></span>
<span class="line"><span style="color:#E1E4E8;">					]</span></span>
<span class="line"><span style="color:#E1E4E8;">				}</span></span>
<span class="line"><span style="color:#E1E4E8;">			},</span></span>
<span class="line"><span style="color:#E1E4E8;">			methods: {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#B392F0;">radioChange</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">					console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;radio发生change事件,携带value值为：&#39;</span><span style="color:#E1E4E8;">, e.target.value)</span></span>
<span class="line"><span style="color:#E1E4E8;">				}</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;</span><span style="color:#22863A;">radio-group</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;radio-group&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@change</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;radioChange&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">				&lt;</span><span style="color:#22863A;">label</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;radio&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-for</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;(item, index) in items&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:key</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;item.name&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">					&lt;</span><span style="color:#B31D28;font-style:italic;">radio</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;item.name&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:checked</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;item.checked&quot;</span><span style="color:#24292E;"> /&gt; {{item.value}}</span></span>
<span class="line"><span style="color:#24292E;">				&lt;/</span><span style="color:#22863A;">label</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;/</span><span style="color:#22863A;">radio-group</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;/</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">					items: [{</span></span>
<span class="line"><span style="color:#24292E;">							name: </span><span style="color:#032F62;">&#39;USA&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">							value: </span><span style="color:#032F62;">&#39;美国&#39;</span></span>
<span class="line"><span style="color:#24292E;">						},</span></span>
<span class="line"><span style="color:#24292E;">						{</span></span>
<span class="line"><span style="color:#24292E;">							name: </span><span style="color:#032F62;">&#39;CHN&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">							value: </span><span style="color:#032F62;">&#39;中国&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">							checked: </span><span style="color:#032F62;">&#39;true&#39;</span></span>
<span class="line"><span style="color:#24292E;">						},</span></span>
<span class="line"><span style="color:#24292E;">						{</span></span>
<span class="line"><span style="color:#24292E;">							name: </span><span style="color:#032F62;">&#39;BRA&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">							value: </span><span style="color:#032F62;">&#39;巴西&#39;</span></span>
<span class="line"><span style="color:#24292E;">						},</span></span>
<span class="line"><span style="color:#24292E;">						{</span></span>
<span class="line"><span style="color:#24292E;">							name: </span><span style="color:#032F62;">&#39;JPN&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">							value: </span><span style="color:#032F62;">&#39;日本&#39;</span></span>
<span class="line"><span style="color:#24292E;">						},</span></span>
<span class="line"><span style="color:#24292E;">						{</span></span>
<span class="line"><span style="color:#24292E;">							name: </span><span style="color:#032F62;">&#39;ENG&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">							value: </span><span style="color:#032F62;">&#39;英国&#39;</span></span>
<span class="line"><span style="color:#24292E;">						},</span></span>
<span class="line"><span style="color:#24292E;">						{</span></span>
<span class="line"><span style="color:#24292E;">							name: </span><span style="color:#032F62;">&#39;TUR&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">							value: </span><span style="color:#032F62;">&#39;法国&#39;</span></span>
<span class="line"><span style="color:#24292E;">						}</span></span>
<span class="line"><span style="color:#24292E;">					]</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			},</span></span>
<span class="line"><span style="color:#24292E;">			methods: {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">radioChange</span><span style="color:#24292E;">(</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">					console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;radio发生change事件,携带value值为：&#39;</span><span style="color:#24292E;">, e.target.value)</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h4 id="计算属性-vs-侦听属性" tabindex="-1">计算属性 vs 侦听属性 <a class="header-anchor" href="#计算属性-vs-侦听属性" aria-label="Permalink to &quot;计算属性 vs 侦听属性&quot;">​</a></h4><p>Vue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：<strong>侦听属性</strong>。当你有一些数据需要随着其它数据变动而变动时,你很容易滥用 <code>watch</code> 。然而,通常更好的做法是使用计算属性而不是命令式的 <code>watch</code> 回调。</p><div class="language-JS vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			firstName: </span><span style="color:#9ECBFF;">&#39;Foo&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			lastName: </span><span style="color:#9ECBFF;">&#39;Bar&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			fullName: </span><span style="color:#9ECBFF;">&#39;Foo Bar&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	},</span></span>
<span class="line"><span style="color:#E1E4E8;">	watch: {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">firstName</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.fullName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.lastName</span></span>
<span class="line"><span style="color:#E1E4E8;">		},</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">lastName</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.fullName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.firstName </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> val</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			firstName: </span><span style="color:#032F62;">&#39;Foo&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">			lastName: </span><span style="color:#032F62;">&#39;Bar&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">			fullName: </span><span style="color:#032F62;">&#39;Foo Bar&#39;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	},</span></span>
<span class="line"><span style="color:#24292E;">	watch: {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">firstName</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.fullName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.lastName</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">lastName</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.fullName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.firstName </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> val</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>​<br> ​</p><p>上面代码是命令式且重复的。将它与计算属性的版本进行比较：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">				firstName: </span><span style="color:#9ECBFF;">&#39;Foo&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">				lastName: </span><span style="color:#9ECBFF;">&#39;Bar&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		},</span></span>
<span class="line"><span style="color:#E1E4E8;">		computed: {</span></span>
<span class="line"><span style="color:#E1E4E8;">		    </span><span style="color:#B392F0;">fullName</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.firstName </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.lastName</span></span>
<span class="line"><span style="color:#E1E4E8;">		    }</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				firstName: </span><span style="color:#032F62;">&#39;Foo&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">				lastName: </span><span style="color:#032F62;">&#39;Bar&#39;</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"><span style="color:#24292E;">		computed: {</span></span>
<span class="line"><span style="color:#24292E;">		    </span><span style="color:#6F42C1;">fullName</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.firstName </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.lastName</span></span>
<span class="line"><span style="color:#24292E;">		    }</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="侦听器watch侦听器watch" tabindex="-1">侦听器watch侦听器watch <a class="header-anchor" href="#侦听器watch侦听器watch" aria-label="Permalink to &quot;侦听器watch侦听器watch&quot;">​</a></h4><ul><li>一个对象,键是需要观察的表达式,值是对应回调函数。值也可以是方法名,或者包含选项的对象。Vue 实例将会在实例化时调用 <code>$watch()</code> ,遍历 <code>watch</code> 对象的每一个 <code>property</code> 。</li><li>示例：</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-model</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;word&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;/</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">				word: </span><span style="color:#9ECBFF;">&#39;word&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		},</span></span>
<span class="line"><span style="color:#E1E4E8;">		watch: {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// 使用watch来响应数据的变化</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">word</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">newVal</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">				console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;最新值是：&#39;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">newVal,</span><span style="color:#9ECBFF;">&quot;原来的值是：&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> oldVal);</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		},</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-model</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;word&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				word: </span><span style="color:#032F62;">&#39;word&#39;</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"><span style="color:#24292E;">		watch: {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 使用watch来响应数据的变化</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">word</span><span style="color:#24292E;">(</span><span style="color:#E36209;">newVal</span><span style="color:#24292E;">, </span><span style="color:#E36209;">oldVal</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;最新值是：&#39;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">newVal,</span><span style="color:#032F62;">&quot;原来的值是：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> oldVal);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>示例：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">				a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">				b: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">				c: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">				d: </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">				e: {</span></span>
<span class="line"><span style="color:#E1E4E8;">					f: {</span></span>
<span class="line"><span style="color:#E1E4E8;">						g: </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#E1E4E8;">					}</span></span>
<span class="line"><span style="color:#E1E4E8;">				}</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		},</span></span>
<span class="line"><span style="color:#E1E4E8;">		watch: {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">				console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;new: %s, old: %s&#39;</span><span style="color:#E1E4E8;">, val, oldVal)</span></span>
<span class="line"><span style="color:#E1E4E8;">			},</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// 方法名</span></span>
<span class="line"><span style="color:#E1E4E8;">			b: </span><span style="color:#9ECBFF;">&#39;someMethod&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// 该回调会在任何被侦听的对象的 property 改变时被调用,不论其被嵌套多深</span></span>
<span class="line"><span style="color:#E1E4E8;">			c: {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">				deep: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">			},</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// 该回调将会在侦听开始之后被立即调用</span></span>
<span class="line"><span style="color:#E1E4E8;">			d: {</span></span>
<span class="line"><span style="color:#E1E4E8;">				handler: </span><span style="color:#9ECBFF;">&#39;someMethod&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">				immediate: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">			},</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// 你可以传入回调数组,它们会被逐一调用</span></span>
<span class="line"><span style="color:#E1E4E8;">			e: [</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#9ECBFF;">&#39;handle1&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handle2</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">				{</span></span>
<span class="line"><span style="color:#E1E4E8;">					</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handle3</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">					</span><span style="color:#6A737D;">/* ... */</span></span>
<span class="line"><span style="color:#E1E4E8;">				}</span></span>
<span class="line"><span style="color:#E1E4E8;">			],</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// watch vm.e.f&#39;s value: {g: 5}</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&#39;e.f&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">				b: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">				c: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">				d: </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">				e: {</span></span>
<span class="line"><span style="color:#24292E;">					f: {</span></span>
<span class="line"><span style="color:#24292E;">						g: </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">					}</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"><span style="color:#24292E;">		watch: {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">, </span><span style="color:#E36209;">oldVal</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;new: %s, old: %s&#39;</span><span style="color:#24292E;">, val, oldVal)</span></span>
<span class="line"><span style="color:#24292E;">			},</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 方法名</span></span>
<span class="line"><span style="color:#24292E;">			b: </span><span style="color:#032F62;">&#39;someMethod&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 该回调会在任何被侦听的对象的 property 改变时被调用,不论其被嵌套多深</span></span>
<span class="line"><span style="color:#24292E;">			c: {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">, </span><span style="color:#E36209;">oldVal</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">				deep: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">			},</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 该回调将会在侦听开始之后被立即调用</span></span>
<span class="line"><span style="color:#24292E;">			d: {</span></span>
<span class="line"><span style="color:#24292E;">				handler: </span><span style="color:#032F62;">&#39;someMethod&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">				immediate: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">			},</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 你可以传入回调数组,它们会被逐一调用</span></span>
<span class="line"><span style="color:#24292E;">			e: [</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#032F62;">&#39;handle1&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handle2</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">, </span><span style="color:#E36209;">oldVal</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">				{</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handle3</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">, </span><span style="color:#E36209;">oldVal</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#6A737D;">/* ... */</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			],</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// watch vm.e.f&#39;s value: {g: 5}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&#39;e.f&#39;</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">, </span><span style="color:#E36209;">oldVal</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h3 id="组件" tabindex="-1">组件 <a class="header-anchor" href="#组件" aria-label="Permalink to &quot;组件&quot;">​</a></h3><p>基础组件是内置在uni-app框架中的,包括view、text、input、button、video等几十个基础组件,但仅有基础组件是不够用的,实际开发中会有很多封装的组件。比如我们需要一个五角星点击评分的组件,在DCloud的插件市场里可以获取把这个uni-rate组件导入到你的uni-app项目下,在需要的vue页面里引用它,就可以在指定的地方显示出这个五角星组件。</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">&lt;!-- 在index.vue页面引用 uni-rate 组件--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			&lt;</span><span style="color:#85E89D;">uni-rate</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">uni-rate</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#6A737D;">&lt;!-- 这里会显示一个五角星,并且点击后会自动亮星 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;/</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">&lt;!-- 在index.vue页面引用 uni-rate 组件--&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;</span><span style="color:#22863A;">uni-rate</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">uni-rate</span><span style="color:#24292E;">&gt;</span><span style="color:#6A737D;">&lt;!-- 这里会显示一个五角星,并且点击后会自动亮星 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;/</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="注册" tabindex="-1">注册 <a class="header-anchor" href="#注册" aria-label="Permalink to &quot;注册&quot;">​</a></h4><p>在注册一个组件的时候,我们始终需要给它一个名字。 定义组件名的方式有两种：</p><ul><li>使用 kebab-case</li></ul><p>当使用 kebab-case (短横线分隔命名) 定义一个组件时,你也必须在引用这个自定义元素时使用 kebab-case,例如 <code>&lt;my-component-name&gt;</code>。</p><ul><li>使用 PascalCase</li></ul><p>当使用 PascalCase (首字母大写命名) 定义一个组件时,你在引用这个自定义元素时两种命名法都可以使用。 也就是说 <code>&lt;my-component-name&gt;</code> 和 <code>&lt;MyComponentName&gt;</code> 都是可接受的。</p><p>在uni-app工程根目录下的 <code>components</code> 目录,创建并存放自定义组件：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">│─components            	符合vue组件规范的uni-app组件目录</span></span>
<span class="line"><span style="color:#E1E4E8;">│  └─componentA         	符合‘components/组件名称/组件名称.vue’目录结构,easycom方式可直接使用组件</span></span>
<span class="line"><span style="color:#E1E4E8;">│  		└─componentA.vue    可复用的componentA组件</span></span>
<span class="line"><span style="color:#E1E4E8;">│  └─component-a.vue      可复用的component-a组件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">│─components            	符合vue组件规范的uni-app组件目录</span></span>
<span class="line"><span style="color:#24292E;">│  └─componentA         	符合‘components/组件名称/组件名称.vue’目录结构,easycom方式可直接使用组件</span></span>
<span class="line"><span style="color:#24292E;">│  		└─componentA.vue    可复用的componentA组件</span></span>
<span class="line"><span style="color:#24292E;">│  └─component-a.vue      可复用的component-a组件</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="全局注册" tabindex="-1">全局注册 <a class="header-anchor" href="#全局注册" aria-label="Permalink to &quot;全局注册&quot;">​</a></h4><p><code>uni-app</code> 支持配置全局组件,需在 <code>main.js</code> 里进行全局注册,注册后就可在所有页面里使用该组件。</p><p><strong>注意</strong></p><ul><li>Vue.component 的第一个参数必须是静态的字符串。</li><li>nvue 页面暂不支持全局组件。</li></ul><p><code>main.js</code> 里进行全局导入和注册</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Vue </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pageHead </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./components/page-head.vue&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">	Vue.</span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;page-head&#39;</span><span style="color:#E1E4E8;">,pageHead)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Vue </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pageHead </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./components/page-head.vue&#39;</span></span>
<span class="line"><span style="color:#24292E;">	Vue.</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;page-head&#39;</span><span style="color:#24292E;">,pageHead)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>index.vue</code> 里可直接使用组件</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			&lt;</span><span style="color:#85E89D;">page-head</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">page-head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;/</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;</span><span style="color:#22863A;">page-head</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">page-head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;/</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="局部注册" tabindex="-1">局部注册 <a class="header-anchor" href="#局部注册" aria-label="Permalink to &quot;局部注册&quot;">​</a></h4><p>局部注册之前,在需要引用该组件的页面,导入你想使用的组件。</p><p><strong>页面引入组件方式</strong></p><p>如下通过两种方式导入一个角标的组件库,<a href="https://ext.dcloud.net.cn/plugin?id=21" target="_blank" rel="noreferrer">详见 (opens new window)</a>,推荐使用 <code>easycom</code> 方式引入。</p><ol><li><strong>传统vue规范：</strong> 在 index.vue 页面中,通过 <code>import</code> 方式引入组件 ,在 <code>components</code> 选项中定义你想要使用的组件。</li></ol><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">&lt;!-- 在index.vue引入 uni-badge 组件--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			&lt;</span><span style="color:#85E89D;">uni-badge</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">text</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">uni-badge</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#6A737D;">&lt;!-- 3.使用组件 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;/</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> uniBadge </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@/components/uni-badge/uni-badge.vue&#39;</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">//1.导入组件（这步属于传统vue规范,但在uni-app的easycom下可以省略这步）</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			components:{uniBadge }</span><span style="color:#6A737D;">//2.注册组件（这步属于传统vue规范,但在uni-app的easycom下可以省略这步） </span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">&lt;!-- 在index.vue引入 uni-badge 组件--&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;</span><span style="color:#22863A;">uni-badge</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">text</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">uni-badge</span><span style="color:#24292E;">&gt;</span><span style="color:#6A737D;">&lt;!-- 3.使用组件 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;/</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> uniBadge </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/components/uni-badge/uni-badge.vue&#39;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">//1.导入组件（这步属于传统vue规范,但在uni-app的easycom下可以省略这步）</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			components:{uniBadge }</span><span style="color:#6A737D;">//2.注册组件（这步属于传统vue规范,但在uni-app的easycom下可以省略这步） </span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>对于 <code>components</code> 对象中的每个 property 来说,其 property 名就是自定义元素的名字,其 property 值就是这个组件的选项对象。</p><p>在对象中放一个类似 uniBadge 的变量名其实是 uniBadge : uniBadge 的缩写,即这个变量名同时是：</p><ul><li>用在模板中的自定义元素的名称</li><li>包含了这个组件选项的变量名(仅支持驼峰法命名)</li></ul><ol><li><strong>通过uni-app的<a href="https://uniapp.dcloud.io/collocation/pages?id=easycom" target="_blank" rel="noreferrer">easycom (opens new window)</a>：</strong> 将组件引入精简为一步。只要组件安装在项目的 <code>components</code> 目录下,并符合 <code>components/组件名称/组件名称.vue</code> 目录结构。就可以不用引用、注册,直接在页面中使用。</li></ol><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">&lt;!-- 在index.vue引入 uni-badge 组件--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			&lt;</span><span style="color:#85E89D;">uni-badge</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">text</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">uni-badge</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#6A737D;">&lt;!-- 3.使用组件 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;/</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 这里不用import引入,也不需要在components内注册uni-badge组件。template里就可以直接用</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">				}</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">&lt;!-- 在index.vue引入 uni-badge 组件--&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;</span><span style="color:#22863A;">uni-badge</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">text</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">uni-badge</span><span style="color:#24292E;">&gt;</span><span style="color:#6A737D;">&lt;!-- 3.使用组件 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;/</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 这里不用import引入,也不需要在components内注册uni-badge组件。template里就可以直接用</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li><strong>easycom是自动开启的</strong>,不需要手动开启,有需求时可以在 <code>pages.json</code> 的 <code>easycom</code> 节点进行个性化设置,<a href="https://uniapp.dcloud.io/collocation/pages?id=easycom" target="_blank" rel="noreferrer">详见 (opens new window)</a>。</li><li>不管components目录下安装了多少组件,easycom打包后会自动剔除没有使用的组件,对组件库的使用尤为友好。</li></ul><p>组件是 <code>vue</code> 技术中非常重要的部分,组件使得与ui相关的轮子可以方便的制造和共享,进而使得 <code>vue</code> 使用者的开发效率大幅提升。</p><p><code>uni-app</code> 搭建了组件的插件市场,有很多现成的组件,若下载符合components/组件名称/组件名称.vue目录结构的组件,均可直接使用。<a href="https://ext.dcloud.net.cn/" target="_blank" rel="noreferrer">uni-app插件市场(opens new window)</a></p><blockquote><p><code>uni-app</code>只支持 vue单文件组件（.vue 组件）。其他的诸如：动态组件,自定义 <code>render</code> ,和 <code>&lt;script type=&quot;text/x-template&quot;&gt;</code> 字符串模版等,在非H5端不支持</p></blockquote><h4 id="ref" tabindex="-1">ref <a class="header-anchor" href="#ref" aria-label="Permalink to &quot;ref&quot;">​</a></h4><p>被用来给元素或子组件注册引用信息,引用信息将会注册在父组件的 <code>$refs</code> 对象上。</p><p>如果在普通的 DOM 元素上使用,引用指向的就是 DOM 元素；如果用在子组件上,引用就指向组件实例：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 非H5端不支持通过this.$refs.content来获取view实例 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#E1E4E8;">&gt;hello&lt;/</span><span style="color:#FDAEB7;font-style:italic;">view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 支持通过this.$refs.child来获取child-component实例 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">child-component</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;child&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">child-component</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 非H5端不支持通过this.$refs.content来获取view实例 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;content&quot;</span><span style="color:#24292E;">&gt;hello&lt;/</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 支持通过this.$refs.child来获取child-component实例 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">child-component</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;child&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">child-component</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>当 <code>ref</code> 和 <code>v-for</code> 一起用于元素或组件的时候,引用信息将是包含 DOM 节点或组件实例的数组</p><h4 id="小程序不支持列表" tabindex="-1">小程序不支持列表 <a class="header-anchor" href="#小程序不支持列表" aria-label="Permalink to &quot;小程序不支持列表&quot;">​</a></h4><ul><li>作用域插槽（HBuilderX 3.1.19 以下仅支持解构插槽且不可使用作用域外数据以及使用复杂的表达式）</li><li>动态组件</li><li>异步组件</li><li><code>inline-template</code></li><li><code>X-Templates</code></li><li><code>keep-alive</code>（App端也未支持）</li><li><code>transition</code> （可使用 <code>animation</code> 或 CSS 动画替代）</li></ul><h4 id="命名限制" tabindex="-1">命名限制 <a class="header-anchor" href="#命名限制" aria-label="Permalink to &quot;命名限制&quot;">​</a></h4><p>在 uni-app 中以下这些作为保留关键字,不可作为组件名。</p><ul><li><code>a</code></li><li><code>canvas</code></li><li><code>cell</code></li><li><code>content</code></li><li><code>countdown</code></li><li><code>datepicker</code></li><li><code>div</code></li><li><code>element</code></li><li><code>embed</code></li><li><code>header</code></li><li><code>image</code></li><li><code>img</code></li><li><code>indicator</code></li><li><code>input</code></li><li><code>link</code></li><li><code>list</code></li><li><code>loading-indicator</code></li><li><code>loading</code></li><li><code>marquee</code></li><li><code>meta</code></li><li><code>refresh</code></li><li><code>richtext</code></li><li><code>script</code></li><li><code>scrollable</code></li><li><code>scroller</code></li><li><code>select</code></li><li><code>slider-neighbor</code></li><li><code>slider</code></li><li><code>slot</code></li><li><code>span</code></li><li><code>spinner</code></li><li><code>style</code></li><li><code>svg</code></li><li><code>switch</code></li><li><code>tabbar</code></li><li><code>tabheader</code></li><li><code>template</code></li><li><code>text</code></li><li><code>textarea</code></li><li><code>timepicker</code></li><li><code>transition-group</code></li><li><code>transition</code></li><li><code>video</code></li><li><code>view</code></li><li><code>web</code></li></ul><p>Tips</p><ul><li>除以上列表中的名称外,标准的 HTML 及 SVG 标签名也不能作为组件名。</li><li>在百度小程序中使用时,不要在 data 内使用 hidden ,可能会导致渲染错误。</li><li>methods中不可使用与生命周期同名的方法名</li></ul><h3 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h3><h4 id="全局配置" tabindex="-1">全局配置 <a class="header-anchor" href="#全局配置" aria-label="Permalink to &quot;全局配置&quot;">​</a></h4><table><thead><tr><th>Vue 全局配置</th><th>描述</th><th>H5</th><th>App端</th><th>小程序</th><th>说明</th></tr></thead><tbody><tr><td>Vue.config.silent</td><td>取消 Vue 所有的日志与警告 <a href="https://v2.cn.vuejs.org/v2/api/#silent" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>Vue.config.optionMergeStrategies</td><td>自定义合并策略的选项 <a href="https://v2.cn.vuejs.org/v2/api/#optionMergeStrategies" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>Vue.config.devtools</td><td>配置是否允许 vue-devtools 检查代码 <a href="https://v2.cn.vuejs.org/v2/api/#devtools" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>x</td><td>x</td><td>只在Web环境下支持</td></tr><tr><td>Vue.config.errorHandler</td><td>指定组件的渲染和观察期间未捕获错误的处理函数 <a href="https://v2.cn.vuejs.org/v2/api/#errorHandler" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>Vue.config.warnHandler</td><td>为 Vue 的运行时警告赋予一个自定义处理函数 <a href="https://v2.cn.vuejs.org/v2/api/#warnHandler" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>Vue.config.ignoredElements</td><td>须使 Vue 忽略在 Vue 之外的自定义元素 <a href="https://v2.cn.vuejs.org/v2/api/#ignoredElements" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td>强烈不推荐,会覆盖uni-app框架配置的内置组件</td></tr><tr><td>Vue.config.keyCodes</td><td>给 v-on 自定义键位别名 <a href="https://v2.cn.vuejs.org/v2/api/#keyCodes" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>x</td><td>x</td><td></td></tr><tr><td>Vue.config.performance</td><td>设置为 true 以在浏览器开发工具的性能/时间线面板中启用对组件初始化、编译、渲染和打补丁的性能追踪 <a href="https://v2.cn.vuejs.org/v2/api/#performance" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>x</td><td>x</td><td>只在Web环境下支持</td></tr><tr><td>Vue.config.productionTip</td><td>设置为 false 以阻止 vue 在启动时生成生产提示 <a href="https://v2.cn.vuejs.org/v2/api/#productionTip" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td>-</td></tr></tbody></table><h4 id="全局-api" tabindex="-1">全局 API <a class="header-anchor" href="#全局-api" aria-label="Permalink to &quot;全局 API&quot;">​</a></h4><table><thead><tr><th>Vue 全局 API</th><th>描述</th><th>H5</th><th>App端</th><th>小程序</th><th>说明</th></tr></thead><tbody><tr><td>Vue.extend</td><td>使用基础 Vue 构造器,创建一个“子类” <a href="https://v2.cn.vuejs.org/v2/api/#Vue-extend" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>x</td><td>不可作为组件使用</td></tr><tr><td>Vue.nextTick</td><td>在下次 DOM 更新循环结束之后执行延迟回调 <a href="https://v2.cn.vuejs.org/v2/api/#Vue-nextTick" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>x</td><td>x</td><td></td></tr><tr><td>Vue.set</td><td>向响应式对象中添加一个 property,并确保这个新 property 同样是响应式的,且触发视图更新 <a href="https://v2.cn.vuejs.org/v2/api/#Vue-set" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>Vue.delete</td><td>删除对象的 property。如果对象是响应式的,确保删除能触发更新视图 <a href="https://v2.cn.vuejs.org/v2/api/#Vue-delete" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>Vue.directive</td><td>注册或获取全局指令 <a href="https://v2.cn.vuejs.org/v2/api/#Vue-directive" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>x</td><td></td></tr><tr><td>Vue.filter</td><td>注册或获取全局过滤器 <a href="https://v2.cn.vuejs.org/v2/api/#Vue-filter" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>x</td><td></td></tr><tr><td>Vue.component</td><td>注册或获取全局组件。注册还会自动使用给定的 id 设置组件的名称 <a href="https://v2.cn.vuejs.org/v2/api/#Vue-component" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>Vue.use</td><td>安装 Vue.js 插件 <a href="https://v2.cn.vuejs.org/v2/api/#Vue-use" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>Vue.mixin</td><td>全局注册一个混入,影响注册之后所有创建的每个 Vue 实例 <a href="https://v2.cn.vuejs.org/v2/api/#Vue-mixin" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>Vue.version</td><td>提供字符串形式的 Vue 安装版本号 <a href="https://v2.cn.vuejs.org/v2/api/#Vue-version" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>Vue.compile</td><td>将一个模板字符串编译成 render 函数。只在完整版时可用。<a href="https://v2.cn.vuejs.org/v2/api/#Vue-compile" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>x</td><td>x</td><td>uni-app使用的vue是只包含运行时的版本</td></tr></tbody></table><h4 id="选项" tabindex="-1">选项 <a class="header-anchor" href="#选项" aria-label="Permalink to &quot;选项&quot;">​</a></h4><table><thead><tr><th>Vue 选项</th><th>描述</th><th>H5</th><th>App端</th><th>小程序</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>Vue 实例的数据对象 <a href="https://v2.cn.vuejs.org/v2/api/#data" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>props</td><td>props 可以是数组或对象,用于接收来自父组件的数据 <a href="https://v2.cn.vuejs.org/v2/api/#props" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>propsData</td><td>创建实例时传递 props。主要作用是方便测试 <a href="https://v2.cn.vuejs.org/v2/api/#propsData" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>computed</td><td>计算属性将被混入到 Vue 实例中 <a href="https://v2.cn.vuejs.org/v2/api/#computed" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>methods</td><td>methods 将被混入到 Vue 实例中 <a href="https://v2.cn.vuejs.org/v2/api/#methods" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>watch</td><td>一个对象,键是需要观察的表达式,值是对应回调函数 <a href="https://v2.cn.vuejs.org/v2/api/#watch" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>el</td><td>提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标 <a href="https://v2.cn.vuejs.org/v2/api/#el" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>x</td><td>x</td><td></td></tr><tr><td>template</td><td>一个字符串模板作为 Vue 实例的标识使用 <a href="https://v2.cn.vuejs.org/v2/api/#template" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>x</td><td>x</td><td>uni-app使用的vue是只包含运行时的版本</td></tr><tr><td>render</td><td>字符串模板的代替方案,该渲染函数接收一个 createElement 方法作为第一个参数用来创建 VNode。<a href="https://v2.cn.vuejs.org/v2/api/#render" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>x</td><td>x</td><td></td></tr><tr><td>renderError</td><td>当 render 函数遭遇错误时,提供另外一种渲染输出,只在开发者环境下工作 <a href="https://v2.cn.vuejs.org/v2/api/#renderError" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>x</td><td>x</td><td></td></tr><tr><td>directives</td><td>包含 Vue 实例可用指令的哈希表 <a href="https://v2.cn.vuejs.org/v2/api/#directives" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>x</td><td></td></tr><tr><td>filters</td><td>包含 Vue 实例可用过滤器的哈希表 <a href="https://v2.cn.vuejs.org/v2/api/#filters" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>components</td><td>包含 Vue 实例可用组件的哈希表 <a href="https://v2.cn.vuejs.org/v2/api/#components" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>parent</td><td>指定已创建的实例之父实例,在两者之间建立父子关系 <a href="https://v2.cn.vuejs.org/v2/api/#parent" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td>不推荐</td></tr><tr><td>mixins</td><td>选项接收一个混入对象的数组 <a href="https://v2.cn.vuejs.org/v2/api/#mixins" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>extends</td><td>允许声明扩展另一个组件 <a href="https://v2.cn.vuejs.org/v2/api/#extends" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>provide/inject</td><td>允许一个祖先组件向其所有子孙后代注入一个依赖,不论组件层次有多深,并在其上下游关系成立的时间里始终生效 <a href="https://v2.cn.vuejs.org/v2/api/#provide-inject" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>name</td><td>允许组件模板递归地调用自身 <a href="https://v2.cn.vuejs.org/v2/api/#name" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>delimiters</td><td>改变纯文本插入分隔符 <a href="https://v2.cn.vuejs.org/v2/api/#delimiters" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>x</td><td>x</td><td></td></tr><tr><td>functional</td><td>使组件无状态 (没有 data) 和无实例 (没有 this 上下文) <a href="https://v2.cn.vuejs.org/v2/api/#functional" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>x</td><td>x</td><td></td></tr><tr><td>model</td><td>允许一个自定义组件在使用 v-model 时定制 prop 和 event <a href="https://v2.cn.vuejs.org/v2/api/#model" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>x</td><td></td></tr><tr><td>inheritAttrs</td><td>inheritAttrs属性默认值为true,表示允许组件的根节点继承$attrs包含的属性 <a href="https://v2.cn.vuejs.org/v2/api/#inheritAttrs" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>x</td><td></td></tr><tr><td>comments</td><td>当设为 true 时,将会保留且渲染模板中的 HTML 注释 <a href="https://v2.cn.vuejs.org/v2/api/#comments" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>x</td><td>x</td><td>-</td></tr></tbody></table><h4 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h4><table><thead><tr><th>生命周期钩子</th><th>描述</th><th>H5</th><th>App端</th><th>小程序</th><th>说明</th></tr></thead><tbody><tr><td>beforeCreate</td><td>在实例初始化之后被调用 <a href="https://v2.cn.vuejs.org/v2/api/#beforeCreate" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>created</td><td>在实例创建完成后被立即调用 <a href="https://v2.cn.vuejs.org/v2/api/#created" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用 <a href="https://v2.cn.vuejs.org/v2/api/#beforeMount" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>mounted</td><td>挂载到实例上去之后调用 <a href="https://v2.cn.vuejs.org/v2/api/#mounted" target="_blank" rel="noreferrer">详情 (opens new window)</a>注意：此处并不能确定子组件被全部挂载,如果需要子组件完全挂载之后在执行操作可以使用$nextTick <a href="https://v2.cn.vuejs.org/v2/api/#Vue-nextTick" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>beforeUpdate</td><td>数据更新时调用,发生在虚拟 DOM 打补丁之前 <a href="https://v2.cn.vuejs.org/v2/api/#beforeUpdate" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>updated</td><td>由于数据更改导致的虚拟 DOM 重新渲染和打补丁,在这之后会调用该钩子 <a href="https://v2.cn.vuejs.org/v2/api/#updated" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>activated</td><td>被 keep-alive 缓存的组件激活时调用 <a href="https://v2.cn.vuejs.org/v2/api/#activated" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>x</td><td></td></tr><tr><td>deactivated</td><td>被 keep-alive 缓存的组件停用时调用 <a href="https://v2.cn.vuejs.org/v2/api/#deactivated" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>x</td><td></td></tr><tr><td>beforeDestroy</td><td>实例销毁之前调用。在这一步,实例仍然完全可用 <a href="https://v2.cn.vuejs.org/v2/api/#beforeDestroy" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>destroyed</td><td>Vue 实例销毁后调用。调用后,Vue 实例指示的所有东西都会解绑定,所有的事件监听器会被移除,所有的子实例也会被销毁 <a href="https://v2.cn.vuejs.org/v2/api/#destroyed" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>errorCaptured</td><td>当捕获一个来自子孙组件的错误时被调用 <a href="https://v2.cn.vuejs.org/v2/api/#errorCaptured" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td>-</td></tr></tbody></table><h4 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-label="Permalink to &quot;实例属性&quot;">​</a></h4><table><thead><tr><th>Vue 实例属性</th><th>描述</th><th>H5</th><th>App端</th><th>小程序</th><th>说明</th></tr></thead><tbody><tr><td>vm.$data</td><td>Vue 实例观察的数据对象 <a href="https://v2.cn.vuejs.org/v2/api/#vm-data" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>vm.$props</td><td>当前组件接收到的 props 对象 <a href="https://v2.cn.vuejs.org/v2/api/#vm-props" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>vm.$el</td><td>Vue 实例使用的根 DOM 元素 <a href="https://v2.cn.vuejs.org/v2/api/#vm-el" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>x</td><td>x</td><td></td></tr><tr><td>vm.$options</td><td>用于当前 Vue 实例的初始化选项 <a href="https://v2.cn.vuejs.org/v2/api/#vm-options" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>vm.$parent</td><td>父实例,如果当前实例有的话 <a href="https://v2.cn.vuejs.org/v2/api/#vm-parent" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td>H5端 <code>view</code>、<code>text</code> 等内置标签是以 Vue 组件方式实现,<code>$parent</code> 会获取这些到内置组件,导致的问题是 <code>this.$parent</code> 与其他平台不一致,解决方式是使用 <code>this.$parent.$parent</code> 获取或自定义组件根节点由 <code>view</code> 改为 <code>div</code></td></tr><tr><td>vm.$root</td><td>当前组件树的根 Vue 实例 <a href="https://v2.cn.vuejs.org/v2/api/#vm-root" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>vm.$children</td><td>当前实例的直接子组件 <a href="https://v2.cn.vuejs.org/v2/api/#vm-children" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td>H5端 <code>view</code>、<code>text</code> 等内置标签是以 Vue 组件方式实现,<code>$children</code> 会获取到这些内置组件,导致的问题是 <code>this.$children</code> 与其他平台不一致,解决方式是使用 <code>this.$children.$children</code> 获取或自定义组件根节点由 <code>view</code> 改为 <code>div</code></td></tr><tr><td>vm.$slots</td><td>用来访问被插槽分发的内容 <a href="https://v2.cn.vuejs.org/v2/api/#vm-slots" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>x</td><td>√</td><td></td></tr><tr><td>vm.$scopedSlots</td><td>用来访问作用域插槽 <a href="https://v2.cn.vuejs.org/v2/api/#vm-scopedSlots" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>vm.$refs</td><td>一个对象,持有注册过 ref attribute 的所有 DOM 元素和组件实例<a href="https://v2.cn.vuejs.org/v2/api/#vm-refs" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td>非H5端只能用于获取自定义组件,不能用于获取内置组件实例（如：view、text）</td></tr><tr><td>vm.$isServer</td><td>当前 Vue 实例是否运行于服务器 <a href="https://v2.cn.vuejs.org/v2/api/#vm-isServer" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>x</td><td>App端总是返回false</td></tr><tr><td>vm.$attrs</td><td>包含了父作用域中不作为 prop 被识别 (且获取) 的 attribute 绑定 <a href="https://v2.cn.vuejs.org/v2/api/#vm-attrs" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>x</td><td></td></tr><tr><td>vm.$listeners</td><td>包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器 <a href="https://v2.cn.vuejs.org/v2/api/#vm-listeners" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>x</td><td></td></tr></tbody></table><h4 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h4><table><thead><tr><th>实例方法</th><th>描述</th><th>H5</th><th>App端</th><th>小程序</th><th>说明</th></tr></thead><tbody><tr><td>vm.$watch()</td><td>观察 Vue 实例上的一个表达式或者一个函数计算结果的变化 <a href="https://v2.cn.vuejs.org/v2/api/#vm-watch" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>vm.$set()</td><td>这是全局 Vue.set 的别名 <a href="https://v2.cn.vuejs.org/v2/api/#vm-set" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>vm.$delete()</td><td>这是全局 Vue.delete 的别名 <a href="https://v2.cn.vuejs.org/v2/api/#vm-delete" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>vm.$on()</td><td>监听当前实例上的自定义事件 <a href="https://v2.cn.vuejs.org/v2/api/#vm-on" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>vm.$once()</td><td>监听一个自定义事件,但是只触发一次 <a href="https://v2.cn.vuejs.org/v2/api/#vm-once" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>vm.$off()</td><td>移除自定义事件监听器 <a href="https://v2.cn.vuejs.org/v2/api/#vm-off" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>vm.$emit()</td><td>触发当前实例上的事件 <a href="https://v2.cn.vuejs.org/v2/api/#vm-emit" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>vm.$mount()</td><td>手动地挂载一个未挂载的实例 <a href="https://v2.cn.vuejs.org/v2/api/#vm-mount" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>x</td><td>x</td><td></td></tr><tr><td>vm.$forceUpdate()</td><td>迫使 Vue 实例重新渲染 <a href="https://v2.cn.vuejs.org/v2/api/#vm-forceUpdate" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>vm.$nextTick()</td><td>将回调延迟到下次 DOM 更新循环之后执行 <a href="https://v2.cn.vuejs.org/v2/api/#vm-nextTick" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>vm.$destroy()</td><td>完全销毁一个实例 <a href="https://v2.cn.vuejs.org/v2/api/#vm-destroy" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td>-</td></tr></tbody></table><h4 id="模板指令" tabindex="-1">模板指令 <a class="header-anchor" href="#模板指令" aria-label="Permalink to &quot;模板指令&quot;">​</a></h4><table><thead><tr><th>Vue 指令</th><th>描述</th><th>H5</th><th>App端</th><th>小程序</th><th>说明</th></tr></thead><tbody><tr><td>v-text</td><td>更新元素的 textContent <a href="https://v2.cn.vuejs.org/v2/api/#v-text" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>v-html</td><td>更新元素的 innerHTML <a href="https://v2.cn.vuejs.org/v2/api/#v-html" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>x</td><td>微信小程序会被转成 <code>rich-text</code></td></tr><tr><td>v-show</td><td>根据表达式之真假值,切换元素的 display CSS属性 <a href="https://v2.cn.vuejs.org/v2/api/#v-show" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>v-if</td><td>根据表达式的值的 truthiness 来有条件地渲染元素 <a href="https://v2.cn.vuejs.org/v2/api/#v-if" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>v-else</td><td>为 v-if 或者 v-else-if 添加“else 块” <a href="https://v2.cn.vuejs.org/v2/api/#v-else" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>v-else-if</td><td>表示 v-if 的“else if 块”。可以链式调用 <a href="https://v2.cn.vuejs.org/v2/api/#v-else-if" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>v-for</td><td>基于源数据多次渲染元素或模板块 <a href="https://v2.cn.vuejs.org/v2/api/#v-for" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>v-on</td><td>绑定事件监听器 <a href="https://v2.cn.vuejs.org/v2/api/#v-on" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>v-bind</td><td>动态地绑定一个或多个 attribute,或一个组件 prop 到表达式 <a href="https://v2.cn.vuejs.org/v2/api/#v-bind" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>v-model</td><td>在表单控件或者组件上创建双向绑定 <a href="https://v2.cn.vuejs.org/v2/api/#v-model" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>v-pre</td><td>跳过这个元素和它的子元素的编译过程 <a href="https://v2.cn.vuejs.org/v2/api/#v-pre" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>x</td><td></td></tr><tr><td>v-cloak</td><td>这个指令保持在元素上直到关联实例结束编译 <a href="https://v2.cn.vuejs.org/v2/api/#v-cloak" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>x</td><td>x</td><td></td></tr><tr><td>v-once</td><td>只渲染元素和组件一次 <a href="https://v2.cn.vuejs.org/v2/api/#v-once" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>x</td><td>-</td></tr></tbody></table><h4 id="特殊属性" tabindex="-1">特殊属性 <a class="header-anchor" href="#特殊属性" aria-label="Permalink to &quot;特殊属性&quot;">​</a></h4><table><thead><tr><th>特殊属性</th><th>描述</th><th>H5</th><th>App端</th><th>小程序</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>主要用在 Vue 的虚拟 DOM 算法,在新旧 nodes 对比时辨识 VNodes <a href="https://v2.cn.vuejs.org/v2/api/#key" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>ref</td><td>ref 被用来给元素或子组件注册引用信息 <a href="https://v2.cn.vuejs.org/v2/api/#ref" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td>非 H5 平台只能获取 vue 组件实例不能获取到内置组件实例</td></tr><tr><td>is</td><td>用于动态组件且基于 DOM 内模板的限制来工作 <a href="https://v2.cn.vuejs.org/v2/api/#is" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√ (需传入 String 类型)</td><td>x</td><td>-</td></tr></tbody></table><h4 id="内置组件" tabindex="-1">内置组件 <a class="header-anchor" href="#内置组件" aria-label="Permalink to &quot;内置组件&quot;">​</a></h4><table><thead><tr><th>内置组件</th><th>描述</th><th>H5</th><th>App端</th><th>小程序</th><th>说明</th></tr></thead><tbody><tr><td>component</td><td>渲染一个“元组件”为动态组件。依 is 的值,来决定哪个组件被渲染 <a href="https://v2.cn.vuejs.org/v2/api/#component" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>x</td><td></td></tr><tr><td>transition</td><td>作为单个元素/组件的过渡效果 <a href="https://v2.cn.vuejs.org/v2/api/#transition" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>x</td><td>x</td><td></td></tr><tr><td>transition-group</td><td>作为多个元素/组件的过渡效果 <a href="https://v2.cn.vuejs.org/v2/api/#transition-group" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>x</td><td>x</td><td></td></tr><tr><td>keep-alive</td><td>包裹动态组件时,会缓存不活动的组件实例,而不是销毁它们 <a href="https://v2.cn.vuejs.org/v2/api/#keep-alive" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>x</td><td>x</td><td></td></tr><tr><td>slot</td><td>作为组件模板之中的内容分发插槽 <a href="https://v2.cn.vuejs.org/v2/api/#slot" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td>-</td></tr><tr><td>template</td><td>并不是一个组件,它仅仅是一个包装元素,不会在页面中做任何渲染,只接受控制属性 <a href="https://uniapp.dcloud.io/component/vue-component?id=template" target="_blank" rel="noreferrer">详情(opens new window)</a></td><td>√</td><td>√</td><td>√</td><td>-</td></tr></tbody></table><h4 id="uni-app-全局变量的几种实现方式" tabindex="-1">uni-app 全局变量的几种实现方式 <a class="header-anchor" href="#uni-app-全局变量的几种实现方式" aria-label="Permalink to &quot;uni-app 全局变量的几种实现方式&quot;">​</a></h4><p><strong>挂载 Vue.prototype</strong></p><p>将一些使用频率较高的常量或者方法,直接扩展到 Vue.prototype 上,每个 Vue 对象都会“继承”下来。</p><p><strong>注意这种方式只支持vue页面</strong></p><p>示例如下： 在 main.js 中挂载属性/方法</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.websiteUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://uniapp.dcloud.io&#39;</span><span style="color:#E1E4E8;">;  </span></span>
<span class="line"><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.now </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Date.now </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getTime</span><span style="color:#E1E4E8;">();  </span></span>
<span class="line"><span style="color:#E1E4E8;">};  </span></span>
<span class="line"><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.isArray </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Array.isArray </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">) {  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">;  </span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.websiteUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://uniapp.dcloud.io&#39;</span><span style="color:#24292E;">;  </span></span>
<span class="line"><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.now </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Date.now </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getTime</span><span style="color:#24292E;">();  </span></span>
<span class="line"><span style="color:#24292E;">};  </span></span>
<span class="line"><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.isArray </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Array.isArray </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">) {  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">;  </span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>然后在 pages/index/index.vue 中调用</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    export default {  </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() {  </span></span>
<span class="line"><span style="color:#E1E4E8;">            return {};  </span></span>
<span class="line"><span style="color:#E1E4E8;">        },  </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">onLoad</span><span style="color:#E1E4E8;">(){  </span></span>
<span class="line"><span style="color:#E1E4E8;">            console.log(</span><span style="color:#9ECBFF;">&#39;now:&#39;</span><span style="color:#E1E4E8;"> + this.now());  </span></span>
<span class="line"><span style="color:#E1E4E8;">        },  </span></span>
<span class="line"><span style="color:#E1E4E8;">        methods: {  </span></span>
<span class="line"><span style="color:#E1E4E8;">        }  </span></span>
<span class="line"><span style="color:#E1E4E8;">    }  </span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;  </span></span>
<span class="line"><span style="color:#24292E;">    export default {  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {  </span></span>
<span class="line"><span style="color:#24292E;">            return {};  </span></span>
<span class="line"><span style="color:#24292E;">        },  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">onLoad</span><span style="color:#24292E;">(){  </span></span>
<span class="line"><span style="color:#24292E;">            console.log(</span><span style="color:#032F62;">&#39;now:&#39;</span><span style="color:#24292E;"> + this.now());  </span></span>
<span class="line"><span style="color:#24292E;">        },  </span></span>
<span class="line"><span style="color:#24292E;">        methods: {  </span></span>
<span class="line"><span style="color:#24292E;">        }  </span></span>
<span class="line"><span style="color:#24292E;">    }  </span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>这种方式,只需要在 main.js 中定义好即可在每个页面中直接调用。</p><p><strong>globalData</strong></p><p>小程序中有个globalData概念,可以在 App 上声明全局变量。 Vue 之前是没有这类概念的,但 uni-app 引入了globalData概念,并且在包括H5、App等平台都实现了。 在 App.vue 可以定义 globalData ,也可以使用 API 读写这个值。</p><p>globalData支持vue和nvue共享数据。</p><p>globalData是一种比较简单的全局变量使用方式。</p><p>定义：App.vue</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {  </span></span>
<span class="line"><span style="color:#E1E4E8;">        globalData: {  </span></span>
<span class="line"><span style="color:#E1E4E8;">            text: </span><span style="color:#9ECBFF;">&#39;text&#39;</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">        },  </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">onLaunch</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {  </span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;App Launch&#39;</span><span style="color:#E1E4E8;">)  </span></span>
<span class="line"><span style="color:#E1E4E8;">        },  </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">onShow</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {  </span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;App Show&#39;</span><span style="color:#E1E4E8;">)  </span></span>
<span class="line"><span style="color:#E1E4E8;">        },  </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">onHide</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {  </span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;App Hide&#39;</span><span style="color:#E1E4E8;">)  </span></span>
<span class="line"><span style="color:#E1E4E8;">        }  </span></span>
<span class="line"><span style="color:#E1E4E8;">    }  </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*每个页面公共css */</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {  </span></span>
<span class="line"><span style="color:#24292E;">        globalData: {  </span></span>
<span class="line"><span style="color:#24292E;">            text: </span><span style="color:#032F62;">&#39;text&#39;</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">        },  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">onLaunch</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {  </span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;App Launch&#39;</span><span style="color:#24292E;">)  </span></span>
<span class="line"><span style="color:#24292E;">        },  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">onShow</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {  </span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;App Show&#39;</span><span style="color:#24292E;">)  </span></span>
<span class="line"><span style="color:#24292E;">        },  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">onHide</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {  </span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;App Hide&#39;</span><span style="color:#24292E;">)  </span></span>
<span class="line"><span style="color:#24292E;">        }  </span></span>
<span class="line"><span style="color:#24292E;">    }  </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*每个页面公共css */</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>js中操作globalData的方式如下：</p><p>赋值：<code>getApp().globalData.text = &#39;test&#39;</code></p><p>取值：<code>console.log(getApp().globalData.text) // &#39;test&#39;</code></p><p>如果需要把globalData的数据绑定到页面上,可在页面的onshow声明周期里进行变量重赋值。HBuilderX 2.0.3起,nvue页面在<code>uni-app</code>编译模式下,也支持onshow。</p><p><strong>Vuex</strong></p><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态,并以相应的规则保证状态以一种可预测的方式发生变化。</p><p><strong>HBuilderX 2.2.5+起,支持vue和nvue之间共享。<a href="https://uniapp.dcloud.io/use-weex?id=vue-%E5%92%8C-nvue-%E5%85%B1%E4%BA%AB%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE" target="_blank" rel="noreferrer">参考(opens new window)</a></strong></p><p>这里以登录后同步更新用户信息为例,简单说明下 Vuex 的用法,更多更详细的 Vuex 的内容,建议前往其官网 <a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noreferrer">Vuex (opens new window)</a>学习下。</p><p>举例说明：</p><p>在 uni-app 项目根目录下新建 store 目录,在 store 目录下创建 index.js 定义状态值</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">store</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Vuex.</span><span style="color:#B392F0;">Store</span><span style="color:#E1E4E8;">({  </span></span>
<span class="line"><span style="color:#E1E4E8;">    state: {  </span></span>
<span class="line"><span style="color:#E1E4E8;">        login: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,  </span></span>
<span class="line"><span style="color:#E1E4E8;">        token: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,  </span></span>
<span class="line"><span style="color:#E1E4E8;">        avatarUrl: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,  </span></span>
<span class="line"><span style="color:#E1E4E8;">        userName: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">    },  </span></span>
<span class="line"><span style="color:#E1E4E8;">    mutations: {  </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">login</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">state</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">provider</span><span style="color:#E1E4E8;">) {  </span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(state)  </span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(provider)  </span></span>
<span class="line"><span style="color:#E1E4E8;">            state.login </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;  </span></span>
<span class="line"><span style="color:#E1E4E8;">            state.token </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> provider.token;  </span></span>
<span class="line"><span style="color:#E1E4E8;">            state.userName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> provider.userName;  </span></span>
<span class="line"><span style="color:#E1E4E8;">            state.avatarUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> provider.avatarUrl;  </span></span>
<span class="line"><span style="color:#E1E4E8;">        },  </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">logout</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">state</span><span style="color:#E1E4E8;">) {  </span></span>
<span class="line"><span style="color:#E1E4E8;">            state.login </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;  </span></span>
<span class="line"><span style="color:#E1E4E8;">            state.token </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">;  </span></span>
<span class="line"><span style="color:#E1E4E8;">            state.userName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">;  </span></span>
<span class="line"><span style="color:#E1E4E8;">            state.avatarUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">;  </span></span>
<span class="line"><span style="color:#E1E4E8;">        }  </span></span>
<span class="line"><span style="color:#E1E4E8;">    }  </span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">store</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Vuex.</span><span style="color:#6F42C1;">Store</span><span style="color:#24292E;">({  </span></span>
<span class="line"><span style="color:#24292E;">    state: {  </span></span>
<span class="line"><span style="color:#24292E;">        login: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,  </span></span>
<span class="line"><span style="color:#24292E;">        token: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">,  </span></span>
<span class="line"><span style="color:#24292E;">        avatarUrl: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">,  </span></span>
<span class="line"><span style="color:#24292E;">        userName: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    },  </span></span>
<span class="line"><span style="color:#24292E;">    mutations: {  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">(</span><span style="color:#E36209;">state</span><span style="color:#24292E;">, </span><span style="color:#E36209;">provider</span><span style="color:#24292E;">) {  </span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(state)  </span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(provider)  </span></span>
<span class="line"><span style="color:#24292E;">            state.login </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;  </span></span>
<span class="line"><span style="color:#24292E;">            state.token </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> provider.token;  </span></span>
<span class="line"><span style="color:#24292E;">            state.userName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> provider.userName;  </span></span>
<span class="line"><span style="color:#24292E;">            state.avatarUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> provider.avatarUrl;  </span></span>
<span class="line"><span style="color:#24292E;">        },  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">logout</span><span style="color:#24292E;">(</span><span style="color:#E36209;">state</span><span style="color:#24292E;">) {  </span></span>
<span class="line"><span style="color:#24292E;">            state.login </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;  </span></span>
<span class="line"><span style="color:#24292E;">            state.token </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">;  </span></span>
<span class="line"><span style="color:#24292E;">            state.userName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">;  </span></span>
<span class="line"><span style="color:#24292E;">            state.avatarUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">;  </span></span>
<span class="line"><span style="color:#24292E;">        }  </span></span>
<span class="line"><span style="color:#24292E;">    }  </span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>然后,需要在 main.js 挂载 Vuex</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> store </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./store&#39;</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.$store </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> store</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> store </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./store&#39;</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.$store </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> store</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>最后,在 pages/index/index.vue 使用</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    import {  </span></span>
<span class="line"><span style="color:#E1E4E8;">        mapState,  </span></span>
<span class="line"><span style="color:#E1E4E8;">        mapMutations  </span></span>
<span class="line"><span style="color:#E1E4E8;">    } from &#39;vuex&#39;;  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    export default {  </span></span>
<span class="line"><span style="color:#E1E4E8;">        computed: {  </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">mapState</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;avatarUrl&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;login&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;userName&#39;</span><span style="color:#E1E4E8;">])  </span></span>
<span class="line"><span style="color:#E1E4E8;">        },  </span></span>
<span class="line"><span style="color:#E1E4E8;">        methods: {  </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">mapMutations</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;logout&#39;</span><span style="color:#E1E4E8;">])  </span></span>
<span class="line"><span style="color:#E1E4E8;">        }  </span></span>
<span class="line"><span style="color:#E1E4E8;">    }  </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;  </span></span>
<span class="line"><span style="color:#24292E;">    import {  </span></span>
<span class="line"><span style="color:#24292E;">        mapState,  </span></span>
<span class="line"><span style="color:#24292E;">        mapMutations  </span></span>
<span class="line"><span style="color:#24292E;">    } from &#39;vuex&#39;;  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    export default {  </span></span>
<span class="line"><span style="color:#24292E;">        computed: {  </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">mapState</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;avatarUrl&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;login&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;userName&#39;</span><span style="color:#24292E;">])  </span></span>
<span class="line"><span style="color:#24292E;">        },  </span></span>
<span class="line"><span style="color:#24292E;">        methods: {  </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">mapMutations</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;logout&#39;</span><span style="color:#24292E;">])  </span></span>
<span class="line"><span style="color:#24292E;">        }  </span></span>
<span class="line"><span style="color:#24292E;">    }  </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><blockquote><p>.vue 和 .nvue 并不是一个规范,因此一些在 .vue 中适用的方案并不适用于 .nvue。 Vue 上挂载属性,不能在 .nvue 中使用</p></blockquote><h4 id="其他配置" tabindex="-1">其他配置 <a class="header-anchor" href="#其他配置" aria-label="Permalink to &quot;其他配置&quot;">​</a></h4><p>Vue 组件编译到小程序平台的时候会编译为对应平台的组件,部分小程序平台支持 options 选项（具体选项参考对应小程序平台文档的自定义组件部分）,一般情况默认即可,如有特殊需求可在 Vue 组件中增加 options 属性。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  props: [</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">(){ </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> { } },</span></span>
<span class="line"><span style="color:#E1E4E8;">  options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 微信小程序中 options 选项</span></span>
<span class="line"><span style="color:#E1E4E8;">    multipleSlots: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//  在组件定义时的选项中启动多slot支持,默认启用</span></span>
<span class="line"><span style="color:#E1E4E8;">    styleIsolation: </span><span style="color:#9ECBFF;">&quot;isolated&quot;</span><span style="color:#E1E4E8;">,  </span><span style="color:#6A737D;">//  启动样式隔离。当使用页面自定义组件,希望父组件影响子组件样式时可能需要配置。具体配置选项参见：微信小程序自定义组件的样式</span></span>
<span class="line"><span style="color:#E1E4E8;">    addGlobalClass: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//  表示页面样式将影响到自定义组件,但自定义组件中指定的样式不会影响页面。这个选项等价于设置 styleIsolation: apply-shared</span></span>
<span class="line"><span style="color:#E1E4E8;">    virtualHost: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,  </span><span style="color:#6A737D;">//  将自定义节点设置成虚拟的,更加接近Vue组件的表现。我们不希望自定义组件的这个节点本身可以设置样式、响应 flex 布局等,而是希望自定义组件内部的第一层节点能够响应 flex 布局或者样式由自定义组件本身完全决定</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  props: [</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">(){ </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { } },</span></span>
<span class="line"><span style="color:#24292E;">  options: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 微信小程序中 options 选项</span></span>
<span class="line"><span style="color:#24292E;">    multipleSlots: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//  在组件定义时的选项中启动多slot支持,默认启用</span></span>
<span class="line"><span style="color:#24292E;">    styleIsolation: </span><span style="color:#032F62;">&quot;isolated&quot;</span><span style="color:#24292E;">,  </span><span style="color:#6A737D;">//  启动样式隔离。当使用页面自定义组件,希望父组件影响子组件样式时可能需要配置。具体配置选项参见：微信小程序自定义组件的样式</span></span>
<span class="line"><span style="color:#24292E;">    addGlobalClass: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//  表示页面样式将影响到自定义组件,但自定义组件中指定的样式不会影响页面。这个选项等价于设置 styleIsolation: apply-shared</span></span>
<span class="line"><span style="color:#24292E;">    virtualHost: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,  </span><span style="color:#6A737D;">//  将自定义节点设置成虚拟的,更加接近Vue组件的表现。我们不希望自定义组件的这个节点本身可以设置样式、响应 flex 布局等,而是希望自定义组件内部的第一层节点能够响应 flex 布局或者样式由自定义组件本身完全决定</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h4><h5 id="如何获取上个页面传递的数据" tabindex="-1">如何获取上个页面传递的数据 <a class="header-anchor" href="#如何获取上个页面传递的数据" aria-label="Permalink to &quot;如何获取上个页面传递的数据&quot;">​</a></h5><p>在 onLoad 里得到,onLoad 的参数是其他页面打开当前页面所传递的数据</p><h5 id="如何设置全局的数据和全局的方法" tabindex="-1">如何设置全局的数据和全局的方法 <a class="header-anchor" href="#如何设置全局的数据和全局的方法" aria-label="Permalink to &quot;如何设置全局的数据和全局的方法&quot;">​</a></h5><p>uni-app 内置了 <a href="https://uniapp.dcloud.io/vue-vuex" target="_blank" rel="noreferrer">Vuex (opens new window)</a>,在app里的使用,可参考 <code>hello-uniapp</code> <code>store/index.js</code>。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//store.js</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Vue </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Vuex </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vuex&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">	Vue.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(Vuex)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">store</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Vuex.</span><span style="color:#B392F0;">Store</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">		state: {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">		mutations: {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">		actions: {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> store</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//main.js</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> store </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./store&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.$store </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> store</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vue</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">		store,</span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//test.vue 使用时：</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {mapState,mapMutations} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vuex&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//store.js</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Vue </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Vuex </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vuex&#39;</span></span>
<span class="line"><span style="color:#24292E;">	Vue.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(Vuex)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">store</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Vuex.</span><span style="color:#6F42C1;">Store</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">		state: {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">		mutations: {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">		actions: {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> store</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//main.js</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> store </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./store&#39;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.$store </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> store</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vue</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">		store,</span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//test.vue 使用时：</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {mapState,mapMutations} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vuex&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h5 id="如何捕获-app-的-onerror" tabindex="-1">如何捕获 app 的 onError <a class="header-anchor" href="#如何捕获-app-的-onerror" aria-label="Permalink to &quot;如何捕获 app 的 onError&quot;">​</a></h5><p>由于 onError 并不是完整意义的生命周期,所以只提供一个捕获错误的方法,在 app 的根组件上添加名为 onError 的回调函数即可。如下</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	   </span><span style="color:#6A737D;">// 只有 app 才会有 onLaunch 的生命周期</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">onLaunch</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">		   </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">		},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 捕获 app error</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">onError</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		   console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	   </span><span style="color:#6A737D;">// 只有 app 才会有 onLaunch 的生命周期</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">onLaunch</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">		   </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 捕获 app error</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">onError</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		   console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="组件属性设置不生效解决办法" tabindex="-1">组件属性设置不生效解决办法 <a class="header-anchor" href="#组件属性设置不生效解决办法" aria-label="Permalink to &quot;组件属性设置不生效解决办法&quot;">​</a></h4><p>当重复设置某些属性为相同的值时,不会同步到view层。 例如：每次将scroll-view组件的scroll-top属性值设置为0,只有第一次能顺利返回顶部。 这和props的单向数据流特性有关,组件内部scroll-top的实际值改动后,其绑定的属性并不会一同变化。</p><p>解决办法有两种（以scroll-view组件为例）：</p><ol><li>监听scroll事件,记录组件内部变化的值,在设置新值之前先设置为记录的当前值</li></ol><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">scroll-view</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scroll-y</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:scroll-top</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;scrollTop&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">@scroll</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;scroll&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">scroll-view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">export default {</span></span>
<span class="line"><span style="color:#E1E4E8;">    data() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        return {</span></span>
<span class="line"><span style="color:#E1E4E8;">            scrollTop: 0,</span></span>
<span class="line"><span style="color:#E1E4E8;">            old: {</span></span>
<span class="line"><span style="color:#E1E4E8;">                scrollTop: 0</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    methods: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        scroll: function(e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            this.old.scrollTop = e.detail.scrollTop</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        goTop: function(e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            this.scrollTop = this.old.scrollTop</span></span>
<span class="line"><span style="color:#E1E4E8;">            this.$nextTick(function() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                this.scrollTop = 0</span></span>
<span class="line"><span style="color:#E1E4E8;">            });</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">scroll-view</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scroll-y</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:scroll-top</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;scrollTop&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@scroll</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;scroll&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">scroll-view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">export default {</span></span>
<span class="line"><span style="color:#24292E;">    data() {</span></span>
<span class="line"><span style="color:#24292E;">        return {</span></span>
<span class="line"><span style="color:#24292E;">            scrollTop: 0,</span></span>
<span class="line"><span style="color:#24292E;">            old: {</span></span>
<span class="line"><span style="color:#24292E;">                scrollTop: 0</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    methods: {</span></span>
<span class="line"><span style="color:#24292E;">        scroll: function(e) {</span></span>
<span class="line"><span style="color:#24292E;">            this.old.scrollTop = e.detail.scrollTop</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        goTop: function(e) {</span></span>
<span class="line"><span style="color:#24292E;">            this.scrollTop = this.old.scrollTop</span></span>
<span class="line"><span style="color:#24292E;">            this.$nextTick(function() {</span></span>
<span class="line"><span style="color:#24292E;">                this.scrollTop = 0</span></span>
<span class="line"><span style="color:#24292E;">            });</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><ol><li>监听<code>scroll</code>事件,获取组件内部变化的值,实时更新其绑定值</li></ol><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">scroll-view</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scroll-y</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:scroll-top</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;scrollTop&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">@scroll</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;scroll&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">scroll-view</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">	export default {</span></span>
<span class="line"><span style="color:#E1E4E8;">		data() {</span></span>
<span class="line"><span style="color:#E1E4E8;">			return {</span></span>
<span class="line"><span style="color:#E1E4E8;">				scrollTop: 0,</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		},</span></span>
<span class="line"><span style="color:#E1E4E8;">		methods: {</span></span>
<span class="line"><span style="color:#E1E4E8;">			scroll: function(e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">				// 如果使用此方法,请自行增加防抖处理</span></span>
<span class="line"><span style="color:#E1E4E8;">				this.scrollTop = e.detail.scrollTop</span></span>
<span class="line"><span style="color:#E1E4E8;">			},</span></span>
<span class="line"><span style="color:#E1E4E8;">			goTop: function(e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">				this.scrollTop = 0</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">scroll-view</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scroll-y</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:scroll-top</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;scrollTop&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@scroll</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;scroll&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">scroll-view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">	export default {</span></span>
<span class="line"><span style="color:#24292E;">		data() {</span></span>
<span class="line"><span style="color:#24292E;">			return {</span></span>
<span class="line"><span style="color:#24292E;">				scrollTop: 0,</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"><span style="color:#24292E;">		methods: {</span></span>
<span class="line"><span style="color:#24292E;">			scroll: function(e) {</span></span>
<span class="line"><span style="color:#24292E;">				// 如果使用此方法,请自行增加防抖处理</span></span>
<span class="line"><span style="color:#24292E;">				this.scrollTop = e.detail.scrollTop</span></span>
<span class="line"><span style="color:#24292E;">			},</span></span>
<span class="line"><span style="color:#24292E;">			goTop: function(e) {</span></span>
<span class="line"><span style="color:#24292E;">				this.scrollTop = 0</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>第二种解决方式在某些组件可能造成抖动,<strong>推荐第一种解决方式</strong></p><h4 id="组合式-api" tabindex="-1">组合式 API <a class="header-anchor" href="#组合式-api" aria-label="Permalink to &quot;组合式 API&quot;">​</a></h4><p>目前 uni-app（Vue2） 基于 Vue 2.6,组合式 API 由 <a href="https://github.com/vuejs/composition-api" target="_blank" rel="noreferrer">@vue/composition-api (opens new window)</a>支持,script setup 由 <a href="https://github.com/antfu/unplugin-vue2-script-setup" target="_blank" rel="noreferrer">unplugin-vue2-script-setup (opens new window)</a>支持</p><p>升级 uni-app 编译器到 3.6.8+</p><ul><li>HBuilderX 创建的项目直接升级 HBuilderX 到最新版即可</li><li>CLI 创建的项目参考 <a href="https://uniapp.dcloud.net.cn/quickstart-cli.html#cliversion" target="_blank" rel="noreferrer">https://uniapp.dcloud.net.cn/quickstart-cli.html#cliversion</a> 升级依赖到最新版</li></ul><ol><li>在 main.js/ts 文件内增加安装 @vue/composition-api 插件。如果使用 nvue 页面,也需要在每个 nvue 页面安装,且每个 nvue 页面之间插件状态默认不会共享。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Vue </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> App </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Vue.config.productionTip </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> VueCompositionAPI </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@vue/composition-api&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Vue.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(VueCompositionAPI)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> App </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> App </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Vue.</span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">(Object.</span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">({ mpType: </span><span style="color:#9ECBFF;">&#39;app&#39;</span><span style="color:#E1E4E8;"> }, App)))</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">$mount</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#6A737D;">// pages/index.vue</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineComponent } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@vue/composition-api&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { onReady } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@dcloudio/uni-app&#39;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineComponent</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">onReady</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;onReady&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Vue </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> App </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Vue.config.productionTip </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> VueCompositionAPI </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@vue/composition-api&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Vue.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(VueCompositionAPI)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> App </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> App </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Vue.</span><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">(Object.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">({ mpType: </span><span style="color:#032F62;">&#39;app&#39;</span><span style="color:#24292E;"> }, App)))</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">$mount</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#6A737D;">// pages/index.vue</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineComponent } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@vue/composition-api&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { onReady } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@dcloudio/uni-app&#39;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineComponent</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">onReady</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;onReady&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><ol><li>从 @vue/composition-api 包内导入并使用基础的组合式API,具体的兼容性仍需参考：<a href="https://github.com/vuejs/composition-api#browser-compatibility" target="_blank" rel="noreferrer">@vue/composition-api (opens new window)</a>。从 @dcloudio/uni-app 包内导入 uni-app 其他生命周期API。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineComponent, ref } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@vue/composition-api&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { onReady } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@dcloudio/uni-app&#39;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineComponent</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">title</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">onReady</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;onReady&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      title</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineComponent, ref } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@vue/composition-api&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { onReady } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@dcloudio/uni-app&#39;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineComponent</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">title</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">onReady</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;onReady&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      title</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h5 id="使用-script-setup" tabindex="-1">使用 Script Setup <a class="header-anchor" href="#使用-script-setup" aria-label="Permalink to &quot;使用 Script Setup&quot;">​</a></h5><ol><li>使用 npm/yarn 安装 unplugin-vue2-script-setup 插件,此插件暂不支持 nvue 页面。</li></ol><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">unplugin-vue2-script-setup</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span></span>
<span class="line"><span style="color:#6A737D;"># or</span></span>
<span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">unplugin-vue2-script-setup</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">unplugin-vue2-script-setup</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span></span>
<span class="line"><span style="color:#6A737D;"># or</span></span>
<span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">unplugin-vue2-script-setup</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol><li>在 vue.config.js 配置 ScriptSetup 插件,以下为基础配置,其他具体配置请参考 <a href="https://github.com/antfu/unplugin-vue2-script-setup" target="_blank" rel="noreferrer">unplugin-vue2-script-setup(opens new window)</a></li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ScriptSetup</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;unplugin-vue2-script-setup/webpack&#39;</span><span style="color:#E1E4E8;">).default</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  parallel: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  configureWebpack: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">ScriptSetup</span><span style="color:#E1E4E8;">({ </span><span style="color:#6A737D;">/* options */</span><span style="color:#E1E4E8;"> }),</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">chainWebpack</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// disable type check and let \`vue-tsc\` handles it</span></span>
<span class="line"><span style="color:#E1E4E8;">    config.plugins.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fork-ts-checker&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ScriptSetup</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;unplugin-vue2-script-setup/webpack&#39;</span><span style="color:#24292E;">).default</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  parallel: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  configureWebpack: {</span></span>
<span class="line"><span style="color:#24292E;">    plugins: [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">ScriptSetup</span><span style="color:#24292E;">({ </span><span style="color:#6A737D;">/* options */</span><span style="color:#24292E;"> }),</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">chainWebpack</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">config</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// disable type check and let \`vue-tsc\` handles it</span></span>
<span class="line"><span style="color:#24292E;">    config.plugins.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fork-ts-checker&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ol><li>改用 Script Setup 写法导入 API</li></ol><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@vue/composition-api&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { onReady } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@dcloudio/uni-app&#39;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">title</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">onReady</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;onReady&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ts&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ref } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@vue/composition-api&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { onReady } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@dcloudio/uni-app&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">title</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">onReady</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;onReady&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,186),e=[t];function o(r,c,E,i,y,d){return n(),a("div",null,e)}const m=s(p,[["render",o]]);export{b as __pageData,m as default};
