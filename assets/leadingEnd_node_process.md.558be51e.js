import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.b5309610.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"leadingEnd/node/process.md","filePath":"leadingEnd/node/process.md","lastUpdated":1727086072000}'),l={name:"leadingEnd/node/process.md"},p=e(`<h2 id="process" tabindex="-1">process <a class="header-anchor" href="#process" aria-label="Permalink to &quot;process&quot;">​</a></h2><h3 id="process-arch" tabindex="-1">process.arch <a class="header-anchor" href="#process-arch" aria-label="Permalink to &quot;process.arch&quot;">​</a></h3><p>返回操作系统 CPU 架构</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(process.arch); </span><span style="color:#6A737D;">// x64</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(process.arch); </span><span style="color:#6A737D;">// x64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="process-cwd" tabindex="-1">process.cwd() <a class="header-anchor" href="#process-cwd" aria-label="Permalink to &quot;process.cwd()&quot;">​</a></h3><p>返回当前的工作目录 例如在 F:\\project\\node&gt; 执行的脚本就返回这个目录 也可以和path拼接代替__dirname使用</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(process.</span><span style="color:#B392F0;">cwd</span><span style="color:#E1E4E8;">());</span><span style="color:#6A737D;">// C:\\Users\\wxy</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(process.</span><span style="color:#6F42C1;">cwd</span><span style="color:#24292E;">());</span><span style="color:#6A737D;">// C:\\Users\\wxy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="process-argv" tabindex="-1">process.argv <a class="header-anchor" href="#process-argv" aria-label="Permalink to &quot;process.argv&quot;">​</a></h3><p>获取执行进程后面的参数 返回是一个数组 后面我们讲到命令行交互工具的时候会很有用，各种cli脚手架也是使用这种方式接受配置参数例如<code>webpack</code></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(process.argv);</span></span>
<span class="line"><span style="color:#6A737D;">//[&#39;C:\\\\Program Files\\\\nodejs\\\\node.exe&#39;,&#39;C:\\\\caoLinChao\\\\node\\\\path\\\\index.js&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(process.argv);</span></span>
<span class="line"><span style="color:#6A737D;">//[&#39;C:\\\\Program Files\\\\nodejs\\\\node.exe&#39;,&#39;C:\\\\caoLinChao\\\\node\\\\path\\\\index.js&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="process-memoryusag" tabindex="-1">process.memoryUsag <a class="header-anchor" href="#process-memoryusag" aria-label="Permalink to &quot;process.memoryUsag&quot;">​</a></h3><p>用于获取当前进程的内存使用情况。该方法返回一个对象，其中包含了各种内存使用指标，如 rss（Resident Set Size，常驻集大小）、heapTotal（堆区总大小）、heapUsed（已用堆大小）和 external（外部内存使用量）等</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">rss</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">30932992</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 常驻集大小 这是进程当前占用的物理内存量，不包括共享内存和页面缓存。它反映了进程实际占用的物理内存大小</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">heapTotal</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">6438912</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//堆区总大小 这是 V8 引擎为 JavaScript 对象分配的内存量。它包括了已用和未用的堆内存</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">heapUsed</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5678624</span><span style="color:#E1E4E8;">,  </span><span style="color:#6A737D;">//已用堆大小</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">external</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">423221</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//外部内存使用量 这部分内存不是由 Node.js 进程直接分配的，而是由其他 C/C++ 对象或系统分配的</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">arrayBuffers</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">17606</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//是用于处理二进制数据的对象类型，它使用了 JavaScript 中的 ArrayBuffer 接口。这个属性显示了当前进程中 ArrayBuffers 的数量</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">rss</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">30932992</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 常驻集大小 这是进程当前占用的物理内存量，不包括共享内存和页面缓存。它反映了进程实际占用的物理内存大小</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">heapTotal</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">6438912</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//堆区总大小 这是 V8 引擎为 JavaScript 对象分配的内存量。它包括了已用和未用的堆内存</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">heapUsed</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5678624</span><span style="color:#24292E;">,  </span><span style="color:#6A737D;">//已用堆大小</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">external</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">423221</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//外部内存使用量 这部分内存不是由 Node.js 进程直接分配的，而是由其他 C/C++ 对象或系统分配的</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">arrayBuffers</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">17606</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//是用于处理二进制数据的对象类型，它使用了 JavaScript 中的 ArrayBuffer 接口。这个属性显示了当前进程中 ArrayBuffers 的数量</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="process-exit" tabindex="-1">process.exit() <a class="header-anchor" href="#process-exit" aria-label="Permalink to &quot;process.exit()&quot;">​</a></h3><p>调用 <code>process.exit()</code> 将强制进程尽快退出，即使仍有未完全完成的异步操作挂起</p><p>下面例子5不会被打印出来 因为在2秒钟的时候就被退出了。</p><p><img src="https://raw.githubusercontent.com/caolinchao2/blogimg/main/img/cfb5b7be42b14ba2b6c6efe5f51a64a3%7Etplv-k3u1fbpfcp-jj-mark%3A3024%3A0%3A0%3A0%3Aq75.awebp" alt="image.png"></p><h3 id="process-kill" tabindex="-1">process.kill <a class="header-anchor" href="#process-kill" aria-label="Permalink to &quot;process.kill&quot;">​</a></h3><p>与exit类似，kill用来杀死一个进程，接受一个参数进程id可以通过process.pid 获取</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">process.</span><span style="color:#B392F0;">kill</span><span style="color:#E1E4E8;">(process.pid)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">process.</span><span style="color:#6F42C1;">kill</span><span style="color:#24292E;">(process.pid)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="process-env" tabindex="-1">p<wbr>rocess.env <a class="header-anchor" href="#process-env" aria-label="Permalink to &quot;p&lt;wbr&gt;rocess.env&quot;">​</a></h3><p>用于读取操作系统所有的环境变量，也可以修改和查询环境变量。</p><div class="tip custom-block"><p class="custom-block-title">修改 注意修改并不会真正影响操作系统的变量，而是只在当前线程生效，线程结束便释放。</p></div><p><img src="https://raw.githubusercontent.com/caolinchao2/blogimg/main/img/c465048127f94b74b8183a4075cef4f8%7Etplv-k3u1fbpfcp-jj-mark%3A3024%3A0%3A0%3A0%3Aq75.awebp" alt="image.png"></p><h3 id="环境变量场景" tabindex="-1">环境变量场景 <a class="header-anchor" href="#环境变量场景" aria-label="Permalink to &quot;环境变量场景&quot;">​</a></h3><p>区分开发环境 和 生产环境</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm install cross</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">env</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm install cross</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">env</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个库是干什么的 cross-env 是 跨平台设置和使用环境变量 不论是在Windows系统还是POSIX系统。同时，它提供了一个设置环境变量的脚本，使得您可以在脚本中以unix方式设置环境变量，然后在Windows上也能兼容运行</p><p>usage</p><p>cross-env NODE_ENV=dev</p><p><img src="https://raw.githubusercontent.com/caolinchao2/blogimg/main/img/bb9683ae909a42b9909683b72d90fe76%7Etplv-k3u1fbpfcp-jj-mark%3A3024%3A0%3A0%3A0%3Aq75.awebp" alt="image.png"></p><p>他的原理就是如果是windows 就调用SET 如果是posix 就调用export 设置环境变量</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NODE_ENV=production</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">#windows</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> NODE_ENV</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">production</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#posix</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">set</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NODE_ENV=production</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">#windows</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> NODE_ENV</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">production</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#posix</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="child-process" tabindex="-1">child_process <a class="header-anchor" href="#child-process" aria-label="Permalink to &quot;child_process&quot;">​</a></h2><h3 id="创建子进程" tabindex="-1">创建子进程 <a class="header-anchor" href="#创建子进程" aria-label="Permalink to &quot;创建子进程&quot;">​</a></h3><p>Nodejs创建子进程共有<code>7个</code>API Sync同步API 不加是异步API</p><ol><li>spawn 执行命令</li><li>exec 执行命令</li><li>execFile 执行可执行文件</li><li>fork 创建node子进程</li><li><code>execSync</code> 执行命令 同步执行</li><li><code>execFileSync</code> 执行可执行文件 同步执行</li><li><code>spawnSync</code> 执行命令 同步执行</li></ol><h3 id="usage" tabindex="-1">usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;usage&quot;">​</a></h3><h4 id="exec" tabindex="-1">exec <a class="header-anchor" href="#exec" aria-label="Permalink to &quot;exec&quot;">​</a></h4><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">child_process.exec(command,</span><span style="color:#E1E4E8;"> [options], callback)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">child_process.exec(command,</span><span style="color:#24292E;"> [options], callback)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>获取nodejs 版本号</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;node -v&#39;</span><span style="color:#E1E4E8;">,(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stdout</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stderr</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(err){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">  err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(stdout.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;"> })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;node -v&#39;</span><span style="color:#24292E;">,(</span><span style="color:#E36209;">err</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stdout</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stderr</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(err){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">  err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(stdout.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>options 配置项</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">cwd &lt;string&gt; 子进程的当前工作目录。</span></span>
<span class="line"><span style="color:#e1e4e8;">env &lt;Object&gt; 环境变量键值对。</span></span>
<span class="line"><span style="color:#e1e4e8;">encoding &lt;string&gt; 默认为 &#39;utf8&#39;。</span></span>
<span class="line"><span style="color:#e1e4e8;">shell &lt;string&gt; 用于执行命令的 shell。 在 UNIX 上默认为 &#39;/bin/sh&#39;，在 Windows 上默认为 p<wbr>rocess.env.ComSpec。 详见 Shell Requirements 与 Default Windows Shell。</span></span>
<span class="line"><span style="color:#e1e4e8;">timeout &lt;number&gt; 默认为 0。</span></span>
<span class="line"><span style="color:#e1e4e8;">maxBuffer &lt;number&gt; stdout 或 stderr 允许的最大字节数。 默认为 200*1024。 如果超过限制，则子进程会被终止。 查看警告： maxBuffer and Unicode。</span></span>
<span class="line"><span style="color:#e1e4e8;">killSignal &lt;string&gt; | &lt;integer&gt; 默认为 &#39;SIGTERM&#39;。</span></span>
<span class="line"><span style="color:#e1e4e8;">uid &lt;number&gt; 设置该进程的用户标识。（详见 setuid(2)）</span></span>
<span class="line"><span style="color:#e1e4e8;">gid &lt;number&gt; 设置该进程的组标识。（详见 setgid(2)）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">cwd &lt;string&gt; 子进程的当前工作目录。</span></span>
<span class="line"><span style="color:#24292e;">env &lt;Object&gt; 环境变量键值对。</span></span>
<span class="line"><span style="color:#24292e;">encoding &lt;string&gt; 默认为 &#39;utf8&#39;。</span></span>
<span class="line"><span style="color:#24292e;">shell &lt;string&gt; 用于执行命令的 shell。 在 UNIX 上默认为 &#39;/bin/sh&#39;，在 Windows 上默认为 p<wbr>rocess.env.ComSpec。 详见 Shell Requirements 与 Default Windows Shell。</span></span>
<span class="line"><span style="color:#24292e;">timeout &lt;number&gt; 默认为 0。</span></span>
<span class="line"><span style="color:#24292e;">maxBuffer &lt;number&gt; stdout 或 stderr 允许的最大字节数。 默认为 200*1024。 如果超过限制，则子进程会被终止。 查看警告： maxBuffer and Unicode。</span></span>
<span class="line"><span style="color:#24292e;">killSignal &lt;string&gt; | &lt;integer&gt; 默认为 &#39;SIGTERM&#39;。</span></span>
<span class="line"><span style="color:#24292e;">uid &lt;number&gt; 设置该进程的用户标识。（详见 setuid(2)）</span></span>
<span class="line"><span style="color:#24292e;">gid &lt;number&gt; 设置该进程的组标识。（详见 setgid(2)）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="execsync" tabindex="-1">execSync <a class="header-anchor" href="#execsync" aria-label="Permalink to &quot;execSync&quot;">​</a></h4><p>获取node版本号 如果要执行单次<code>shell</code>命令execSync方便一些 options同上</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nodeVersion</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">execSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;node -v&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(nodeVersion.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;utf-8&quot;</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nodeVersion</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">execSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;node -v&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(nodeVersion.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;utf-8&quot;</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>打开谷歌浏览器 使用exec可以打开一些软件例如 wx 谷歌 qq音乐等 以下会打开百度并且进入<code>无痕模式</code></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">execSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;start chrome http://www.baidu.com --incognito&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">execSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;start chrome http://www.baidu.com --incognito&quot;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="execfile" tabindex="-1">execFile <a class="header-anchor" href="#execfile" aria-label="Permalink to &quot;execFile&quot;">​</a></h4><p>execFile 适合执行可执行文件，例如执行一个node脚本，或者shell文件，windows可以编写cmd脚本，posix，可以编写sh脚本</p><blockquote><p>简单示例</p></blockquote><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">bat.cmd</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">bat.cmd</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>创建一个文件夹mkdir 进入目录 写入一个文件test.js 最后执行</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">echo </span><span style="color:#6A737D;">&#39;开始&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">mkdir test </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">cd ./test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">echo console.</span><span style="color:#79B8FF;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test1232131&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">test.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">echo </span><span style="color:#6A737D;">&#39;结束&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">node test.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">echo </span><span style="color:#6A737D;">&#39;开始&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">mkdir test </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">cd ./test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">echo console.</span><span style="color:#005CC5;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test1232131&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">test.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">echo </span><span style="color:#6A737D;">&#39;结束&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">node test.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>使用execFile 执行这个</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">execFile</span><span style="color:#E1E4E8;">(path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(process.</span><span style="color:#B392F0;">cwd</span><span style="color:#E1E4E8;">(),</span><span style="color:#9ECBFF;">&#39;./bat.cmd&#39;</span><span style="color:#E1E4E8;">),</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stdout</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(stdout.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">execFile</span><span style="color:#24292E;">(path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(process.</span><span style="color:#6F42C1;">cwd</span><span style="color:#24292E;">(),</span><span style="color:#032F62;">&#39;./bat.cmd&#39;</span><span style="color:#24292E;">),</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,(</span><span style="color:#E36209;">err</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stdout</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(stdout.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="https://raw.githubusercontent.com/caolinchao2/blogimg/main/img/0abf39d362d84de19e46533d51c349a2%7Etplv-k3u1fbpfcp-jj-mark%3A3024%3A0%3A0%3A0%3Aq75.awebp" alt="image.png"></p><h4 id="spawn" tabindex="-1">spawn <a class="header-anchor" href="#spawn" aria-label="Permalink to &quot;spawn&quot;">​</a></h4><div class="tip custom-block"><p class="custom-block-title">spawn 用于执行一些实时获取的信息因为spawn返回的是流边执行边返回，exec是返回一个完整的buffer，buffer的大小是200k，如果超出会报错，而spawn是无上限的。</p></div><div class="tip custom-block"><p class="custom-block-title">spawn在执行完成后会抛出close事件监听，并返回状态码，通过状态码可以知道子进程是否顺利执行。exec只能通过返回的buffer去识别完成状态，识别起来较为麻烦</p></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//                       命令      参数  options配置</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">stdout</span><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">spawn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;netstat&#39;</span><span style="color:#E1E4E8;">,[</span><span style="color:#9ECBFF;">&#39;-an&#39;</span><span style="color:#E1E4E8;">],{})</span></span>
<span class="line"><span style="color:#6A737D;">//返回的数据用data事件接受</span></span>
<span class="line"><span style="color:#E1E4E8;">stdout.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">,(</span><span style="color:#FFAB70;">steram</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(steram.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//                       命令      参数  options配置</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">stdout</span><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">spawn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;netstat&#39;</span><span style="color:#24292E;">,[</span><span style="color:#032F62;">&#39;-an&#39;</span><span style="color:#24292E;">],{})</span></span>
<span class="line"><span style="color:#6A737D;">//返回的数据用data事件接受</span></span>
<span class="line"><span style="color:#24292E;">stdout.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">,(</span><span style="color:#E36209;">steram</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(steram.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="https://raw.githubusercontent.com/caolinchao2/blogimg/main/img/c140d97ec80f44b7b40aefe0a7897053%7Etplv-k3u1fbpfcp-jj-mark%3A3024%3A0%3A0%3A0%3Aq75.awebp" alt="image.png"></p><blockquote><p>exec -&gt; execFile -&gt; spawn</p></blockquote><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">exec是底层通过execFile实现 execFile底层通过spawn实现</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">exec是底层通过execFile实现 execFile底层通过spawn实现</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="fork" tabindex="-1">fork <a class="header-anchor" href="#fork" aria-label="Permalink to &quot;fork&quot;">​</a></h4><p>场景适合大量的计算，或者容易阻塞主进程操作的一些代码，就适合开发fork</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">index.js</span></span>
<span class="line"><span style="color:#e1e4e8;">js 代码解读复制代码const {fork} = require(&#39;child_process&#39;)</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">const testProcess = fork(&#39;./test.js&#39;)</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">testProcess.send(&#39;我是主进程&#39;)</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">testProcess.on(&quot;message&quot;,(data)=&gt;{</span></span>
<span class="line"><span style="color:#e1e4e8;">    console.log(&#39;我是主进程接受消息111：&#39;,data)</span></span>
<span class="line"><span style="color:#e1e4e8;">})</span></span>
<span class="line"><span style="color:#e1e4e8;">test.js</span></span>
<span class="line"><span style="color:#e1e4e8;">js 代码解读复制代码process.on(&#39;message&#39;,(data)=&gt;{</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">    console.log(&#39;子进程接受消息：&#39;,data)</span></span>
<span class="line"><span style="color:#e1e4e8;">})</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">process.send(&#39;我是子进程&#39;)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">index.js</span></span>
<span class="line"><span style="color:#24292e;">js 代码解读复制代码const {fork} = require(&#39;child_process&#39;)</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">const testProcess = fork(&#39;./test.js&#39;)</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">testProcess.send(&#39;我是主进程&#39;)</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">testProcess.on(&quot;message&quot;,(data)=&gt;{</span></span>
<span class="line"><span style="color:#24292e;">    console.log(&#39;我是主进程接受消息111：&#39;,data)</span></span>
<span class="line"><span style="color:#24292e;">})</span></span>
<span class="line"><span style="color:#24292e;">test.js</span></span>
<span class="line"><span style="color:#24292e;">js 代码解读复制代码process.on(&#39;message&#39;,(data)=&gt;{</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    console.log(&#39;子进程接受消息：&#39;,data)</span></span>
<span class="line"><span style="color:#24292e;">})</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">process.send(&#39;我是子进程&#39;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>send 发送信息 ，message接收消息，可以相互发送接收。</p><p>fork底层使用的是IPC通道进行通讯的，</p><p><img src="https://raw.githubusercontent.com/caolinchao2/blogimg/main/img/ed87c115193d4abfb1d9f7a93b769a54%7Etplv-k3u1fbpfcp-jj-mark%3A3024%3A0%3A0%3A0%3Aq75.awebp" alt="image.png"></p>`,71),o=[p];function c(r,t,i,d,y,E){return a(),n("div",null,o)}const h=s(l,[["render",c]]);export{b as __pageData,h as default};
