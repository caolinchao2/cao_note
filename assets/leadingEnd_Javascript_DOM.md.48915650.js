import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.d7c6e0b6.js";const b=JSON.parse('{"title":"DOM","description":"","frontmatter":{},"headers":[],"relativePath":"leadingEnd/Javascript/DOM.md","filePath":"leadingEnd/Javascript/DOM.md","lastUpdated":1723012755000}'),p={name:"leadingEnd/Javascript/DOM.md"},e=l(`<h1 id="dom" tabindex="-1">DOM <a class="header-anchor" href="#dom" aria-label="Permalink to &quot;DOM&quot;">​</a></h1><h2 id="一、dom" tabindex="-1">一、DOM <a class="header-anchor" href="#一、dom" aria-label="Permalink to &quot;一、DOM&quot;">​</a></h2><p><code>DOM (document object model)</code> 文档对象模型，是W3C组织推荐的处理可扩展标记语言的标准编程接口；<code>node</code>（节点）；</p><p>元素节点（标签） 文本节点（换行或者文字） 注释节点（注释）</p><h2 id="二、获取子节点" tabindex="-1">二、获取子节点： <a class="header-anchor" href="#二、获取子节点" aria-label="Permalink to &quot;二、获取子节点：&quot;">​</a></h2><ol><li><code>父元素.children</code>；(常用)（非标准属性）获取只有元素节点；类数组</li><li><code>父元素.childNodes</code>；（标准属性）所有子节点，包括文本、空格、标签、注释；</li></ol><p>类数组：有长度，可以通过下标获取元素，但是不能使用数组的方法；</p><h2 id="三、节点类型" tabindex="-1">三、节点类型： <a class="header-anchor" href="#三、节点类型" aria-label="Permalink to &quot;三、节点类型：&quot;">​</a></h2><p><code>nodeType</code> <code>nodeName</code> <code>nodeValue</code>；</p><ol><li><p><code>nodeType</code>：返回1-12的数字，分别表示不同的节点；</p><p>1：标签节点；2：属性节点；3：文本节点； 8：注释节点； 9：文档节点；</p></li><li><p><code>nodeName</code>：返回节点的名字；</p><p>文本：#text；注释：#comment；标签：大写的标签名；</p></li><li><p><code>nodeValue</code>：认为只有文本才有内容，元素的节点为空null；获取的标签的文本节点使用innerHTML修改会将标签也替换掉，这个可以只修改文本内容；</p><p><code>li.firstChild.nodeValue</code>；才能获取到li里面的文本内容；</p><p><code>nodeValue = &quot;新内容&quot;</code>； 可以设置新内容；</p></li></ol><h2 id="四、元素的父元素" tabindex="-1">四、元素的父元素； <a class="header-anchor" href="#四、元素的父元素" aria-label="Permalink to &quot;四、元素的父元素；&quot;">​</a></h2><ol><li><code>parentNode</code>；直接父元素，<code>parentNode.parentNode</code>；父元素的父元素；（常用）</li><li><code>offsetParent</code>；返回离元素最近的有定位的父级，如果没有定位的父级，则返回body；</li></ol><h2 id="五、其他节点-了解" tabindex="-1">五、其他节点(了解)； <a class="header-anchor" href="#五、其他节点-了解" aria-label="Permalink to &quot;五、其他节点(了解)；&quot;">​</a></h2><p>父元素的子节点；</p><ol><li><code>firstChild</code>；父元素的第一个子节点；</li><li><code>firstElementChild</code>；父元素的第一个子元素节点；</li><li><code>lastChild</code>；父元素的最后一个子节点；</li><li><code>lastElementChild</code>；父元素的最后一个子元素节点； 以上不常用，推荐做法：</li></ol><p>第一个：<code>li[0]</code>，</p><p>最后一个：<code>li[li.length-1]</code>;</p><p>兄弟元素节点；</p><ol start="5"><li><code>previousSibling</code>；上一个兄弟子节点；（包括文本注释）</li><li><code>previousElementSibling</code>；上一个兄弟元素节点；</li><li><code>nextSibling</code>；下一个兄弟子节点；</li><li><code>nextElementSibling</code>；下一个兄弟元素节点；</li></ol><p>拓展：带Element的 标准浏览器支持的，返回元素节点，不带的是ie8及以下支持的，可能返回文本节点；</p><h2 id="六、在ie8及以下中兼容问题" tabindex="-1">六、在IE8及以下中兼容问题； <a class="header-anchor" href="#六、在ie8及以下中兼容问题" aria-label="Permalink to &quot;六、在IE8及以下中兼容问题；&quot;">​</a></h2><ol><li><code>children</code>：还可以获取到注释；</li><li><code>childNodes</code>：不能获取到换行；</li><li><code>firstChild</code>：不能获取到换行；</li><li><code>firstElementChild</code>：带Element的不能识别，返回值undefined；</li></ol><p>解决兼容办法：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> first </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ul.firstElementchild </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> ul.firstChild </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> firstElementChild;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> first </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ul.firstElementchild </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> ul.firstChild </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> firstElementChild;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="七、属性操作-常用" tabindex="-1">七、属性操作(常用)； <a class="header-anchor" href="#七、属性操作-常用" aria-label="Permalink to &quot;七、属性操作(常用)；&quot;">​</a></h2><ol><li><p>获取：<code>getAttribute(属性名)</code>；属性名用在ie里面需要写className；</p></li><li><p>设置：<code>setAttribute(属性名,属性值)</code>；直接是修改hdml标签里面的；</p></li><li><p>删除：<code>removeAttribute(属性名)</code>；直接删除属性；括号里面需要加引号；</p></li><li><p>检查：<code>hasAttribute(属性名)</code>，检查是否有指定属性名</p></li></ol><p>特点：可以操作元素原生的属性，也可以操作自定义属性，并且在html上可见没有兼容性问题；</p><p>以下不能操作自定义属性</p><p>点的形式：</p><p>box.title = &quot;abc&quot;;</p><h2 id="八、类名操作" tabindex="-1">八、类名操作 <a class="header-anchor" href="#八、类名操作" aria-label="Permalink to &quot;八、类名操作&quot;">​</a></h2><ol><li><code>元素.classList</code>；兼容ie11+；</li><li>可用属性：length 返回类名的长度；</li><li>方法：</li></ol><p>（1）<code>add(class1,class2...)</code> 添加一个或多个类名，如果存在则不会添加</p><p>（2）<code>contains(class)</code> 返回布尔值，判断元素是否有该类名；</p><p>（3）<code>item(index)</code> 返回元素索引值对应的类名；</p><p>（4）<code>remove(class1,class2...)</code> 移除类名；</p><p>（5）<code>toggle(class,[true|false])</code>； 切换类名，第二个参数可选，强制移除false或添加true；</p><h2 id="九、创建添加" tabindex="-1">九、创建添加 <a class="header-anchor" href="#九、创建添加" aria-label="Permalink to &quot;九、创建添加&quot;">​</a></h2><ol><li><p>创建元素节点：<code>document.createElement(&quot;新标签&quot;)</code>；创建的想要放进去，需要使用添加</p></li><li><p>创建文本节点：<code>document.createTextNode(&quot;文本内容&quot;)</code>；不常用,使用innerHTML；</p><p>获取节点内容：元素.textContent</p><p>设置节点内容：元素.textContent = &#39;&#39;；</p></li><li><p>添加文本节点：<code>appendChild(创建的标签)</code>；在结束标签之前添加；只能放到一个标签里，不能重复放；</p><p>可以直接放到body里面： 获取body标签：body = document.body；</p></li><li><p>添加到指定元素前面：<code>父元素.insertBefore（new,old）</code>；new新标签，old指定标签；</p><p>在IE9及以上，如果第二个参数不存在，则以appendChild添加，在IE8及以下，则报错；</p></li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 解决兼容问题：</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(ul.children[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]){</span></span>
<span class="line"><span style="color:#E1E4E8;">    ul.</span><span style="color:#B392F0;">insertBefore</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    ul.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(i)</span></span>
<span class="line"><span style="color:#E1E4E8;">}；</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 解决兼容问题：</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(ul.children[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]){</span></span>
<span class="line"><span style="color:#24292E;">    ul.</span><span style="color:#6F42C1;">insertBefore</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    ul.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(i)</span></span>
<span class="line"><span style="color:#24292E;">}；</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>js原生是没有insertAfter的，需要手动实现</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 插入到节点之后</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">insertAfter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">newDom</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldDom</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parentDom</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldDom.parentNode</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 判断是否是最后一个节点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(parentDom.lastChild </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> oldDom) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    parentDom.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(newDom)</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  	parentDom.</span><span style="color:#B392F0;">insertBefore</span><span style="color:#E1E4E8;">(newDom, oldDom.nextElementSibling)    </span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 插入到节点之后</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">insertAfter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">newDom</span><span style="color:#24292E;">, </span><span style="color:#E36209;">oldDom</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parentDom</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldDom.parentNode</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 判断是否是最后一个节点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(parentDom.lastChild </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> oldDom) {</span></span>
<span class="line"><span style="color:#24292E;">    parentDom.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(newDom)</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  	parentDom.</span><span style="color:#6F42C1;">insertBefore</span><span style="color:#24292E;">(newDom, oldDom.nextElementSibling)    </span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>技巧：</p><p>.link可以快速创建a标签</p><h2 id="十、删除替换克隆" tabindex="-1">十、删除替换克隆 <a class="header-anchor" href="#十、删除替换克隆" aria-label="Permalink to &quot;十、删除替换克隆&quot;">​</a></h2><ol><li><p>删除：<code>remove()</code>；谁调用的就删除谁，ie8及以下不兼容；</p><pre><code> \`父元素.removeChild(子元素)\`；将子元素从父元素中删除；
</code></pre></li><li><p>替换：<code>父元素.replaceChild(新标签，旧标签)</code>；</p></li><li><p>克隆：<code>元素.cloneNode()</code>；true，内容标签一起克隆，false,克隆标签；</p></li><li><p>包含：<code>父元素.contains(子元素)</code></p></li></ol><h2 id="十一、insertadjacenthtml" tabindex="-1">十一、insertAdjacentHTML <a class="header-anchor" href="#十一、insertadjacenthtml" aria-label="Permalink to &quot;十一、insertAdjacentHTML&quot;">​</a></h2><ol><li><p><code>element.insertAdjacentHTML(position, text)</code>，将text解析为html或xml，并将结果节点插入到DOM树中的指定位置，该方法比直接操作innerHTML操作更快</p></li><li><p>position是相对于元素的位置，必须是以下字符串之一</p><ul><li><p><code>beforebegin</code>：元素自身的前面。</p></li><li><p><code>afterbegin</code>：插入元素内部的第一个子节点之前。</p></li><li><p><code>beforeend</code>：插入元素内部的最后一个子节点之后。</p></li><li><p><code>afterend</code>：元素自身的后面。</p></li></ul></li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> beforebegin </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;!-- afterbegin --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;Hello World&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;!-- beforeend --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> afterend </span><span style="color:#F97583;">--&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> beforebegin </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;!-- afterbegin --&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;Hello World&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;!-- beforeend --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> afterend </span><span style="color:#D73A49;">--&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>示例：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ul&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">insertAdjacentHTML</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;afterbegin&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&lt;li id=&quot;first-item&quot;&gt;First&lt;/li&gt;&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ul&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">insertAdjacentHTML</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;afterbegin&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&lt;li id=&quot;first-item&quot;&gt;First&lt;/li&gt;&#39;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="十二、元素的其他获取方式" tabindex="-1">十二、元素的其他获取方式； <a class="header-anchor" href="#十二、元素的其他获取方式" aria-label="Permalink to &quot;十二、元素的其他获取方式；&quot;">​</a></h2><ol><li><p><code>querySelector(css选择器)</code>；选择第一个直接是元素；</p></li><li><p><code>querySelectorAll(css选择器)</code>；选择所有的，结果是类数组</p></li><li><p><code>元素.closest(css选择器)</code>，返回当前节点最近匹配选择符的父元素，如果选择到自己相同的元素，则返回自己</p></li></ol><h2 id="十三、表格的获取方式" tabindex="-1">十三、表格的获取方式； <a class="header-anchor" href="#十三、表格的获取方式" aria-label="Permalink to &quot;十三、表格的获取方式；&quot;">​</a></h2><ol><li><p>获取表头：<code>table.tHead</code>；</p></li><li><p>获取表尾：<code>table.tFoot</code>；</p></li><li><p>获取主体：<code>table.tBodies[0]</code>；类数组，需要加下标；</p></li><li><p>获取行：<code>table.rows</code>；获取table下所有的tr；</p><p><code>table.tBodies</code>；获取主体下的所有的tr；</p></li><li><p>获取单元格：<code>table.rows[0].cells</code>；需要通过行来获取td；</p></li></ol><h2 id="十四、表单的获取方式" tabindex="-1">十四、表单的获取方式 <a class="header-anchor" href="#十四、表单的获取方式" aria-label="Permalink to &quot;十四、表单的获取方式&quot;">​</a></h2><h3 id="表单获取属性" tabindex="-1">表单获取属性： <a class="header-anchor" href="#表单获取属性" aria-label="Permalink to &quot;表单获取属性：&quot;">​</a></h3><p>通过form.name名 直接获取到某个标签；</p><h3 id="表单事件" tabindex="-1">表单事件： <a class="header-anchor" href="#表单事件" aria-label="Permalink to &quot;表单事件：&quot;">​</a></h3><p><code>form.onsubmit</code>；点击提交按钮事件时触发；</p><p><code>form.onreset</code>；表单重置事件；</p><p><code>form.user.onfocus</code>；输入框获得焦点时触发；</p><p><code>form.user.onblur</code>；输入框失去焦点时触发；提示输入完验证是否合格；</p><p><code>form.user.onchange</code>；当按下回车或失焦时触发，且内容与上次按下回车或失焦不同；</p><p><code>form.user.oninput</code>： 用户输入时触发；</p><h3 id="表单方法" tabindex="-1">表单方法： <a class="header-anchor" href="#表单方法" aria-label="Permalink to &quot;表单方法：&quot;">​</a></h3><p><code>return false</code>；阻止表单提交，判断是否有内容，没有则阻止提交；</p><p><code>form.submit()</code>；调用提交方法；常用于button；</p><p><code>form.reset()</code>；调用重置方法；</p><p><code>form.user.focus()</code>；输入框获得焦点；</p><p><code>form.user.blur()</code>；输入框失去焦点；</p><p><code>form.user.select()</code>；直接选中输入框的内容并获得焦点；</p><p>当输入框改动时，执行这个函数，每按下一次都会执行；</p><p><code>input.oninput = function(){}</code>，比onkeyup先触发；</p><h3 id="焦点事件" tabindex="-1">焦点事件 <a class="header-anchor" href="#焦点事件" aria-label="Permalink to &quot;焦点事件&quot;">​</a></h3><p><code>focus</code>：获得焦点，不支持冒泡；</p><p><code>blur</code>：失去焦点，不支持冒泡</p><p><code>focusin</code>：获得焦点，支持冒泡；</p><p><code>focusout</code>：失去焦点，支持冒泡；</p><p><code>input.focus()</code> 会自动滚动到获取焦点的地方，如果不希望滚动到获取焦点的地方，可以使用以下的代码</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 下面代码ie不兼容</span></span>
<span class="line"><span style="color:#E1E4E8;">ipt.</span><span style="color:#B392F0;">focus</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    preventScroll: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 下面代码ie不兼容</span></span>
<span class="line"><span style="color:#24292E;">ipt.</span><span style="color:#6F42C1;">focus</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    preventScroll: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="十五、事件对象" tabindex="-1">十五、事件对象 <a class="header-anchor" href="#十五、事件对象" aria-label="Permalink to &quot;十五、事件对象&quot;">​</a></h2><h3 id="事件对象" tabindex="-1">事件对象 <a class="header-anchor" href="#事件对象" aria-label="Permalink to &quot;事件对象&quot;">​</a></h3><p>当前事件触发的相关信息，浏览器内置将事件对象当做实参传递给事件处理函数的第一个形参</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 不兼容：在IE8及以下浏览器没有当做实参传递  可以通过window.event进行访问</span></span>
<span class="line"><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> window.event;</span></span>
<span class="line"><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vent </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> window.event;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 不兼容：在IE8及以下浏览器没有当做实参传递  可以通过window.event进行访问</span></span>
<span class="line"><span style="color:#24292E;"> event </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> window.event;</span></span>
<span class="line"><span style="color:#24292E;"> event </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vent </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> window.event;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="鼠标事件对象" tabindex="-1">鼠标事件对象 <a class="header-anchor" href="#鼠标事件对象" aria-label="Permalink to &quot;鼠标事件对象&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> box </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;box&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">box.</span><span style="color:#B392F0;">onmousedown</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    event </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> window.event;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 事件对象的属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// target :事件源  事件触发的源头</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 兼容性：IE8及以下不兼容  在IE8及以下通过event.srcElement获取</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//var target = event.target ? event.target : event.srcElement;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> target </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ev.target </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> ev.srcElement;</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(target);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// type :事件类型 </span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(event.type); </span><span style="color:#6A737D;">//mousedown</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ctrlKey  / shiftKey / altKey    默认值是false 当前事件触发按下了对应的键值true</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(event.ctrlKey, event.shiftKey, event.altKey);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 鼠标按下，并且需要按下ctrl键</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event.ctrlKey) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;按下了CTRL&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 位置信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// clientX/clientY    鼠标距离可视区域的距离</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(event.clientX,event.clientY);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// pageX / pageY  鼠标距离文档（body）的距离</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// IE8及以下不兼容 没有这个属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(event.pageX,event.pageY);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// offsetX/ offsetY  鼠标距离元素的距离</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(event.offsetX,event.offsetY);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// which  标识当前鼠标左(1) 中(2)  右(3)键</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(event.which);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> box </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;box&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">box.</span><span style="color:#6F42C1;">onmousedown</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    event </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> window.event;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 事件对象的属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// target :事件源  事件触发的源头</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 兼容性：IE8及以下不兼容  在IE8及以下通过event.srcElement获取</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//var target = event.target ? event.target : event.srcElement;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ev.target </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> ev.srcElement;</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(target);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// type :事件类型 </span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(event.type); </span><span style="color:#6A737D;">//mousedown</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ctrlKey  / shiftKey / altKey    默认值是false 当前事件触发按下了对应的键值true</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(event.ctrlKey, event.shiftKey, event.altKey);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 鼠标按下，并且需要按下ctrl键</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event.ctrlKey) {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;按下了CTRL&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 位置信息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// clientX/clientY    鼠标距离可视区域的距离</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(event.clientX,event.clientY);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// pageX / pageY  鼠标距离文档（body）的距离</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// IE8及以下不兼容 没有这个属性</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(event.pageX,event.pageY);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// offsetX/ offsetY  鼠标距离元素的距离</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(event.offsetX,event.offsetY);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// which  标识当前鼠标左(1) 中(2)  右(3)键</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(event.which);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h3 id="键盘事件对象" tabindex="-1">键盘事件对象 <a class="header-anchor" href="#键盘事件对象" aria-label="Permalink to &quot;键盘事件对象&quot;">​</a></h3><ul><li>onkeydown:键盘按下</li><li>onkeypress:键盘按着</li><li>onkeyup:键盘抬起</li></ul><h3 id="事件绑定" tabindex="-1">事件绑定 <a class="header-anchor" href="#事件绑定" aria-label="Permalink to &quot;事件绑定&quot;">​</a></h3><p>事件绑定方式可以分为DOM级和DOM2级</p><ul><li><p>DOM0</p><ul><li>元素.on事件类型</li><li>特点：当前元素，同一个事件赋值多个事件处理函数，后边的覆盖前边的，一个事件只能对应一个事件处理函数</li></ul></li></ul><p>DOM2</p><ul><li>元素.addEventListener(eventType,callBack); <ul><li>eventType:事件类型</li><li>callBack：事件处理函数 可以是实名函数 也可以是匿名函数</li><li>问题：IE8级以下不兼容，没有这个属性 对应的值是undefined</li></ul></li><li>兼容处理</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">   作用：DOM2级事件绑定兼容</span></span>
<span class="line"><span style="color:#6A737D;">   @para</span></span>
<span class="line"><span style="color:#6A737D;">       eleObj:元素对象</span></span>
<span class="line"><span style="color:#6A737D;">       eventType:事件类型</span></span>
<span class="line"><span style="color:#6A737D;">       callBack:事件处理函数</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">eventBind</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">eleObj</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">eventType</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callBack</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (eleObj.addEventListener) { </span><span style="color:#6A737D;">//标准浏览器</span></span>
<span class="line"><span style="color:#E1E4E8;">        eleObj.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(eventType, callBack);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// IE8及以下</span></span>
<span class="line"><span style="color:#E1E4E8;">        eleObj.</span><span style="color:#B392F0;">attachEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;on&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> eventType, callBack);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">   作用：DOM2级事件绑定兼容</span></span>
<span class="line"><span style="color:#6A737D;">   @para</span></span>
<span class="line"><span style="color:#6A737D;">       eleObj:元素对象</span></span>
<span class="line"><span style="color:#6A737D;">       eventType:事件类型</span></span>
<span class="line"><span style="color:#6A737D;">       callBack:事件处理函数</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">eventBind</span><span style="color:#24292E;">(</span><span style="color:#E36209;">eleObj</span><span style="color:#24292E;">, </span><span style="color:#E36209;">eventType</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callBack</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (eleObj.addEventListener) { </span><span style="color:#6A737D;">//标准浏览器</span></span>
<span class="line"><span style="color:#24292E;">        eleObj.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(eventType, callBack);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// IE8及以下</span></span>
<span class="line"><span style="color:#24292E;">        eleObj.</span><span style="color:#6F42C1;">attachEvent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;on&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> eventType, callBack);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="事件取消绑定" tabindex="-1">事件取消绑定 <a class="header-anchor" href="#事件取消绑定" aria-label="Permalink to &quot;事件取消绑定&quot;">​</a></h3><ul><li><p>DOM0</p><ul><li>元素.on事件类型 = null;</li></ul></li><li><p>DOM2</p><ul><li><p>元素.removeEventListener(eventType,callBack);</p><ul><li>eventType 事件类型</li><li>callBack：函数</li></ul></li><li><p>兼容性：IE8及以下不兼容 没有removeEventListener这个属性</p><ul><li>在IE下提供了独有的DOM2级事件移除的方法 detachEvent(&quot;on&quot;+eventType,callBack)</li></ul></li><li><p>兼容处理</p></li></ul></li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">    DOM2事件移除兼容处理</span></span>
<span class="line"><span style="color:#6A737D;">    @para</span></span>
<span class="line"><span style="color:#6A737D;">        eleObj:元素对象</span></span>
<span class="line"><span style="color:#6A737D;">        eventType:事件类型</span></span>
<span class="line"><span style="color:#6A737D;">        callBack:事件处理函数</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unEventBind</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">eleObj</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">eventType</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">callBack</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 判断</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(eleObj.removeEventListener){ </span><span style="color:#6A737D;">//标准浏览器</span></span>
<span class="line"><span style="color:#E1E4E8;">        eleObj.</span><span style="color:#B392F0;">removeEventListener</span><span style="color:#E1E4E8;">(eventType,callBack);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        eleObj.</span><span style="color:#B392F0;">detachEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;on&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">eventType,callBack);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">    DOM2事件移除兼容处理</span></span>
<span class="line"><span style="color:#6A737D;">    @para</span></span>
<span class="line"><span style="color:#6A737D;">        eleObj:元素对象</span></span>
<span class="line"><span style="color:#6A737D;">        eventType:事件类型</span></span>
<span class="line"><span style="color:#6A737D;">        callBack:事件处理函数</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unEventBind</span><span style="color:#24292E;">(</span><span style="color:#E36209;">eleObj</span><span style="color:#24292E;">,</span><span style="color:#E36209;">eventType</span><span style="color:#24292E;">,</span><span style="color:#E36209;">callBack</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 判断</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(eleObj.removeEventListener){ </span><span style="color:#6A737D;">//标准浏览器</span></span>
<span class="line"><span style="color:#24292E;">        eleObj.</span><span style="color:#6F42C1;">removeEventListener</span><span style="color:#24292E;">(eventType,callBack);</span></span>
<span class="line"><span style="color:#24292E;">    }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        eleObj.</span><span style="color:#6F42C1;">detachEvent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;on&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">eventType,callBack);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="事件流" tabindex="-1">事件流 <a class="header-anchor" href="#事件流" aria-label="Permalink to &quot;事件流&quot;">​</a></h3><p>描述：事 内进行查找，找到事件触发的源头，再从事件触发源头依次向外进行传递到window为止</p><p>事件流一共可以分为以下三个阶段</p><ul><li><p>CAPTURING_PHASE: 1 捕获阶段 当前事件触发，会从浏览器的顶层对象window依次向内进行查找</p></li><li><p>AT_TARGET: 2 目标阶段 找到触发源头</p></li><li><p>BUBBLING_PHASE: 3 冒泡阶段 事件处理函数默认都是在冒泡阶段触发的，当前事件源有对对应的事件处理函数就将这个事件处理函数触发 然后会依次向外进行传递将父级当前事件对应事件处理函数触发，直到window为止</p></li></ul><h3 id="阻止事件冒泡" tabindex="-1">阻止事件冒泡 <a class="header-anchor" href="#阻止事件冒泡" aria-label="Permalink to &quot;阻止事件冒泡&quot;">​</a></h3><ul><li>ev.stopPropagation(); <ul><li><p>兼容问题，IE8及以下没有这个属性 默认值是undefined</p></li><li><p>ev.stopPropagation?ev.stopPropagation():ev.cancelBubble = true;</p></li></ul></li></ul><h3 id="阻止默认行为·" tabindex="-1">阻止默认行为· <a class="header-anchor" href="#阻止默认行为·" aria-label="Permalink to &quot;阻止默认行为·&quot;">​</a></h3><p>ev.preventDefault();</p><p>IE下：ev.returnValue = false</p><ul><li><p>兼容问题，IE8及以下没有这个属性 默认值是undefined</p></li><li><p>ev.preventDefault?ev.preventDefault():ev.returnValue = false;</p></li></ul><h3 id="事件委托" tabindex="-1">事件委托 <a class="header-anchor" href="#事件委托" aria-label="Permalink to &quot;事件委托&quot;">​</a></h3><ul><li>将当前共同的事件委托给它们共同的父级</li><li>事件委托的本质是利用事件冒泡</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ul  </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementsByTagName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ul&quot;</span><span style="color:#E1E4E8;">)[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">ul.</span><span style="color:#B392F0;">onclick</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ev</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 事件对象兼容处理</span></span>
<span class="line"><span style="color:#E1E4E8;">    ev </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ev </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> window.event</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 事件源兼容处理</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> target </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ev.target </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> ev.srcElement;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 判断</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(target.nodeName.</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;li&quot;</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(target);</span></span>
<span class="line"><span style="color:#E1E4E8;">        target.style.backgroundColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;black&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(target.nodeName.</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(target);</span></span>
<span class="line"><span style="color:#E1E4E8;">        target.style.backgroundColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;red&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> ul  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementsByTagName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ul&quot;</span><span style="color:#24292E;">)[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">ul.</span><span style="color:#6F42C1;">onclick</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ev</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 事件对象兼容处理</span></span>
<span class="line"><span style="color:#24292E;">    ev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ev </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> window.event</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 事件源兼容处理</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ev.target </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> ev.srcElement;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 判断</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(target.nodeName.</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;li&quot;</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(target);</span></span>
<span class="line"><span style="color:#24292E;">        target.style.backgroundColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;black&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(target.nodeName.</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(target);</span></span>
<span class="line"><span style="color:#24292E;">        target.style.backgroundColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;red&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="滚轮事件" tabindex="-1">滚轮事件 <a class="header-anchor" href="#滚轮事件" aria-label="Permalink to &quot;滚轮事件&quot;">​</a></h3><h4 id="滚轮事件绑定" tabindex="-1">滚轮事件绑定 <a class="header-anchor" href="#滚轮事件绑定" aria-label="Permalink to &quot;滚轮事件绑定&quot;">​</a></h4><ul><li>mousewheel 火狐以外其它浏览器</li><li>DOMMouseScroll 在火狐下提供独有的滚轮事件，必须使用DOM2级事件进行绑定</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 火狐以外其它浏览器</span></span>
<span class="line"><span style="color:#E1E4E8;">document.onmousewheel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> wheel;</span></span>
<span class="line"><span style="color:#6A737D;">// 火狐下</span></span>
<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;DOMMouseScroll&quot;</span><span style="color:#E1E4E8;">, wheel);</span></span>
<span class="line"><span style="color:#6A737D;">// 事件处理函数</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">wheel</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;呵呵&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 火狐以外其它浏览器</span></span>
<span class="line"><span style="color:#24292E;">document.onmousewheel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> wheel;</span></span>
<span class="line"><span style="color:#6A737D;">// 火狐下</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;DOMMouseScroll&quot;</span><span style="color:#24292E;">, wheel);</span></span>
<span class="line"><span style="color:#6A737D;">// 事件处理函数</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">wheel</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;呵呵&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="滚轮方向兼容" tabindex="-1">滚轮方向兼容 <a class="header-anchor" href="#滚轮方向兼容" aria-label="Permalink to &quot;滚轮方向兼容&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 滚轮方向兼容处理</span></span>
<span class="line"><span style="color:#6A737D;">//event:事件对象</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">wheelEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 判断</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event.wheelDelta) {</span><span style="color:#6A737D;">//火狐以外其它浏览器</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> event.wheelDelta;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">//火狐下</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> event.detail </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;">;   </span><span style="color:#6A737D;">//前：-3 （负）   后  3（正）</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 滚轮方向兼容处理</span></span>
<span class="line"><span style="color:#6A737D;">//event:事件对象</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">wheelEvent</span><span style="color:#24292E;">(</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 判断</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event.wheelDelta) {</span><span style="color:#6A737D;">//火狐以外其它浏览器</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> event.wheelDelta;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">//火狐下</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> event.detail </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">40</span><span style="color:#24292E;">;   </span><span style="color:#6A737D;">//前：-3 （负）   后  3（正）</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="特效动画" tabindex="-1">特效动画 <a class="header-anchor" href="#特效动画" aria-label="Permalink to &quot;特效动画&quot;">​</a></h3><h4 id="div居中显示" tabindex="-1">div居中显示 <a class="header-anchor" href="#div居中显示" aria-label="Permalink to &quot;div居中显示&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> div </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementsByTagName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;div&quot;</span><span style="color:#E1E4E8;">)[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 页面初始化</span></span>
<span class="line"><span style="color:#B392F0;">position</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 可视区域改变居中展示</span></span>
<span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">onresize</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">position</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 滚动条滚动在居中展示</span></span>
<span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">onscroll</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取垂直方向滚动的距离</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> scrollT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.documentElement.scrollTop </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> document.body.scrollTop;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取屏幕的宽高</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> winW </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.documentElement.clientWidth;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> winH </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.documentElement.clientHeight;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 设置div的位置</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 屏幕的宽度一半 - 自身宽度一半</span></span>
<span class="line"><span style="color:#E1E4E8;">    div.style.left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> winW </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> div.offsetWidth </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;px&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    div.style.top </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> winH </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> div.offsetHeight </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> scrollT </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;px&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 实现居中展示</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">position</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取屏幕的宽高</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> winW </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.documentElement.clientWidth;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> winH </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.documentElement.clientHeight;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 设置div的位置</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 屏幕的宽度一半 - 自身宽度一半</span></span>
<span class="line"><span style="color:#E1E4E8;">    div.style.left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> winW </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> div.offsetWidth </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;px&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    div.style.top </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> winH </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> div.offsetHeight </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;px&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> div </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementsByTagName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">)[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 页面初始化</span></span>
<span class="line"><span style="color:#6F42C1;">position</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 可视区域改变居中展示</span></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">onresize</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">position</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 滚动条滚动在居中展示</span></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">onscroll</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取垂直方向滚动的距离</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> scrollT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.documentElement.scrollTop </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> document.body.scrollTop;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取屏幕的宽高</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> winW </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.documentElement.clientWidth;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> winH </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.documentElement.clientHeight;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 设置div的位置</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 屏幕的宽度一半 - 自身宽度一半</span></span>
<span class="line"><span style="color:#24292E;">    div.style.left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> winW </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> div.offsetWidth </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;px&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    div.style.top </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> winH </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> div.offsetHeight </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> scrollT </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;px&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 实现居中展示</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">position</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取屏幕的宽高</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> winW </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.documentElement.clientWidth;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> winH </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.documentElement.clientHeight;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 设置div的位置</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 屏幕的宽度一半 - 自身宽度一半</span></span>
<span class="line"><span style="color:#24292E;">    div.style.left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> winW </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> div.offsetWidth </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;px&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    div.style.top </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> winH </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> div.offsetHeight </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;px&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div>`,120),o=[e];function c(t,r,i,E,y,d){return n(),a("div",null,o)}const m=s(p,[["render",c]]);export{b as __pageData,m as default};
