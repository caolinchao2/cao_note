import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.b5309610.js";const b=JSON.parse('{"title":"面向对象","description":"","frontmatter":{},"headers":[],"relativePath":"serverSide/Python/面向对象、类型注解.md","filePath":"serverSide/Python/面向对象、类型注解.md","lastUpdated":1721987715000}'),p={name:"serverSide/Python/面向对象、类型注解.md"},o=l(`<h1 id="面向对象" tabindex="-1">面向对象 <a class="header-anchor" href="#面向对象" aria-label="Permalink to &quot;面向对象&quot;">​</a></h1><p><img src="https://raw.githubusercontent.com/caolinchao2/blogimg/main/img/image-20240726165726691.png" alt="image-20240726165726691"></p><h2 id="成员变量成员方法" tabindex="-1">成员变量成员方法 <a class="header-anchor" href="#成员变量成员方法" aria-label="Permalink to &quot;成员变量成员方法&quot;">​</a></h2><h3 id="成员变量" tabindex="-1">成员变量 <a class="header-anchor" href="#成员变量" aria-label="Permalink to &quot;成员变量&quot;">​</a></h3><ul><li>定义在类内部的变量称之为成员变量，用法与正常变量一致。</li></ul><h3 id="成员方法" tabindex="-1">成员方法 <a class="header-anchor" href="#成员方法" aria-label="Permalink to &quot;成员方法&quot;">​</a></h3><p>​ 定义在类内部的函数称之为方法，与函数存在细微区别。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 函数</span></span>
<span class="line"><span style="color:#6A737D;"># 形参可以为0-N个</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">函数名</span><span style="color:#E1E4E8;">(形参1,形参2,..,形参N):</span></span>
<span class="line"><span style="color:#E1E4E8;">    函数体</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 方法</span></span>
<span class="line"><span style="color:#6A737D;"># 形参可以为0-N个</span></span>
<span class="line"><span style="color:#6A737D;"># self关键字必须填写</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">方法名</span><span style="color:#E1E4E8;">(self,形参1,形参2,..,形参N):</span></span>
<span class="line"><span style="color:#E1E4E8;">    方法体</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 函数</span></span>
<span class="line"><span style="color:#6A737D;"># 形参可以为0-N个</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">函数名</span><span style="color:#24292E;">(形参1,形参2,..,形参N):</span></span>
<span class="line"><span style="color:#24292E;">    函数体</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 方法</span></span>
<span class="line"><span style="color:#6A737D;"># 形参可以为0-N个</span></span>
<span class="line"><span style="color:#6A737D;"># self关键字必须填写</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">方法名</span><span style="color:#24292E;">(self,形参1,形参2,..,形参N):</span></span>
<span class="line"><span style="color:#24292E;">    方法体</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li><p>self关键字在成员方法定义的时候必须填写，表示类对象自身</p></li><li><p>在方法内部，想要访问类的成员变量，必须使用self</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">class Student:</span></span>
<span class="line"><span style="color:#E1E4E8;">    name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> None  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    # 调用say_hi1时正常打印</span></span>
<span class="line"><span style="color:#E1E4E8;">    def </span><span style="color:#B392F0;">say_hi1</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(f</span><span style="color:#9ECBFF;">&quot;大家好，我叫{self.name}&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    # 调用say_hi2时报错，</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;"> is not defined</span></span>
<span class="line"><span style="color:#E1E4E8;">    def </span><span style="color:#B392F0;">say_hi2</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(f</span><span style="color:#9ECBFF;">&quot;大家好，我叫{name}&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">class Student:</span></span>
<span class="line"><span style="color:#24292E;">    name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> None  </span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    # 调用say_hi1时正常打印</span></span>
<span class="line"><span style="color:#24292E;">    def </span><span style="color:#6F42C1;">say_hi1</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(f</span><span style="color:#032F62;">&quot;大家好，我叫{self.name}&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    # 调用say_hi2时报错，</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;"> is not defined</span></span>
<span class="line"><span style="color:#24292E;">    def </span><span style="color:#6F42C1;">say_hi2</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(f</span><span style="color:#032F62;">&quot;大家好，我叫{name}&quot;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ul><h3 id="构造方法" tabindex="-1">构造方法 <a class="header-anchor" href="#构造方法" aria-label="Permalink to &quot;构造方法&quot;">​</a></h3><ul><li><p>在类可以使用：<code>__init__()</code>方法，即构造方法,快速为对象赋值。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 定义类</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 姓名</span></span>
<span class="line"><span style="color:#E1E4E8;">    sex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 性别</span></span>
<span class="line"><span style="color:#E1E4E8;">    age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 年龄</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, name, sex, age):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.sex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sex</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> age</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 创建对象并赋值</span></span>
<span class="line"><span style="color:#E1E4E8;">stu_1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Student(</span><span style="color:#9ECBFF;">&quot;李白&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;男&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 简化形式：可以省略成员属性定义,但仍可调用</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, name, sex, age):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name  </span><span style="color:#6A737D;"># 姓名</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.sex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sex  </span><span style="color:#6A737D;"># 性别</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> age  </span><span style="color:#6A737D;"># 年龄</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 创建对象并赋值</span></span>
<span class="line"><span style="color:#E1E4E8;">stu_1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Student(</span><span style="color:#9ECBFF;">&quot;李白&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;男&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 定义类</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 姓名</span></span>
<span class="line"><span style="color:#24292E;">    sex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 性别</span></span>
<span class="line"><span style="color:#24292E;">    age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 年龄</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, name, sex, age):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.sex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sex</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> age</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 创建对象并赋值</span></span>
<span class="line"><span style="color:#24292E;">stu_1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Student(</span><span style="color:#032F62;">&quot;李白&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;男&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 简化形式：可以省略成员属性定义,但仍可调用</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, name, sex, age):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name  </span><span style="color:#6A737D;"># 姓名</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.sex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sex  </span><span style="color:#6A737D;"># 性别</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> age  </span><span style="color:#6A737D;"># 年龄</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 创建对象并赋值</span></span>
<span class="line"><span style="color:#24292E;">stu_1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Student(</span><span style="color:#032F62;">&quot;李白&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;男&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div></li><li><p>在创建类对象（构造类）的时候，会自动执行，将传入参数自动传递给__init__方法使用。</p></li><li><p>构造方法也是成员方法，定义时也需要在参数列表中提供：self</p></li><li><p>变量定义在构造方法内部，如果要成为成员变量，需要用self来表示，例如self.name</p></li><li><p>使用了构造方法，创建对象时必须传参否则会报错</p></li></ul><h3 id="魔术方法" tabindex="-1">魔术方法 <a class="header-anchor" href="#魔术方法" aria-label="Permalink to &quot;魔术方法&quot;">​</a></h3><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td><strong><strong>init</strong></strong></td><td>构造方法，可用于创建类对象的时候设置初始化行为</td></tr><tr><td><strong><strong>str</strong></strong></td><td>字符串方法，用于实现类对象转字符串的行为</td></tr><tr><td><strong><strong>lt</strong></strong></td><td>用于2个类对象进行小于(&lt;)或大于(&gt;)比较</td></tr><tr><td><strong><strong>le</strong></strong></td><td>用于2个类对象进行小于等于(&lt;=)或大于等于(&gt;=)比较</td></tr><tr><td><strong><strong>eq</strong></strong></td><td>用于2个类对象进行相等(==)比较</td></tr></tbody></table><ul><li><p>__str__方法</p><ul><li>当直接打印类对象时，打印的是对象的内存地址，用处不大。</li><li>我们可以通过<code>__str__</code>方法，自定义控制打印类对象时输出的内容。</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, name, age):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name  </span><span style="color:#6A737D;"># 姓名</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> age  </span><span style="color:#6A737D;"># 年龄</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;"># 自定义打印输出内容</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__str__</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;Student对象,name=</span><span style="color:#79B8FF;">{self</span><span style="color:#E1E4E8;">.name</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">,age=</span><span style="color:#79B8FF;">{self</span><span style="color:#E1E4E8;">.age</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">stu_1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Student(</span><span style="color:#9ECBFF;">&quot;李白&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(stu_1)</span></span>
<span class="line"><span style="color:#6A737D;"># 打印 Student对象,name=李白,age=1000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, name, age):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name  </span><span style="color:#6A737D;"># 姓名</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> age  </span><span style="color:#6A737D;"># 年龄</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;"># 自定义打印输出内容</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__str__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;Student对象,name=</span><span style="color:#005CC5;">{self</span><span style="color:#24292E;">.name</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">,age=</span><span style="color:#005CC5;">{self</span><span style="color:#24292E;">.age</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">stu_1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Student(</span><span style="color:#032F62;">&quot;李白&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(stu_1)</span></span>
<span class="line"><span style="color:#6A737D;"># 打印 Student对象,name=李白,age=1000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>__lt__方法</p><ul><li>直接对2个对象进行比较是不可以的，会报错。</li><li>在类中实现<code>__lt__</code>方法即可完成：小于符号 和 大于符号 2种比较</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, name, age):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name  </span><span style="color:#6A737D;"># 姓名</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> age  </span><span style="color:#6A737D;"># 年龄</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__lt__</span><span style="color:#E1E4E8;">(self, other):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.age </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> other.age</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">stu_1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Student(</span><span style="color:#9ECBFF;">&quot;李白&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">stu_2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Student(</span><span style="color:#9ECBFF;">&quot;罗辑&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">300</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(stu_1 </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> stu_2) </span><span style="color:#6A737D;"># 打印 True</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, name, age):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name  </span><span style="color:#6A737D;"># 姓名</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> age  </span><span style="color:#6A737D;"># 年龄</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__lt__</span><span style="color:#24292E;">(self, other):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.age </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> other.age</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">stu_1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Student(</span><span style="color:#032F62;">&quot;李白&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">stu_2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Student(</span><span style="color:#032F62;">&quot;罗辑&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">300</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(stu_1 </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> stu_2) </span><span style="color:#6A737D;"># 打印 True</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li></ul><h2 id="三大特性" tabindex="-1">三大特性 <a class="header-anchor" href="#三大特性" aria-label="Permalink to &quot;三大特性&quot;">​</a></h2><blockquote><p>面向对象包含3大主要特性：封装,继承,多态</p></blockquote><h3 id="封装" tabindex="-1">封装 <a class="header-anchor" href="#封装" aria-label="Permalink to &quot;封装&quot;">​</a></h3><h5 id="私有成员" tabindex="-1">私有成员 <a class="header-anchor" href="#私有成员" aria-label="Permalink to &quot;私有成员&quot;">​</a></h5><blockquote><p>在类中提供仅供内部使用的属性和方法，无法被对象调用</p></blockquote><ul><li><p>基本语法：</p><ul><li>私有成员变量：变量名以__开头（2个下划线）</li><li>私有成员方法：方法名以__开头（2个下划线）</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 普通成员变量</span></span>
<span class="line"><span style="color:#E1E4E8;">    __age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 私有成员变量</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 普通成员方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">say_hi</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;你好&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 私有成员方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__DNA</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;DNA数量&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 普通成员变量</span></span>
<span class="line"><span style="color:#24292E;">    __age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 私有成员变量</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 普通成员方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">say_hi</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;你好&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 私有成员方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">__DNA</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;DNA数量&quot;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><p>仅在成员内部可以使用</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 普通成员变量</span></span>
<span class="line"><span style="color:#E1E4E8;">    __age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 私有成员变量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 普通成员方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">(self): </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.__check()  </span><span style="color:#6A737D;"># 在类中使用私有成员变量</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.__age </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;"># 在类中使用私有成员变量</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;成年人&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;未成年&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 私有成员方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__check</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;自检&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 普通成员变量</span></span>
<span class="line"><span style="color:#24292E;">    __age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 私有成员变量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 普通成员方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">(self): </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.__check()  </span><span style="color:#6A737D;"># 在类中使用私有成员变量</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.__age </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">: </span><span style="color:#6A737D;"># 在类中使用私有成员变量</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;成年人&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;未成年&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 私有成员方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">__check</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;自检&quot;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li></ul><h3 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h3><h5 id="单继承" tabindex="-1">单继承 <a class="header-anchor" href="#单继承" aria-label="Permalink to &quot;单继承&quot;">​</a></h5><ul><li>基本语法:</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">类名</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">父类名</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    类内容体</span></span>
<span class="line"><span style="color:#79B8FF;">12</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">类名</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">父类名</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    类内容体</span></span>
<span class="line"><span style="color:#005CC5;">12</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>基本使用:</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 待继承的类</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Phone</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    producer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;apple&quot;</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 厂商</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">call_by_4g</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;4g通话&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 继承Phone</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Phone2022</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Phone</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    face_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 面部识别</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">call_by_5g</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;2022最新5G通话&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;"># 创建对象</span></span>
<span class="line"><span style="color:#E1E4E8;">phone </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Phone2022()</span></span>
<span class="line"><span style="color:#6A737D;"># 使用</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(phone.producer) </span><span style="color:#6A737D;"># 可调用 继承自Phone的成员变量</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(phone.face_id) </span><span style="color:#6A737D;"># 可调用 自身的成员变量</span></span>
<span class="line"><span style="color:#E1E4E8;">phone.call_by_4g() </span><span style="color:#6A737D;"># 可调用 继承自Phone的成员方法</span></span>
<span class="line"><span style="color:#E1E4E8;">phone.call_by_5g() </span><span style="color:#6A737D;"># 可调用 自身的成员方法</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 待继承的类</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Phone</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    producer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;apple&quot;</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 厂商</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">call_by_4g</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;4g通话&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 继承Phone</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Phone2022</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Phone</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    face_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 面部识别</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">call_by_5g</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2022最新5G通话&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;"># 创建对象</span></span>
<span class="line"><span style="color:#24292E;">phone </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Phone2022()</span></span>
<span class="line"><span style="color:#6A737D;"># 使用</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(phone.producer) </span><span style="color:#6A737D;"># 可调用 继承自Phone的成员变量</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(phone.face_id) </span><span style="color:#6A737D;"># 可调用 自身的成员变量</span></span>
<span class="line"><span style="color:#24292E;">phone.call_by_4g() </span><span style="color:#6A737D;"># 可调用 继承自Phone的成员方法</span></span>
<span class="line"><span style="color:#24292E;">phone.call_by_5g() </span><span style="color:#6A737D;"># 可调用 自身的成员方法</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h5 id="多继承" tabindex="-1">多继承 <a class="header-anchor" href="#多继承" aria-label="Permalink to &quot;多继承&quot;">​</a></h5><ul><li>一个类也可以继承多个类</li><li>多个父类中，如果有同名的成员，默认以继承顺序（从左到右）为优先级。即:后继承的被先继承的覆盖</li><li>基本语法:</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">类名</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">父类1</span><span style="color:#E1E4E8;">,</span><span style="color:#B392F0;">父类2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">...</span><span style="color:#E1E4E8;">,</span><span style="color:#B392F0;">父类N</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    类内容体</span></span>
<span class="line"><span style="color:#79B8FF;">12</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">类名</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">父类1</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">父类2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">...</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">父类N</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    类内容体</span></span>
<span class="line"><span style="color:#005CC5;">12</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>使用示例:</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Phone</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    producer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;apple&quot;</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 厂商</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Camera</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    producer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;suoni&quot;</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 厂商</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Phone2022</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Phone</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Camera</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    face_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 面部识别</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">call_by_5g</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;2022最新5G通话&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">phone </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Phone2022()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(phone.producer)  </span><span style="color:#6A737D;"># 打印结果为apple而非suoni</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Phone</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    producer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;apple&quot;</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 厂商</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Camera</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    producer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;suoni&quot;</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 厂商</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Phone2022</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Phone</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Camera</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    face_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 面部识别</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">call_by_5g</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2022最新5G通话&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">phone </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Phone2022()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(phone.producer)  </span><span style="color:#6A737D;"># 打印结果为apple而非suoni</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h5 id="复写" tabindex="-1">复写 <a class="header-anchor" href="#复写" aria-label="Permalink to &quot;复写&quot;">​</a></h5><ul><li>子类继承父类的成员属性和成员方法后，如果对其“不满意”，那么可以进行复写。即：在子类中重新定义同名的属性或方法。</li><li>一旦复写父类成员，那么类对象调用成员的时候，就会调用复写后的新成员</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Phone2021</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    producer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;apple&quot;</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 厂商</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">call_by_5g</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;2021版5G通话&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Phone2022</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Phone2021</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    face_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 面部识别</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">call_by_5g</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;2022升级版5G通话&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">phone </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Phone2022()</span></span>
<span class="line"><span style="color:#E1E4E8;">phone.call_by_5g()  </span><span style="color:#6A737D;"># 打印 2022升级版5G通话</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Phone2021</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    producer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;apple&quot;</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 厂商</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">call_by_5g</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2021版5G通话&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Phone2022</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Phone2021</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    face_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 面部识别</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">call_by_5g</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2022升级版5G通话&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">phone </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Phone2022()</span></span>
<span class="line"><span style="color:#24292E;">phone.call_by_5g()  </span><span style="color:#6A737D;"># 打印 2022升级版5G通话</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li><p>如果需要使用被复写的父类的成员,只能在子类内通过如下方式调用父类的同名成员:</p><ul><li><p>方式一：使用父类名调用</p><blockquote><p>使用成员变量：父类名.成员变量 使用成员方法：父类名.成员方法(self)</p></blockquote></li><li><p>方式二：使用<code>super()</code>调用</p><blockquote><p>使用成员变量：super().成员变量 使用成员方法：super().成员方法()</p></blockquote></li><li><p>使用实例</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Phone2021</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    producer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;apple&quot;</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 厂商</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">call_by_5g</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;2021版5G通话&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Phone2022</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Phone2021</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    face_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 面部识别</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">call_by_5g</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 方式一调用</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(Phone2021.producer)  </span><span style="color:#6A737D;"># 打印 apple</span></span>
<span class="line"><span style="color:#E1E4E8;">        Phone2021.call_by_5g(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">)</span><span style="color:#6A737D;"># 打印 2021版5G通话</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 方式二调用</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">().producer)</span><span style="color:#6A737D;"># 打印 apple</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">().call_by_5g()</span><span style="color:#6A737D;"># 打印 2021版5G通话</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Phone2021</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    producer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;apple&quot;</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 厂商</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">call_by_5g</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2021版5G通话&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Phone2022</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Phone2021</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    face_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 面部识别</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">call_by_5g</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 方式一调用</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(Phone2021.producer)  </span><span style="color:#6A737D;"># 打印 apple</span></span>
<span class="line"><span style="color:#24292E;">        Phone2021.call_by_5g(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">)</span><span style="color:#6A737D;"># 打印 2021版5G通话</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 方式二调用</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">super</span><span style="color:#24292E;">().producer)</span><span style="color:#6A737D;"># 打印 apple</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">().call_by_5g()</span><span style="color:#6A737D;"># 打印 2021版5G通话</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li></ul></li></ul><h4 id="多态" tabindex="-1">多态 <a class="header-anchor" href="#多态" aria-label="Permalink to &quot;多态&quot;">​</a></h4><blockquote><p>多种状态，即完成某个行为时，使用不同的对象会得到不同的状态</p></blockquote><p><img src="https://raw.githubusercontent.com/caolinchao2/blogimg/main/img/81a34f5c1b3e4611820583f6773a5f23.png" alt=""></p><blockquote><p>多态常作用在继承关系上，函数(方法)形参声明接收父类对象，实际传入父类的子类对象进行工作，即</p></blockquote><ul><li>以父类做定义声明</li><li>以子类做实际工作</li><li>用以获得同一行为, 不同状态</li></ul><p><img src="https://raw.githubusercontent.com/caolinchao2/blogimg/main/img/image-20240726170121103.png" alt="image-20240726170121103"></p><h5 id="抽象类-接口" tabindex="-1">抽象类(接口) <a class="header-anchor" href="#抽象类-接口" aria-label="Permalink to &quot;抽象类(接口)&quot;">​</a></h5><blockquote><p>抽象类就好比定义一个标准，包含了一些抽象的方法，要求子类必须实现</p></blockquote><ul><li>抽象类：包含抽象方法的类</li><li>抽象方法：没有具体实现的方法（只含pass）称之为抽象方法</li><li><code>pass</code>是占位语句，用来保证函数（方法）或类定义的完整性，表示无内容，空的意思</li></ul><p><img src="https://raw.githubusercontent.com/caolinchao2/blogimg/main/img/d6c6556484b3483d98aae04c3a00d19b.png" alt=""></p><ul><li><p>多用于做顶层设计（设计标准），以便子类做具体实现。是对子类的一种软性约束，要求子类必须复写（实现）父类的一些方法</p><p>并配合多态使用，获得不同的工作状态。</p></li></ul><h2 id="类型注解" tabindex="-1">类型注解 <a class="header-anchor" href="#类型注解" aria-label="Permalink to &quot;类型注解&quot;">​</a></h2><h3 id="变量类型注解" tabindex="-1">变量类型注解 <a class="header-anchor" href="#变量类型注解" aria-label="Permalink to &quot;变量类型注解&quot;">​</a></h3><h4 id="基础类型" tabindex="-1">基础类型 <a class="header-anchor" href="#基础类型" aria-label="Permalink to &quot;基础类型&quot;">​</a></h4><ul><li><strong>整数</strong>类型注解</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">var_1: </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1314</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">var_1: </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1314</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><strong>浮点数</strong>类型注解</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">var_2: </span><span style="color:#79B8FF;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5.21</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">var_2: </span><span style="color:#005CC5;">float</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5.21</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><strong>布尔</strong>类型注解</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">var_3: </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">var_3: </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><strong>字符串</strong>类型注解</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">var_4: </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hhybd&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">var_4: </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hhybd&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="类对象" tabindex="-1">类对象 <a class="header-anchor" href="#类对象" aria-label="Permalink to &quot;类对象&quot;">​</a></h4><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 定义学生类</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">stu: Student </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Student()  </span><span style="color:#6A737D;"># 学生类类型注解</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 定义学生类</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">stu: Student </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Student()  </span><span style="color:#6A737D;"># 学生类类型注解</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="数据容器" tabindex="-1">数据容器 <a class="header-anchor" href="#数据容器" aria-label="Permalink to &quot;数据容器&quot;">​</a></h4><ul><li><p><strong>列表</strong>类型注解</p><ul><li><p>方式一：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">my_list: </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">my_list: </span><span style="color:#005CC5;">list</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>方式二，<code>list[基础类型]</code>:</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">my_list: list[</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">my_list: list[</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li><li><p><strong>元组</strong>类型注解</p><ul><li><p>方式一：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">my_tuple: </span><span style="color:#79B8FF;">tuple</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">my_tuple: </span><span style="color:#005CC5;">tuple</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>方式二,元组类型需要将每一个元素都标记出来:</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">my_tuple: tuple[</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;bd&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">521</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">my_tuple: tuple[</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">int</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;bd&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">521</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li><li><p><strong>集合</strong>类型注解</p><ul><li><p>方式一:</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">my_set: </span><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">my_set: </span><span style="color:#005CC5;">set</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>方式二，<code>set[基础类型]</code>：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">my_set: set[</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">my_set: set[</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li><li><p><strong>字典</strong>类型注解</p><ul><li><p>方式一：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">my_dict: </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;hhbdy&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">250</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">my_dict: </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;hhbdy&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">250</span><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>方式二,<code>dict[键类型,值类型]</code>：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">my_dict: dict[</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;hhbdy&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">250</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">my_dict: dict[</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">int</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;hhbdy&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">250</span><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li></ul><h4 id="其他语法格式" tabindex="-1">其他语法格式 <a class="header-anchor" href="#其他语法格式" aria-label="Permalink to &quot;其他语法格式&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">stu = Student()  # type:Student</span></span>
<span class="line"><span style="color:#e1e4e8;">var_1 = 123  # type:int</span></span>
<span class="line"><span style="color:#e1e4e8;">my_list = [1, 2, 3]  # type:list</span></span>
<span class="line"><span style="color:#e1e4e8;">my_set = {1, 2, 3}  # type:set[int]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">stu = Student()  # type:Student</span></span>
<span class="line"><span style="color:#24292e;">var_1 = 123  # type:int</span></span>
<span class="line"><span style="color:#24292e;">my_list = [1, 2, 3]  # type:list</span></span>
<span class="line"><span style="color:#24292e;">my_set = {1, 2, 3}  # type:set[int]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,63),e=[o];function c(r,t,y,E,i,u){return n(),a("div",null,e)}const h=s(p,[["render",c]]);export{b as __pageData,h as default};
