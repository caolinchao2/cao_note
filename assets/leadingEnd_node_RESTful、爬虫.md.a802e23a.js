import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.d7c6e0b6.js";const b=JSON.parse('{"title":"RESTful、爬虫","description":"","frontmatter":{},"headers":[],"relativePath":"leadingEnd/node/RESTful、爬虫.md","filePath":"leadingEnd/node/RESTful、爬虫.md","lastUpdated":1720175145000}'),p={name:"leadingEnd/node/RESTful、爬虫.md"},e=l(`<h1 id="restful、爬虫" tabindex="-1">RESTful、爬虫 <a class="header-anchor" href="#restful、爬虫" aria-label="Permalink to &quot;RESTful、爬虫&quot;">​</a></h1><h2 id="一、扩展node的路由" tabindex="-1">一、扩展node的路由 <a class="header-anchor" href="#一、扩展node的路由" aria-label="Permalink to &quot;一、扩展node的路由&quot;">​</a></h2><ol><li><p><code>res.statusCode = 200</code>， 设置状态码</p></li><li><p><code>res.statusMessage = &#39;ok&#39;</code>； 设置状态描述</p></li><li><p><code>res.setHeader(&#39;content-type&#39;,&#39;text/html&#39;)</code>；</p><p>告诉浏览器接收的内容是什么类型的；</p><p>还可以设置响应里面的内容；</p><p>text/plain 纯文本；</p></li></ol><p>上面三种都是res.writeHead的分开写法；</p><h2 id="二、扩展express的路由" tabindex="-1">二、扩展express的路由 <a class="header-anchor" href="#二、扩展express的路由" aria-label="Permalink to &quot;二、扩展express的路由&quot;">​</a></h2><ol><li><code>res.json()</code>；输出json对象；</li><li><code>res.send(JSON.stringify())</code>；输入json字符串；</li><li><code>res.set()</code>；设置浏览器文件类型；</li><li><code>res.status()</code>；设置状态码；可以直接链式调用send；</li></ol><h2 id="三、静态资源托管" tabindex="-1">三、静态资源托管 <a class="header-anchor" href="#三、静态资源托管" aria-label="Permalink to &quot;三、静态资源托管&quot;">​</a></h2><ol><li><p><code>app.use([path],express.static(path))</code>；</p><p>第二个写要开放的目录，建议写绝对路径，可以自动查询index.html；</p><p>第一个可选，可以写一个路由，访问后面的目录需要带上这个路由；</p></li><li><p><code>app.use((req,res)=&gt;{})</code>； 等同于<code>app.all(&#39;*&#39;)</code>；</p></li></ol><h2 id="五、restful-api" tabindex="-1">五、RESTful API <a class="header-anchor" href="#五、restful-api" aria-label="Permalink to &quot;五、RESTful API&quot;">​</a></h2><ol><li><p>传统设计路由的形式: 形容词+名词</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">get  /addbook</span></span>
<span class="line"><span style="color:#e1e4e8;">get  /book</span></span>
<span class="line"><span style="color:#e1e4e8;">get  /doaddbook</span></span>
<span class="line"><span style="color:#e1e4e8;">get  /dodelbook</span></span>
<span class="line"><span style="color:#e1e4e8;">get  /doupdatebook</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">get  /addbook</span></span>
<span class="line"><span style="color:#24292e;">get  /book</span></span>
<span class="line"><span style="color:#24292e;">get  /doaddbook</span></span>
<span class="line"><span style="color:#24292e;">get  /dodelbook</span></span>
<span class="line"><span style="color:#24292e;">get  /doupdatebook</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>RESTful: 这个东西就是去描述 路由应该如何设计</p></li><li><p>RESTful这个标准 把一些路由当中的形容词给去了。用 method请求方法表示</p><p>GET：读取（Read）</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">get  /book/get</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">get  /book/get</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>POST：新建（Create）</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">post /book/post</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">post /book/post</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>PUT：更新（Update）</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">put  /book/put</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">put  /book/put</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>PATCH：更新（Update），通常是部分更新</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">patch /book</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">patch /book</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>DELETE：删除（Delete）</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">delete /book</span></span>
<span class="line"><span style="color:#e1e4e8;">       /book?id=1</span></span>
<span class="line"><span style="color:#e1e4e8;">       /book/1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">delete /book</span></span>
<span class="line"><span style="color:#24292e;">       /book?id=1</span></span>
<span class="line"><span style="color:#24292e;">       /book/1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><h2 id="六、中间件" tabindex="-1">六、中间件 <a class="header-anchor" href="#六、中间件" aria-label="Permalink to &quot;六、中间件&quot;">​</a></h2><blockquote><p>每一个中间都有自己的一些含义</p></blockquote><p>在express所有的回调函数，都可以称为中间件，中间件可以理解为工厂当中的车间。</p><ul><li><p>内置中间件</p></li><li><p>第三方的</p></li><li><p>自定义中间件</p><p>其实我们定义的路由都可是中间件</p><p><code>app.get(&#39;/book&#39;)</code> <code>app.post(&#39;/user&#39;)</code>... 都是中间件</p></li><li><p>使用中间件特定的语法</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">next</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里可以做一些处理</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 必须调用next函数，否则不会往下面走了</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">((</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里可以做一些处理</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 必须调用next函数，否则不会往下面走了</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>使用中间件和定义路由很相像，只要匹配成功并且send了，就不会再往下匹配 。</p></li></ul><h2 id="七、os" tabindex="-1">七、OS <a class="header-anchor" href="#七、os" aria-label="Permalink to &quot;七、OS&quot;">​</a></h2><ul><li><code>os.cpus()</code> 获取操作系统的CPU信息；</li><li><code>os.totalmem()</code> 获取内存的信息</li><li><code>os.arch()</code> 查看系统架构，比如x64、x86，手机也不同；</li><li><code>os.freemem()</code> 查看剩余内存；</li><li><code>os.platform()</code> 查看操作系统平台</li></ul><h2 id="八、node爬虫" tabindex="-1">八、node爬虫 <a class="header-anchor" href="#八、node爬虫" aria-label="Permalink to &quot;八、node爬虫&quot;">​</a></h2><h3 id="接口请求工具" tabindex="-1">接口请求工具 <a class="header-anchor" href="#接口请求工具" aria-label="Permalink to &quot;接口请求工具&quot;">​</a></h3><ul><li><p><code>axios</code> 需要安装</p></li><li><p><code>request</code> 需要安装</p></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// body为页面内容或请求内容</span></span>
<span class="line"><span style="color:#6A737D;">// response为响应头信息</span></span>
<span class="line"><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http://&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">body</span><span style="color:#E1E4E8;">){})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// body为页面内容或请求内容</span></span>
<span class="line"><span style="color:#6A737D;">// response为响应头信息</span></span>
<span class="line"><span style="color:#6F42C1;">request</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http://&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">err</span><span style="color:#24292E;">,</span><span style="color:#E36209;">response</span><span style="color:#24292E;">, </span><span style="color:#E36209;">body</span><span style="color:#24292E;">){})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>axios获取图片存入到本地</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ws</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">createWriteStream</span><span style="color:#E1E4E8;">(path)</span></span>
<span class="line"><span style="color:#6A737D;">// 请求注意添加响应信息, 以流的方式返回回来</span></span>
<span class="line"><span style="color:#E1E4E8;">axios.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(imgUrl, {responseType: </span><span style="color:#9ECBFF;">&#39;stream&#39;</span><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.data.</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(ws)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 流读取完成时关闭</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.data.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;close&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ws.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ws</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">createWriteStream</span><span style="color:#24292E;">(path)</span></span>
<span class="line"><span style="color:#6A737D;">// 请求注意添加响应信息, 以流的方式返回回来</span></span>
<span class="line"><span style="color:#24292E;">axios.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(imgUrl, {responseType: </span><span style="color:#032F62;">&#39;stream&#39;</span><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    res.data.</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(ws)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 流读取完成时关闭</span></span>
<span class="line"><span style="color:#24292E;">    res.data.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;close&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        ws.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>由于爬虫循环请求数据，容易导致拉黑，建议添加延时函数</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lcWait</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">milliSeconds</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(resolve, milliSeconds)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lcWait</span><span style="color:#24292E;">(</span><span style="color:#E36209;">milliSeconds</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">(</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(resolve, milliSeconds)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>注意在等待时给定延时，需要是不同的时间，否则就是一起等待了；</p><h3 id="获取dom工具-类似jquery" tabindex="-1">获取dom工具(类似jquery) <a class="header-anchor" href="#获取dom工具-类似jquery" aria-label="Permalink to &quot;获取dom工具(类似jquery)&quot;">​</a></h3><ul><li>jsdom</li><li>cheerio：<a href="https://github.com/cheeriojs/cheerio/wiki/Chinese-README" target="_blank" rel="noreferrer">中文文档</a> 推荐使用</li></ul><p>cheerio基本例子</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cheerio</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;cheerio&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">request</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;request&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;https://www.1905.com/&#39;</span></span>
<span class="line"><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(url, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">body</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 使用load加载dom结构，之后可以使用$符获取；</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cheerio.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(body)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div.exclusive-content a&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">each</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">element</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    arr.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({name: </span><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">(element).</span><span style="color:#B392F0;">attr</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;alt&#39;</span><span style="color:#E1E4E8;">), url: </span><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">(element).</span><span style="color:#B392F0;">attr</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;href&#39;</span><span style="color:#E1E4E8;">)})</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(arr)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cheerio</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;cheerio&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">request</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;request&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;https://www.1905.com/&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">request</span><span style="color:#24292E;">(url, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">response</span><span style="color:#24292E;">, </span><span style="color:#E36209;">body</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 使用load加载dom结构，之后可以使用$符获取；</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cheerio.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(body)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">$</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;div.exclusive-content a&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">each</span><span style="color:#24292E;">((</span><span style="color:#E36209;">index</span><span style="color:#24292E;">, </span><span style="color:#E36209;">element</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    arr.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({name: </span><span style="color:#6F42C1;">$</span><span style="color:#24292E;">(element).</span><span style="color:#6F42C1;">attr</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;alt&#39;</span><span style="color:#24292E;">), url: </span><span style="color:#6F42C1;">$</span><span style="color:#24292E;">(element).</span><span style="color:#6F42C1;">attr</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;href&#39;</span><span style="color:#24292E;">)})</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="常用爬虫函数" tabindex="-1">常用爬虫函数 <a class="header-anchor" href="#常用爬虫函数" aria-label="Permalink to &quot;常用爬虫函数&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建文件夹的正则</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">reg</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">[</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">/</span><span style="color:#85E89D;font-weight:bold;">\\:\\*\\?\\&quot;\\&lt;\\&gt;\\|</span><span style="color:#79B8FF;">\\t</span><span style="color:#85E89D;font-weight:bold;">\\b</span><span style="color:#79B8FF;">\\r]</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建写入文件，递归创建</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">recursiveFile</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">dir</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">curPath</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(process.</span><span style="color:#B392F0;">cwd</span><span style="color:#E1E4E8;">(), dir)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">existsSync</span><span style="color:#E1E4E8;">(path)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    fs.</span><span style="color:#B392F0;">mkdirSync</span><span style="color:#E1E4E8;">(curPath, {recursive: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">createWriteStream</span><span style="color:#E1E4E8;">(path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(curPath, name </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> extname))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建文件夹的正则</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">reg</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#005CC5;">[</span><span style="color:#22863A;font-weight:bold;">\\\\</span><span style="color:#005CC5;">/</span><span style="color:#22863A;font-weight:bold;">\\:\\*\\?\\&quot;\\&lt;\\&gt;\\|</span><span style="color:#005CC5;">\\t</span><span style="color:#22863A;font-weight:bold;">\\b</span><span style="color:#005CC5;">\\r]</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建写入文件，递归创建</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">recursiveFile</span><span style="color:#24292E;">(</span><span style="color:#E36209;">dir</span><span style="color:#24292E;">, </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">curPath</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(process.</span><span style="color:#6F42C1;">cwd</span><span style="color:#24292E;">(), dir)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">existsSync</span><span style="color:#24292E;">(path)) {</span></span>
<span class="line"><span style="color:#24292E;">    fs.</span><span style="color:#6F42C1;">mkdirSync</span><span style="color:#24292E;">(curPath, {recursive: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">createWriteStream</span><span style="color:#24292E;">(path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(curPath, name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> extname))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="九、puppeteer" tabindex="-1">九、Puppeteer <a class="header-anchor" href="#九、puppeteer" aria-label="Permalink to &quot;九、Puppeteer&quot;">​</a></h2><h3 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h3><ul><li>生成页面 PDF。</li><li>抓取 SPA（单页应用）并生成预渲染内容（即“SSR”（服务器端渲染））。</li><li>自动提交表单，进行 UI 测试，键盘输入等。</li><li>创建一个时时更新的自动化测试环境。 使用最新的 JavaScript 和浏览器功能直接在最新版本的Chrome中执行测试。</li><li>捕获网站的 <a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference" target="_blank" rel="noreferrer">timeline trace</a>，用来帮助分析性能问题。</li><li>测试浏览器扩展。</li></ul><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>教程网站：<a href="http://zhaoqize.github.io/puppeteer-api-zh_CN/#" target="_blank" rel="noreferrer">zhaoqize.github.io/puppeteer-api-zh_CN/#</a></p><ol><li><p>安装：<code>npm install puppeteer-core</code></p><p><code>puppeteer-core</code>为跳过安装chromium版，通过后面指定<code>executablePath</code>来打开本地chrome</p></li><li><p>启动demo</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">puppeteer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;puppeteer&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">puppeteer.</span><span style="color:#B392F0;">launch</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    headless: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 设置浏览器视窗大小</span></span>
<span class="line"><span style="color:#E1E4E8;">    defaultViewport: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        width: </span><span style="color:#79B8FF;">1400</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     height: </span><span style="color:#79B8FF;">800</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 设置放慢速度，方便调试</span></span>
<span class="line"><span style="color:#E1E4E8;">    slowMo: </span><span style="color:#79B8FF;">250</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    executablePath: </span><span style="color:#9ECBFF;">&#39;本地chrome文件exe地址&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">browser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">page</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> browser.</span><span style="color:#B392F0;">newPage</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 打开一个新窗口</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">puppeteer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;puppeteer&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">puppeteer.</span><span style="color:#6F42C1;">launch</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    headless: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 设置浏览器视窗大小</span></span>
<span class="line"><span style="color:#24292E;">    defaultViewport: {</span></span>
<span class="line"><span style="color:#24292E;">        width: </span><span style="color:#005CC5;">1400</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     height: </span><span style="color:#005CC5;">800</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 设置放慢速度，方便调试</span></span>
<span class="line"><span style="color:#24292E;">    slowMo: </span><span style="color:#005CC5;">250</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    executablePath: </span><span style="color:#032F62;">&#39;本地chrome文件exe地址&#39;</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#E36209;">browser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">page</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> browser.</span><span style="color:#6F42C1;">newPage</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 打开一个新窗口</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>headless：设置为true时不打开浏览器，设置false为打开浏览器，方便调试；</p></li></ol><h3 id="获取控制台内容" tabindex="-1">获取控制台内容 <a class="header-anchor" href="#获取控制台内容" aria-label="Permalink to &quot;获取控制台内容&quot;">​</a></h3><p>使用page对象；</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">page.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;console&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">eventMsg</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// node中打印浏览器控制台输出文字</span></span>
<span class="line"><span style="color:#E1E4E8;">   console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(eventMsg.</span><span style="color:#B392F0;">text</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">page.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;console&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">eventMsg</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// node中打印浏览器控制台输出文字</span></span>
<span class="line"><span style="color:#24292E;">   console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(eventMsg.</span><span style="color:#6F42C1;">text</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="获取节点内容" tabindex="-1">获取节点内容 <a class="header-anchor" href="#获取节点内容" aria-label="Permalink to &quot;获取节点内容&quot;">​</a></h3><p>page.$是返回ElementHandle用来操作点击事件的；</p><p>page.$eval是用来获取页面内容的；</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">page</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> browser.</span><span style="color:#B392F0;">newPage</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">goto</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://www.dygod.net&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> elements </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">$$eval</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#menu li a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">elements</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 代码在浏览器运行, 不在node中打印;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">contentArr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    elements.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        contentArr.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            href: item.</span><span style="color:#B392F0;">getAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;href&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            name: item.innerText</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> contentArr</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(elements)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">page</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> browser.</span><span style="color:#6F42C1;">newPage</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> page.</span><span style="color:#6F42C1;">goto</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://www.dygod.net&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> elements </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> page.</span><span style="color:#6F42C1;">$$eval</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#menu li a&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">elements</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 代码在浏览器运行, 不在node中打印;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">contentArr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    elements.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        contentArr.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">            href: item.</span><span style="color:#6F42C1;">getAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;href&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            name: item.innerText</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> contentArr</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(elements)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="页面点击事件" tabindex="-1">页面点击事件 <a class="header-anchor" href="#页面点击事件" aria-label="Permalink to &quot;页面点击事件&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">elementHandle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">$$</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#menu li a&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">elementHandle[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">elementHandle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> page.</span><span style="color:#6F42C1;">$$</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#menu li a&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">elementHandle[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">click</span><span style="color:#24292E;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="搜索事件" tabindex="-1">搜索事件 <a class="header-anchor" href="#搜索事件" aria-label="Permalink to &quot;搜索事件&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">iptEl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;.searchl .formhue&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 找到搜索框</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> iptEl.</span><span style="color:#B392F0;">focus</span><span style="color:#E1E4E8;">()  </span><span style="color:#6A737D;">// 聚焦事件：focus</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.keyboard.</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;哆啦A梦&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 输入对象：keyboard</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">btnEl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;.searchr input[type=&quot;Submit&quot;]&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 获取搜索按钮并点击</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> btnEl.</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> iptEl.</span><span style="color:#B392F0;">dispose</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 关闭当前句柄，否则会报错丢失；</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> btnEl.</span><span style="color:#B392F0;">dispose</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iptEl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> page.</span><span style="color:#6F42C1;">$</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;.searchl .formhue&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 找到搜索框</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> iptEl.</span><span style="color:#6F42C1;">focus</span><span style="color:#24292E;">()  </span><span style="color:#6A737D;">// 聚焦事件：focus</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> page.keyboard.</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;哆啦A梦&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 输入对象：keyboard</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">btnEl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> page.</span><span style="color:#6F42C1;">$</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;.searchr input[type=&quot;Submit&quot;]&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 获取搜索按钮并点击</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> btnEl.</span><span style="color:#6F42C1;">click</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> iptEl.</span><span style="color:#6F42C1;">dispose</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 关闭当前句柄，否则会报错丢失；</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> btnEl.</span><span style="color:#6F42C1;">dispose</span><span style="color:#24292E;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>或者使用：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">goto</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://www.baidu.com&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#head_wrapper .soutu-env-nomac #form #kw&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;puppeteer&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">    page.</span><span style="color:#B392F0;">waitForNavigation</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    page.</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#head_wrapper .s_btn&#39;</span><span style="color:#E1E4E8;">, )</span></span>
<span class="line"><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> page.</span><span style="color:#6F42C1;">goto</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://www.baidu.com&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> page.</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#head_wrapper .soutu-env-nomac #form #kw&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;puppeteer&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">all</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">    page.</span><span style="color:#6F42C1;">waitForNavigation</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    page.</span><span style="color:#6F42C1;">click</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#head_wrapper .s_btn&#39;</span><span style="color:#24292E;">, )</span></span>
<span class="line"><span style="color:#24292E;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="拦截network请求" tabindex="-1">拦截network请求 <a class="header-anchor" href="#拦截network请求" aria-label="Permalink to &quot;拦截network请求&quot;">​</a></h3><p>由于请求一些数据导致页面加载更慢，可以中断一些请求。开启请求拦截器需要设置为true：page.setRequestInterception(true)</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">setRequestInterception</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">page.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;request&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">interceptedRequest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(interceptedRequest.</span><span style="color:#B392F0;">url</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(interceptedRequest.</span><span style="color:#B392F0;">url</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">endsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;.png&#39;</span><span style="color:#E1E4E8;">)){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 中断请求</span></span>
<span class="line"><span style="color:#E1E4E8;">        interceptedRequest.</span><span style="color:#B392F0;">abort</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 继续请求</span></span>
<span class="line"><span style="color:#E1E4E8;">        interceptedRequest.</span><span style="color:#B392F0;">continue</span><span style="color:#E1E4E8;">()    </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">goto</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://chat.wing.vip&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> page.</span><span style="color:#6F42C1;">setRequestInterception</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">page.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;request&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">interceptedRequest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(interceptedRequest.</span><span style="color:#6F42C1;">url</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(interceptedRequest.</span><span style="color:#6F42C1;">url</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;.png&#39;</span><span style="color:#24292E;">)){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 中断请求</span></span>
<span class="line"><span style="color:#24292E;">        interceptedRequest.</span><span style="color:#6F42C1;">abort</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 继续请求</span></span>
<span class="line"><span style="color:#24292E;">        interceptedRequest.</span><span style="color:#6F42C1;">continue</span><span style="color:#24292E;">()    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> page.</span><span style="color:#6F42C1;">goto</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://chat.wing.vip&#39;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="页面内执行方法" tabindex="-1">页面内执行方法 <a class="header-anchor" href="#页面内执行方法" aria-label="Permalink to &quot;页面内执行方法&quot;">​</a></h3><p><code>page.evaluate(pageFunction[,...args])</code>：代码执行返回字符串</p><p><code>page.evaluateHandle(pageFunction[,...args])</code>：代码执行返回<code>JSHandle</code></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">aHandle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">evaluateHandle</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> document.body);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">resultHandle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">evaluateHandle</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">body</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> body.innerHTML, aHandle);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> resultHandle.</span><span style="color:#B392F0;">jsonValue</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> resultHandle.</span><span style="color:#B392F0;">dispose</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">aHandle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> page.</span><span style="color:#6F42C1;">evaluateHandle</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> document.body);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">resultHandle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> page.</span><span style="color:#6F42C1;">evaluateHandle</span><span style="color:#24292E;">(</span><span style="color:#E36209;">body</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> body.innerHTML, aHandle);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> resultHandle.</span><span style="color:#6F42C1;">jsonValue</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> resultHandle.</span><span style="color:#6F42C1;">dispose</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="监听下载完成" tabindex="-1">监听下载完成 <a class="header-anchor" href="#监听下载完成" aria-label="Permalink to &quot;监听下载完成&quot;">​</a></h3><p>下载完成相当于是一个请求完成的操作</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">page.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;requestfinished&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">page.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;requestfinished&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">request</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="好用的api" tabindex="-1">好用的api <a class="header-anchor" href="#好用的api" aria-label="Permalink to &quot;好用的api&quot;">​</a></h3><ul><li><code>page.close()</code>：关闭当前页面</li><li><code>browser.close()</code>：关闭当前浏览器</li><li><code>page.waitForSelector(selector)</code>：等待元素出现之后再进行操作（由于前端渲染页面，比如单页面应用，需要使用该方法等待元素出现）</li><li><code>page.mouse</code>：用于移动鼠标的当前位置，可以用来选中某个区域； <ul><li><code>page.mouse.down</code></li><li><code>page.mouse.up</code></li><li><code>page.mouse.move</code></li><li><code>page.mouse.click</code></li></ul></li></ul>`,62),o=[e];function r(c,t,E,y,i,d){return a(),n("div",null,o)}const F=s(p,[["render",r]]);export{b as __pageData,F as default};
