import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.b5309610.js";const d=JSON.parse('{"title":"Vue-03 组件、Props","description":"","frontmatter":{},"headers":[],"relativePath":"前端/Vue/vue-03 组件 Prop.md","filePath":"前端/Vue/vue-03 组件 Prop.md","lastUpdated":null}'),p={name:"前端/Vue/vue-03 组件 Prop.md"},e=l(`<h1 id="vue-03-组件、props" tabindex="-1">Vue-03 组件、Props <a class="header-anchor" href="#vue-03-组件、props" aria-label="Permalink to &quot;Vue-03 组件、Props&quot;">​</a></h1><h2 id="一、组件" tabindex="-1">一、组件 <a class="header-anchor" href="#一、组件" aria-label="Permalink to &quot;一、组件&quot;">​</a></h2><ol><li>概念：包含了View、Model、Methods等完整的具有独立功能的自定义元素</li><li>组件是vue框架核心内容，是重点</li><li>组件是可利用的Vue实例，所以组件与new Vue接收相同的选项，比如data、computed、methods等</li><li>每个组件都会各自独立维护它自己的变量，每使用一次组件，就会有一个它的新实例被创建 <ul><li>比如：创建一个按钮，点击一次加一，使用多个按钮，它们的计数是不一样的</li></ul></li></ol><h2 id="二、全局和局部注册组件" tabindex="-1">二、全局和局部注册组件 <a class="header-anchor" href="#二、全局和局部注册组件" aria-label="Permalink to &quot;二、全局和局部注册组件&quot;">​</a></h2><blockquote><p>创建好的组件名直接作为标签名放在挂载的元素内</p></blockquote><h3 id="全局注册" tabindex="-1">全局注册 <a class="header-anchor" href="#全局注册" aria-label="Permalink to &quot;全局注册&quot;">​</a></h3><ul><li>所有挂载了Vue根实例的标签都可以使用该组件</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Vue.</span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;组件名&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">      template: </span><span style="color:#9ECBFF;">&#39;标签&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Vue.</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;组件名&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">      template: </span><span style="color:#032F62;">&#39;标签&#39;</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="局部注册" tabindex="-1">局部注册 <a class="header-anchor" href="#局部注册" aria-label="Permalink to &quot;局部注册&quot;">​</a></h3><ul><li>只能在当前Vue实例挂载元素内使用</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vue</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    el:</span><span style="color:#9ECBFF;">&#39;#app&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    components:{</span></span>
<span class="line"><span style="color:#E1E4E8;">        custom:{</span></span>
<span class="line"><span style="color:#E1E4E8;">            template:</span><span style="color:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vue</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    el:</span><span style="color:#032F62;">&#39;#app&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    components:{</span></span>
<span class="line"><span style="color:#24292E;">        custom:{</span></span>
<span class="line"><span style="color:#24292E;">            template:</span><span style="color:#032F62;">&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="三、组件名的命名方式" tabindex="-1">三、组件名的命名方式 <a class="header-anchor" href="#三、组件名的命名方式" aria-label="Permalink to &quot;三、组件名的命名方式&quot;">​</a></h2><ol><li>建议使用带中划线的名字，可以避免关键字出错；</li><li>当命名为驼峰命名时，在使用组件时需要转写成中划线，否则报错</li><li>组件名带中划线必须加引号</li><li>强烈推荐遵循w3c规范中的自定义组件名（字母全小写且必须包含一个连字符），会避免html元素相冲突</li></ol><h2 id="四、组件的特点" tabindex="-1">四、组件的特点 <a class="header-anchor" href="#四、组件的特点" aria-label="Permalink to &quot;四、组件的特点&quot;">​</a></h2><h3 id="单个根元素" tabindex="-1">单个根元素 <a class="header-anchor" href="#单个根元素" aria-label="Permalink to &quot;单个根元素&quot;">​</a></h3><ol><li>只能有一个根节点，最外层只能是一个标签（对于注释节点、文本节点都不行）</li><li>建议每次创建组件时，可以先写一个div包裹</li></ol><h3 id="data必须是一个函数" tabindex="-1">data必须是一个函数 <a class="header-anchor" href="#data必须是一个函数" aria-label="Permalink to &quot;data必须是一个函数&quot;">​</a></h3><blockquote><p>创建的组件当中，使用data时，不能像之前那样直接点，因为每个组件返回的数据都应该是独立的，隔离的；</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        count:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">data</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        count:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="五、组件嵌套" tabindex="-1">五、组件嵌套 <a class="header-anchor" href="#五、组件嵌套" aria-label="Permalink to &quot;五、组件嵌套&quot;">​</a></h2><ul><li>可以无穷的套components，组件嵌套需要将子组件放在父组件当中，将父组件放在挂载点中</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">parent</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">template</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">\`&lt;div&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">        &lt;child&gt;&lt;/child&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">    &lt;/div&gt;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">components</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">child</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">template</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;&lt;b&gt;&lt;/b&gt;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">parent</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">template</span><span style="color:#24292E;">:</span><span style="color:#032F62;">\`&lt;div&gt;</span></span>
<span class="line"><span style="color:#032F62;">        &lt;child&gt;&lt;/child&gt;</span></span>
<span class="line"><span style="color:#032F62;">    &lt;/div&gt;\`</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">components</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">child</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">template</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;&lt;b&gt;&lt;/b&gt;&#39;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>内部组件也可以拿出来写</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> child </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    template:</span><span style="color:#9ECBFF;">&#39;&lt;b&gt;&lt;/b&gt;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">parent</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">template</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;&lt;div</span><span style="color:#FDAEB7;font-style:italic;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">child</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">child</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">    components:</span><span style="color:#FDAEB7;font-style:italic;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        child</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> child </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    template:</span><span style="color:#032F62;">&#39;&lt;b&gt;&lt;/b&gt;&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">parent</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">template</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;&lt;div</span><span style="color:#B31D28;font-style:italic;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">child</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">child</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">&#39;</span></span>
<span class="line"><span style="color:#032F62;">    components:</span><span style="color:#B31D28;font-style:italic;">{</span></span>
<span class="line"><span style="color:#24292E;">        child</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="六、prop" tabindex="-1">六、Prop <a class="header-anchor" href="#六、prop" aria-label="Permalink to &quot;六、Prop&quot;">​</a></h2><blockquote><p>在组件当中，数据是不互通的，需要经过prop进行数据传递</p></blockquote><h3 id="props命名" tabindex="-1">Props命名 <a class="header-anchor" href="#props命名" aria-label="Permalink to &quot;Props命名&quot;">​</a></h3><ul><li>prop命名使用驼峰命名时，在html中需要转为减号分开</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">props:[myMessage] ----&gt; &lt;</span><span style="color:#FDAEB7;font-style:italic;">child</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">my-message</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">props:[myMessage] ----&gt; &lt;</span><span style="color:#B31D28;font-style:italic;">child</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">my-message</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>在声明props的时候，其命名应该始终使用camelCase，而在模板和JSX中应该始终使用kebab-case</li><li>在javascript中更自然的是camelCase，而在html中则是kebab-case</li></ul><h3 id="props传递" tabindex="-1">Props传递 <a class="header-anchor" href="#props传递" aria-label="Permalink to &quot;Props传递&quot;">​</a></h3><ul><li>组件可以有任意数量的prop，在template里面像访问data值一样取值</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Vue.component(&#39;blog-post&#39;, {</span></span>
<span class="line"><span style="color:#E1E4E8;">      props: [&#39;title&#39;],</span></span>
<span class="line"><span style="color:#E1E4E8;">      template: &#39;&lt;</span><span style="color:#85E89D;">h3</span><span style="color:#E1E4E8;">&gt;{{ title }}&lt;/</span><span style="color:#85E89D;">h3</span><span style="color:#E1E4E8;">&gt;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">blog-post</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">title</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;My journey with Vue&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">blog-post</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Vue.component(&#39;blog-post&#39;, {</span></span>
<span class="line"><span style="color:#24292E;">      props: [&#39;title&#39;],</span></span>
<span class="line"><span style="color:#24292E;">      template: &#39;&lt;</span><span style="color:#22863A;">h3</span><span style="color:#24292E;">&gt;{{ title }}&lt;/</span><span style="color:#22863A;">h3</span><span style="color:#24292E;">&gt;&#39;</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">blog-post</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">title</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;My journey with Vue&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">blog-post</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>动态的props，当使用动态的props时，需要v-bind绑定属性</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">new Vue({</span></span>
<span class="line"><span style="color:#E1E4E8;">  el: &#39;#blog-post-demo&#39;,</span></span>
<span class="line"><span style="color:#E1E4E8;">  data: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    posts: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      { id: 1, title: &#39;My journey with Vue&#39; },</span></span>
<span class="line"><span style="color:#E1E4E8;">      { id: 2, title: &#39;Blogging with Vue&#39; },</span></span>
<span class="line"><span style="color:#E1E4E8;">      { id: 3, title: &#39;Why Vue is so fun&#39; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">blog-post</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;post in posts&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;post.id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:title</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;post.title&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">blog-post</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">new Vue({</span></span>
<span class="line"><span style="color:#24292E;">  el: &#39;#blog-post-demo&#39;,</span></span>
<span class="line"><span style="color:#24292E;">  data: {</span></span>
<span class="line"><span style="color:#24292E;">    posts: [</span></span>
<span class="line"><span style="color:#24292E;">      { id: 1, title: &#39;My journey with Vue&#39; },</span></span>
<span class="line"><span style="color:#24292E;">      { id: 2, title: &#39;Blogging with Vue&#39; },</span></span>
<span class="line"><span style="color:#24292E;">      { id: 3, title: &#39;Why Vue is so fun&#39; }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">blog-post</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-for</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;post in posts&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:key</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;post.id&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:title</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;post.title&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">blog-post</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>传递一个对象</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">blog-post</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-bind</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&#39;post&#39;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">post:{name: &#39;hh&#39;,id: 18}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 等价于 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">blog-post</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&#39;post.hh&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&#39;post.id&#39;</span><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">blog-post</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-bind</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&#39;post&#39;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">post:{name: &#39;hh&#39;,id: 18}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 等价于 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">blog-post</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&#39;post.hh&#39;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&#39;post.id&#39;</span><span style="color:#24292E;">/&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="props类型判断" tabindex="-1">props类型判断 <a class="header-anchor" href="#props类型判断" aria-label="Permalink to &quot;props类型判断&quot;">​</a></h3><ul><li>当props需要限制时，传入的数据需要写成对象形式；如果不需要传入数据，可以写default默认数据，在传入prop也可以给定一个default的值，以防没有传入值，对于公共组件有很大的作用</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 仅指定类型</span></span>
<span class="line"><span style="color:#B392F0;">props</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">msg</span><span style="color:#E1E4E8;">: String,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">title</span><span style="color:#E1E4E8;">: String,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">num</span><span style="color:#E1E4E8;">: Number,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">propA</span><span style="color:#E1E4E8;">: [String,Number]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 指定其他</span></span>
<span class="line"><span style="color:#B392F0;">prop</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">message</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">:String,  </span><span style="color:#6A737D;">//检测类型必须是字符串类型</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">required</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//true为必须传递该属性;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//如果没有传入的数据，则使用默认值;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 当传入的是对象或数组时</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {message: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 自定义验证</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;success&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;warrning&#39;</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(value) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 仅指定类型</span></span>
<span class="line"><span style="color:#6F42C1;">props</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">msg</span><span style="color:#24292E;">: String,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">title</span><span style="color:#24292E;">: String,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">num</span><span style="color:#24292E;">: Number,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">propA</span><span style="color:#24292E;">: [String,Number]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 指定其他</span></span>
<span class="line"><span style="color:#6F42C1;">prop</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">message</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">:String,  </span><span style="color:#6A737D;">//检测类型必须是字符串类型</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">required</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">   </span><span style="color:#6A737D;">//true为必须传递该属性;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">//如果没有传入的数据，则使用默认值;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 当传入的是对象或数组时</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {message: </span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 自定义验证</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;success&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;warrning&#39;</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(value) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><ul><li>如果传入的默认值是对象或数组时，default需要是一个工厂函数</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {message: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">}}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">default</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {message: </span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="单向数据流" tabindex="-1">单向数据流 <a class="header-anchor" href="#单向数据流" aria-label="Permalink to &quot;单向数据流&quot;">​</a></h3><p>所有的prop都使得其父子prop之间形成了一个单向下行绑定，父级prop的更新会向下流动到子组件上，但是反过来则不行，每次父组件更新时，子组件中所有的prop都将会刷新最新的值；</p><p>注意：在 JavaScript 中对象和数组是通过引用传入的，所以对于一个数组或对象类型的 prop 来说，在子组件中改变这个对象或数组本身<strong>将会</strong>影响到父组件的状态。</p><h2 id="七、递归组件" tabindex="-1">七、递归组件 <a class="header-anchor" href="#七、递归组件" aria-label="Permalink to &quot;七、递归组件&quot;">​</a></h2><ul><li>组件在它的模板内可以递归的调用自己，只要给组件设置name组件就可以了</li><li>需要注意的是，递归必须有一个条件来限制数量</li><li>常用场景：联级选择器和树形控件</li></ul><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;(item,index) in treeArr&quot;</span><span style="color:#E1E4E8;">&gt; {{index}} &lt;</span><span style="color:#85E89D;">br</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#FDAEB7;font-style:italic;">tree</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:item</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;item.arr&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;item.flag&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#FDAEB7;font-style:italic;">tree</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 必须定义name，组件内部才能递归调用</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: </span><span style="color:#9ECBFF;">&#39;tree&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 接收外部传入的值</span></span>
<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>
<span class="line"><span style="color:#E1E4E8;">     item: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      type:Array,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">: ()</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">[]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-for</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;(item,index) in treeArr&quot;</span><span style="color:#24292E;">&gt; {{index}} &lt;</span><span style="color:#22863A;">br</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#B31D28;font-style:italic;">tree</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:item</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;item.arr&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-if</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;item.flag&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#B31D28;font-style:italic;">tree</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 必须定义name，组件内部才能递归调用</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&#39;tree&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 接收外部传入的值</span></span>
<span class="line"><span style="color:#24292E;">  props: {</span></span>
<span class="line"><span style="color:#24292E;">     item: {</span></span>
<span class="line"><span style="color:#24292E;">      type:Array,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">: ()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">[]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>`,48),o=[e];function t(r,c,i,E,y,u){return n(),a("div",null,o)}const m=s(p,[["render",t]]);export{d as __pageData,m as default};
