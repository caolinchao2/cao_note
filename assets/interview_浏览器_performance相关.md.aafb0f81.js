import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.b5309610.js";const d=JSON.parse('{"title":"performance 相关","description":"","frontmatter":{},"headers":[],"relativePath":"interview/浏览器/performance相关.md","filePath":"interview/浏览器/performance相关.md","lastUpdated":1730886386000}'),l={name:"interview/浏览器/performance相关.md"},e=p(`<h1 id="performance-相关" tabindex="-1">performance 相关 <a class="header-anchor" href="#performance-相关" aria-label="Permalink to &quot;performance 相关&quot;">​</a></h1><h3 id="window-performance-getentries" tabindex="-1">window.performance.getEntries() <a class="header-anchor" href="#window-performance-getentries" aria-label="Permalink to &quot;window.performance.getEntries()&quot;">​</a></h3><blockquote><p>浏览器获取网页时，会对网页中每一个对象（脚本文件、样式表、图片文件等等）发出一个 HTTP 请求。而通过<code>window.performance.getEntries</code>方法，则可以以数组形式，返回这些请求的时间统计信息，每个数组成员均是一个<code>PerformanceResourceTiming</code>对象！</p></blockquote><p>用它小玩儿一下，统计页面上的静态资源加载耗时：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">;(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 浏览器不支持，就算了！</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">window.performance </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">window.performance.getEntries) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取当前页面所有请求对应的PerformanceResourceTiming对象进行分析</span></span>
<span class="line"><span style="color:#E1E4E8;">  window.performance.</span><span style="color:#B392F0;">getEntries</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">perf</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    result.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      url: perf.name,</span></span>
<span class="line"><span style="color:#E1E4E8;">      entryType: perf.entryType,</span></span>
<span class="line"><span style="color:#E1E4E8;">      type: perf.initiatorType,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;duration(ms)&#39;</span><span style="color:#E1E4E8;">: perf.duration,</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 控制台输出统计结果</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">table</span><span style="color:#E1E4E8;">(result)</span></span>
<span class="line"><span style="color:#E1E4E8;">})()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">;(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 浏览器不支持，就算了！</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">window.performance </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">window.performance.getEntries) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取当前页面所有请求对应的PerformanceResourceTiming对象进行分析</span></span>
<span class="line"><span style="color:#24292E;">  window.performance.</span><span style="color:#6F42C1;">getEntries</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">perf</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    result.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      url: perf.name,</span></span>
<span class="line"><span style="color:#24292E;">      entryType: perf.entryType,</span></span>
<span class="line"><span style="color:#24292E;">      type: perf.initiatorType,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;duration(ms)&#39;</span><span style="color:#24292E;">: perf.duration,</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 控制台输出统计结果</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">table</span><span style="color:#24292E;">(result)</span></span>
<span class="line"><span style="color:#24292E;">})()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>`,5),o=[e];function r(c,t,i,E,y,m){return n(),a("div",null,o)}const b=s(l,[["render",r]]);export{d as __pageData,b as default};
