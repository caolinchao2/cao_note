import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.b5309610.js";const m=JSON.parse('{"title":"module","description":"","frontmatter":{},"headers":[],"relativePath":"leadingEnd/ES6/module.md","filePath":"leadingEnd/ES6/module.md","lastUpdated":null}'),p={name:"leadingEnd/ES6/module.md"},o=l(`<h1 id="module" tabindex="-1">module <a class="header-anchor" href="#module" aria-label="Permalink to &quot;module&quot;">​</a></h1><h2 id="一、module-模块" tabindex="-1">一、Module 模块 <a class="header-anchor" href="#一、module-模块" aria-label="Permalink to &quot;一、Module 模块&quot;">​</a></h2><p>模块功能主要由两个命令构成：export和import，export命令用于规定模块的对外接口，Import命令用于输入其他模块提供的功能；</p><h3 id="export" tabindex="-1">export <a class="header-anchor" href="#export" aria-label="Permalink to &quot;export&quot;">​</a></h3><blockquote><p>规定模块对外接口</p></blockquote><p>如果希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量</p><ul><li>默认导出：<code>export default Person</code>（导入时可指定模块任意名称，无需知晓内部真实名称）</li><li>单独导出：<code>export const name = &#39;bruce&#39;</code></li><li>按需导出：<code>export {age, name, sex}</code></li><li>改名导出：<code>export {name as newName}</code></li><li>从文件导出：<code>export { default as User } from &#39;./user&#39;</code>（常用于index.js导入其他的文件并导出，不能默认导出,需要加{}）</li></ul><h3 id="import" tabindex="-1">import <a class="header-anchor" href="#import" aria-label="Permalink to &quot;import&quot;">​</a></h3><blockquote><p>导入模块内部功能</p></blockquote><p>使用export命令定义了模块的对外接口后，其他js文件就可以通过import命令加载这个模块，import命令具有提升效果，会提升到整个模块的头部，首先执行。是因为import命令是编译阶段执行的，在代码运行之前，如果多次重复执行同一句import语句，那么只会执行一次，而不会执行多次；</p><ul><li>默认导入：<code>import Person from &#39;./Person&#39;</code></li><li>整体导入：<code>import * as Person from &#39;./Person&#39;</code></li><li>按需导入：<code>import {age, name, sex} from &#39;./Person&#39;</code></li><li>改名导入：<code>import {name as newName} from &#39;./Person&#39;</code></li><li>自执导入：<code>import &#39;reset.css&#39;</code></li><li>复合导入：<code>import Person, {name} from &#39;./Person&#39;</code></li></ul><h3 id="动态引入" tabindex="-1">动态引入 <a class="header-anchor" href="#动态引入" aria-label="Permalink to &quot;动态引入&quot;">​</a></h3><p>动态加载import，返回Promise，可以调用then方法；</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./views/about.vue&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">component</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./views/about.vue&#39;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="import与require的区别" tabindex="-1">import与require的区别 <a class="header-anchor" href="#import与require的区别" aria-label="Permalink to &quot;import与require的区别&quot;">​</a></h3><ul><li><p>require是commjs的规范，import是es6的规范；</p></li><li><p>require是同步加载，import是异步加载；</p></li></ul><p>require加载方式：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 导出</span></span>
<span class="line"><span style="color:#6A737D;">// 单个暴露</span></span>
<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){}</span></span>
<span class="line"><span style="color:#6A737D;">// 一起暴露</span></span>
<span class="line"><span style="color:#E1E4E8;">moudle.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//导入</span></span>
<span class="line"><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 导出</span></span>
<span class="line"><span style="color:#6A737D;">// 单个暴露</span></span>
<span class="line"><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){}</span></span>
<span class="line"><span style="color:#6A737D;">// 一起暴露</span></span>
<span class="line"><span style="color:#24292E;">moudle.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//导入</span></span>
<span class="line"><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="二、require-context" tabindex="-1">二、require.context <a class="header-anchor" href="#二、require-context" aria-label="Permalink to &quot;二、require.context&quot;">​</a></h2><p>如果require参数含有表达式，比如：<code>require(&#39;./template/&#39;+name+&#39;.ejs&#39;)</code>，就可以使用<code>require.context</code>；</p><ol><li><code>require.context(dir,deep,reg)</code></li></ol><ul><li>dir：要搜索的文件夹目录</li><li>deep：是否还应该搜索它的子目录</li><li>reg：匹配文件的正则表达式；</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">require.</span><span style="color:#B392F0;">context</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./test&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">vue</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//匹配test目录以.vue结尾的文件名, 不深度匹配;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">require.</span><span style="color:#6F42C1;">context</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./test&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">vue</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//匹配test目录以.vue结尾的文件名, 不深度匹配;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li><p><code>require.context</code>模块导出返回一个require函数，这个函数可以接收一个参数，将context.keys()组成的数组随便一个传入进去就会返回一个模块；</p><p>导出的方法有3个属性：</p><ul><li><code>resolve(req)</code>：将路径传入获取当前文件的绝对路径；</li><li><code>keys()</code>：返回一个数组，数组里面是所有的文件名</li><li><code>id</code>：返回当前路径</li></ul></li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> require.</span><span style="color:#B392F0;">context</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./components&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">vue</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">requireAll</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(context) </span><span style="color:#6A737D;">// map之后就是模块了;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> all </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">requireAll</span><span style="color:#E1E4E8;">(context)</span></span>
<span class="line"><span style="color:#6A737D;">// 返回的是一个数组对象, 里面是导出的Module, 有一个default对象, 该对象就是一个模块;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(all) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 传入之后会返回导出的该文件;就是requireAll的单个对象</span></span>
<span class="line"><span style="color:#B392F0;">context</span><span style="color:#E1E4E8;">(context.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">()[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> require.</span><span style="color:#6F42C1;">context</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./components&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">vue</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">requireAll</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">context</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(context) </span><span style="color:#6A737D;">// map之后就是模块了;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> all </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">requireAll</span><span style="color:#24292E;">(context)</span></span>
<span class="line"><span style="color:#6A737D;">// 返回的是一个数组对象, 里面是导出的Module, 有一个default对象, 该对象就是一个模块;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(all) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 传入之后会返回导出的该文件;就是requireAll的单个对象</span></span>
<span class="line"><span style="color:#6F42C1;">context</span><span style="color:#24292E;">(context.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">()[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><img src="https://raw.githubusercontent.com/caolinchao2/blogimg/main/img/image-20240705161330110.png" alt="image-20240705161330110"></p><ol start="3"><li>Vue全局组件注册</li></ol><p>（1）创建：./components/global/index.js，并写入以下代码，之后在main.js引入：import &#39;./components/global&#39;即可；</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">requireAll</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(context)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> require.</span><span style="color:#B392F0;">context</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">vue</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">requireAll</span><span style="color:#E1E4E8;">(context).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(({ </span><span style="color:#FFAB70;">default</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 第一个小括号匹配文件夹名 第二个小括号匹配文件名</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> reg </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\/</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">\\w</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)</span><span style="color:#85E89D;font-weight:bold;">\\/</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">\\w</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)</span><span style="color:#79B8FF;">.</span><span style="color:#DBEDFF;">vue</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">  item.__file.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(reg)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 引入组件时, 默认取组件里面的name属性, 如果没有name属性则取文件名, 如果文件名是index则取文件夹名, 注册的全局组件以my-[name]使用;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> item.name </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> (RegExp.$2 </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;index&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> RegExp.$1 </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> RegExp.$2)</span></span>
<span class="line"><span style="color:#E1E4E8;">  Vue.</span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`my-\${</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">, item)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">requireAll</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">context</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(context)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> require.</span><span style="color:#6F42C1;">context</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">vue</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">requireAll</span><span style="color:#24292E;">(context).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(({ </span><span style="color:#E36209;">default</span><span style="color:#24292E;">: </span><span style="color:#E36209;">item</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 第一个小括号匹配文件夹名 第二个小括号匹配文件名</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> reg </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\/</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">\\w</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)</span><span style="color:#22863A;font-weight:bold;">\\/</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">\\w</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)</span><span style="color:#005CC5;">.</span><span style="color:#032F62;">vue</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span></span>
<span class="line"><span style="color:#24292E;">  item.__file.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(reg)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 引入组件时, 默认取组件里面的name属性, 如果没有name属性则取文件名, 如果文件名是index则取文件夹名, 注册的全局组件以my-[name]使用;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> item.name </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (RegExp.$2 </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;index&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> RegExp.$1 </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> RegExp.$2)</span></span>
<span class="line"><span style="color:#24292E;">  Vue.</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`my-\${</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">, item)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>（2）之后在global文件夹下面创建文件即可；</p><h2 id="三、import-meta-globeager" tabindex="-1">三、i<wbr>mport.meta.globEager <a class="header-anchor" href="#三、import-meta-globeager" aria-label="Permalink to &quot;三、i&lt;wbr&gt;mport.meta.globEager&quot;">​</a></h2><p>在使用vite搭建的项目时，不要使用require.context，而是使用该方法</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">files</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">globEager</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../views/**/*.vue&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(files) </span><span style="color:#6A737D;">// {[path]: module}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">files</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">globEager</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../views/**/*.vue&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(files) </span><span style="color:#6A737D;">// {[path]: module}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,33),e=[o];function t(r,c,y,i,E,d){return n(),a("div",null,e)}const F=s(p,[["render",t]]);export{m as __pageData,F as default};
