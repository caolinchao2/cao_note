import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.b5309610.js";const b=JSON.parse('{"title":"history 路由和 hash 路由","description":"","frontmatter":{},"headers":[],"relativePath":"面试相关/浏览器/8、history路由和hash路由.md","filePath":"面试相关/浏览器/8、history路由和hash路由.md","lastUpdated":null}'),e={name:"面试相关/浏览器/8、history路由和hash路由.md"},p=l(`<h1 id="history-路由和-hash-路由" tabindex="-1">history 路由和 hash 路由 <a class="header-anchor" href="#history-路由和-hash-路由" aria-label="Permalink to &quot;history 路由和 hash 路由&quot;">​</a></h1><p><strong>hash 路由</strong></p><blockquote><p>hash 路由，在 html5 前，为了解决单页路由跳转问题采用的方案， hash 的变化不会触发页面渲染，服务端也无法获取到 hash 值，前端可通过监听 hashchange 事件来处理 hash 值的变化</p></blockquote><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">window.addEventListener(&#39;hashchange&#39;, function(){</span></span>
<span class="line"><span style="color:#e1e4e8;">    // 监听hash变化，点击浏览器的前进后退会触发</span></span>
<span class="line"><span style="color:#e1e4e8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">window.addEventListener(&#39;hashchange&#39;, function(){</span></span>
<span class="line"><span style="color:#24292e;">    // 监听hash变化，点击浏览器的前进后退会触发</span></span>
<span class="line"><span style="color:#24292e;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>history 路由</strong></p><blockquote><p>history 路由，是 html5 的规范，提供了对<code>history</code>栈中内容的操作，常用 api 有：</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.history.</span><span style="color:#B392F0;">pushState</span><span style="color:#E1E4E8;">(state, title, url)</span></span>
<span class="line"><span style="color:#6A737D;">// let currentState = history.state; 获取当前state</span></span>
<span class="line"><span style="color:#6A737D;">// state：需要保存的数据，这个数据在触发popstate事件时，可以在event.state里获取</span></span>
<span class="line"><span style="color:#6A737D;">// title：标题，基本没用，一般传 null</span></span>
<span class="line"><span style="color:#6A737D;">// url：设定新的历史记录的 url。新的 url 与当前 url 的 origin 必须是一樣的，否则会抛出错误。url可以是绝对路径，也可以是相对路径。</span></span>
<span class="line"><span style="color:#6A737D;">//如 当前url是 https://www.baidu.com/a/,执行history.pushState(null, null, &#39;./qq/&#39;)，则变成 https://www.baidu.com/a/qq/，</span></span>
<span class="line"><span style="color:#6A737D;">//执行history.pushState(null, null, &#39;/qq/&#39;)，则变成 https://www.baidu.com/qq/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">window.history.</span><span style="color:#B392F0;">replaceState</span><span style="color:#E1E4E8;">(state, title, url)</span></span>
<span class="line"><span style="color:#6A737D;">// 与 pushState 基本相同，但她是修改当前历史记录，而 pushState 是创建新的历史记录</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;popstate&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 监听浏览器前进后退事件，pushState 与 replaceState 方法不会触发</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.history.</span><span style="color:#6F42C1;">pushState</span><span style="color:#24292E;">(state, title, url)</span></span>
<span class="line"><span style="color:#6A737D;">// let currentState = history.state; 获取当前state</span></span>
<span class="line"><span style="color:#6A737D;">// state：需要保存的数据，这个数据在触发popstate事件时，可以在event.state里获取</span></span>
<span class="line"><span style="color:#6A737D;">// title：标题，基本没用，一般传 null</span></span>
<span class="line"><span style="color:#6A737D;">// url：设定新的历史记录的 url。新的 url 与当前 url 的 origin 必须是一樣的，否则会抛出错误。url可以是绝对路径，也可以是相对路径。</span></span>
<span class="line"><span style="color:#6A737D;">//如 当前url是 https://www.baidu.com/a/,执行history.pushState(null, null, &#39;./qq/&#39;)，则变成 https://www.baidu.com/a/qq/，</span></span>
<span class="line"><span style="color:#6A737D;">//执行history.pushState(null, null, &#39;/qq/&#39;)，则变成 https://www.baidu.com/qq/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">window.history.</span><span style="color:#6F42C1;">replaceState</span><span style="color:#24292E;">(state, title, url)</span></span>
<span class="line"><span style="color:#6A737D;">// 与 pushState 基本相同，但她是修改当前历史记录，而 pushState 是创建新的历史记录</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;popstate&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 监听浏览器前进后退事件，pushState 与 replaceState 方法不会触发</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,7),t=[p];function o(r,c,i,h,u,y){return a(),n("div",null,t)}const E=s(e,[["render",o]]);export{b as __pageData,E as default};
