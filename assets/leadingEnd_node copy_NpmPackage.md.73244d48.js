import{_ as e,o as l,c as a,Q as o}from"./chunks/framework.b5309610.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"leadingEnd/node copy/NpmPackage.md","filePath":"leadingEnd/node copy/NpmPackage.md","lastUpdated":1727086072000}'),i={name:"leadingEnd/node copy/NpmPackage.md"},n=o('<h2 id="一、npm-简介" tabindex="-1">一、npm 简介 <a class="header-anchor" href="#一、npm-简介" aria-label="Permalink to &quot;一、npm 简介&quot;">​</a></h2><ul><li>npm（全称 Node Package Manager）是 Node.js 的包管理工具，是一个基于命令行的工具，用于帮助开发者在自己的项目中安装、升级、移除和管理依赖项。可访问 www.npmjs.com/。</li><li>类似其他语言的工具： <ul><li>PHP：Composer，是 PHP 的包管理器，可下载、安装和管理 PHP 的依赖项，类似于 npm。</li><li>Java：Maven，是 Java 的构建工具和项目管理工具，可自动化构建、测试和部署 Java 应用程序，类似于 npm 和 webpack 的功能。</li><li>Python：pip，是 Python 的包管理器，可用于安装和管理 Python 的依赖项，类似于 npm。</li><li>Rust：Cargo，是 Rust 的包管理器和构建工具，可用于下载、编译和管理 Rust 的依赖项，类似于 npm 和 Maven 的功能。</li></ul></li></ul><h2 id="二、npm-命令" tabindex="-1">二、npm 命令 <a class="header-anchor" href="#二、npm-命令" aria-label="Permalink to &quot;二、npm 命令&quot;">​</a></h2><ul><li><p><code>npm init</code>：初始化一个新的 npm 项目，创建 <code>package.json</code> 文件。</p></li><li><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">npm install</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">npm install</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>：安装一个包或一组包，并且会在当前目录存放一个</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">node_modules</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">node_modules</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>npm install &lt;package-name&gt;</code>：安装指定的包。</li><li><code>npm install &lt;package-name&gt; --save</code>：安装指定的包，并将其添加到 <code>package.json</code> 文件中的依赖列表中。</li><li><code>npm install &lt;package-name&gt; --save-dev</code>：安装指定的包，并将其添加到 <code>package.json</code> 文件中的开发依赖列表中。</li><li><code>npm install -g &lt;package-name&gt;</code>：全局安装指定的包。</li></ul></li><li><p><code>npm update &lt;package-name&gt;</code>：更新指定的包。</p></li><li><p><code>npm uninstall &lt;package-name&gt;</code>：卸载指定的包。</p></li><li><p><code>npm run &lt;script-name&gt;</code>：执行 <code>package.json</code> 文件中定义的脚本命令。</p></li><li><p><code>npm search &lt;keyword&gt;</code>：搜索 npm 库中包含指定关键字的包。</p></li><li><p><code>npm info &lt;package-name&gt;</code>：查看指定包的详细信息。</p></li><li><p><code>npm list</code>：列出当前项目中安装的所有包。</p></li><li><p><code>npm outdated</code>：列出当前项目中需要更新的包。</p></li><li><p><code>npm audit</code>：检查当前项目中的依赖项是否存在安全漏洞。</p></li><li><p><code>npm publish</code>：发布自己开发的包到 npm 库中。</p></li><li><p><code>npm login</code>：登录到 npm 账户。</p></li><li><p><code>npm logout</code>：注销当前 npm 账户。</p></li><li><p><code>npm link</code>：将本地模块链接到全局的 <code>node_modules</code> 目录下。</p></li><li><p><code>npm config list</code>：用于列出所有的 npm 配置信息。执行该命令可以查看当前系统和用户级别的所有 npm 配置信息，以及当前项目的配置信息（如果在项目目录下执行该命令）。</p></li><li><p><code>npm get registry</code>：用于获取当前 npm 配置中的 registry 配置项的值。registry 配置项用于指定 npm 包的下载地址，如果未指定，则默认使用 npm 官方的包注册表地址。</p></li><li><p><code>npm set registry</code>：使用 <code>npm config set registry &lt;registry-url&gt;</code> 命令，将 registry 配置项的值修改为指定的 <code>&lt;registry-url&gt;</code> 地址。</p></li></ul><h2 id="三、package-json" tabindex="-1">三、Package.json <a class="header-anchor" href="#三、package-json" aria-label="Permalink to &quot;三、Package.json&quot;">​</a></h2><ul><li>执行 <code>npm init</code> 便可以初始化一个 <code>package.json</code>。</li><li>各字段含义： <ul><li><code>name</code>：项目名称，必须是唯一的字符串，通常采用小写字母和连字符的组合。</li><li><code>version</code>：项目版本号，通常采用语义化版本号规范。</li><li><code>description</code>：项目描述。</li><li><code>main</code>：项目的主入口文件路径，通常是一个 JavaScript 文件。</li><li><code>keywords</code>：项目的关键字列表，方便他人搜索和发现该项目。</li><li><code>author</code>：项目作者的信息，包括姓名、邮箱、网址等。</li><li><code>license</code>：项目的许可证类型，可以是自定义的许可证类型或者常见的开源许可证（如 MIT、Apache 等）。</li><li><code>dependencies</code>：项目所依赖的包的列表，这些包会在项目运行时自动安装。</li><li><code>devDependencies</code>：项目开发过程中所需要的包的列表，这些包不会随项目一起发布，而是只在开发时使用。</li><li><code>peerDependencies</code>：项目的同级依赖，即项目所需要的模块被其他模块所依赖。</li><li><code>scripts</code>：定义了一些脚本命令，比如启动项目、运行测试等。</li><li><code>repository</code>：项目代码仓库的信息，包括类型、网址等。</li><li><code>bugs</code>：项目的 bug 报告地址。</li><li><code>homepage</code>：项目的官方网站地址或者文档地址。</li></ul></li><li>版本号规范：三段式版本号一般是 1.0.0，大版本号、次版本号、修订号。大版本号一般是有重大变化才会升级，次版本号一般是增加功能进行升级，修订号一般是修改 bug 进行升级。</li></ul><h2 id="四、npm-安装的嵌套情况" tabindex="-1">四、npm 安装的嵌套情况 <a class="header-anchor" href="#四、npm-安装的嵌套情况" aria-label="Permalink to &quot;四、npm 安装的嵌套情况&quot;">​</a></h2><p>npm install 安装模块的时候一般是扁平化安装的，但是有时候出现嵌套的情况是因为版本不同。例如 A 依赖 C1.0，B 依赖 C1.0，D 依赖 C2.0，此时 C 1.0 就会被放到 A、B 的 <code>node_moduels</code>，C2.0 会被放入 D 模块下面的 <code>node_moduels</code>。</p>',8),c=[n];function p(d,s,t,r,m,g){return l(),a("div",null,c)}const k=e(i,[["render",p]]);export{h as __pageData,k as default};
