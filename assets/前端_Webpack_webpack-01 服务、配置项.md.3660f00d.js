import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.b5309610.js";const b=JSON.parse('{"title":"Webpack-01 服务、配置项","description":"","frontmatter":{},"headers":[],"relativePath":"前端/Webpack/webpack-01 服务、配置项.md","filePath":"前端/Webpack/webpack-01 服务、配置项.md","lastUpdated":1715053679000}'),p={name:"前端/Webpack/webpack-01 服务、配置项.md"},e=l(`<h1 id="webpack-01-服务、配置项" tabindex="-1">Webpack-01 服务、配置项 <a class="header-anchor" href="#webpack-01-服务、配置项" aria-label="Permalink to &quot;Webpack-01 服务、配置项&quot;">​</a></h1><h2 id="一、安装" tabindex="-1">一、安装 <a class="header-anchor" href="#一、安装" aria-label="Permalink to &quot;一、安装&quot;">​</a></h2><ol><li><code>yarn init -y</code> 安装依赖</li><li><code>yarn add webpack webpack-cli -D</code> 需要安装开发依赖，上线不需要； <code>webpack</code>可以进行0配置，配置很弱；</li><li>打包命令：<code>npx webpack</code></li></ol><p><code>webpack</code>是一个打包工具，打包输出后的结果；</p><p>默认直接js模块化；</p><h2 id="二、手动配置webpack" tabindex="-1">二、手动配置webpack <a class="header-anchor" href="#二、手动配置webpack" aria-label="Permalink to &quot;二、手动配置webpack&quot;">​</a></h2><ol><li>默认配置文件的名字：<code>webpack.config.js</code></li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    mode: </span><span style="color:#9ECBFF;">&#39;development&#39;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 默认两个环境 </span></span>
<span class="line"><span style="color:#6A737D;">         * development  打包之后不会压缩一行</span></span>
<span class="line"><span style="color:#6A737D;">         * production 打包之后会将文件代码压缩一行</span></span>
<span class="line"><span style="color:#6A737D;">         */</span></span>
<span class="line"><span style="color:#E1E4E8;">    entry: </span><span style="color:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 入口文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        filename: </span><span style="color:#9ECBFF;">&#39;bundle.[hash:8].js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 打包的同时添加hash戳,解决缓存,:8只显示8位</span></span>
<span class="line"><span style="color:#E1E4E8;">        path: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname,</span><span style="color:#9ECBFF;">&#39;dist&#39;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 必须使用绝对路径</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    mode: </span><span style="color:#032F62;">&#39;development&#39;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">/* 默认两个环境 </span></span>
<span class="line"><span style="color:#6A737D;">         * development  打包之后不会压缩一行</span></span>
<span class="line"><span style="color:#6A737D;">         * production 打包之后会将文件代码压缩一行</span></span>
<span class="line"><span style="color:#6A737D;">         */</span></span>
<span class="line"><span style="color:#24292E;">    entry: </span><span style="color:#032F62;">&#39;./src/index.js&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 入口文件</span></span>
<span class="line"><span style="color:#24292E;">    output: {</span></span>
<span class="line"><span style="color:#24292E;">        filename: </span><span style="color:#032F62;">&#39;bundle.[hash:8].js&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 打包的同时添加hash戳,解决缓存,:8只显示8位</span></span>
<span class="line"><span style="color:#24292E;">        path: path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname,</span><span style="color:#032F62;">&#39;dist&#39;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// 必须使用绝对路径</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ol start="2"><li><p>指定配置文件的名字：<code>npx webpack --config &lt;名字&gt;</code></p><p>如果执行的代码太长，可以在<code>package.json</code>里面的scripts来添加；</p></li></ol><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// package.json</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;build&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;webpack --config&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// package.json</span></span>
<span class="line"><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;build&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;webpack --config&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="3"><li><code>npm run build</code>，默认运行的script脚本里面的代码，如果需要传入参数，需要带--两个横杠；</li></ol><h3 id="取命令行的参数" tabindex="-1">取命令行的参数 <a class="header-anchor" href="#取命令行的参数" aria-label="Permalink to &quot;取命令行的参数&quot;">​</a></h3><p><code>process.argv</code>：返回一个数组，第一个元素是<code>process.execPath</code>（<code>node</code>的位置），第二个元素是正在执行的<code>javascript</code>文件，其余元素是其他命令行的参数；</p><ol><li><code>process.argv</code>，数组最后一位可以取到 -- 后面的参数，如：<code>node scripts/build.js --dev</code> 取<code>dev</code>（<code>package/scripts</code>脚本下的命令，不是cmd终端下的命令）；</li><li><code>p<wbr>rocess.env.npm_lifecycle_event</code>，取<code>script</code>脚本里面的命令，如：<code>npm run build</code>，取<code>build</code>；</li><li><code>p<wbr>rocess.env.npm_config_cdn</code>，cdn为可改变的，当运行<code>npm run build --cdn</code>，会返回true，如果将cdn改成dev，则运行<code>npm run build --dev</code>会返回true，其他返回空或undefined；</li></ol><h3 id="hash的区别" tabindex="-1">hash的区别 <a class="header-anchor" href="#hash的区别" aria-label="Permalink to &quot;hash的区别&quot;">​</a></h3><p>webpack给我们提供了三种哈希值计算方式，分别是hash、chunkhash和contenthash。</p><ul><li><code>hash</code>：跟整个项目的构建相关，构建生成的文件hash值都是一样的，只要项目里有文件更改，整个项目构建的hash值都会更改。</li><li><code>chunkhash</code>：根据不同的入口文件(Entry)进行依赖文件解析、构建对应的chunk，生成对应的hash值。</li><li><code>contenthash</code>：由文件内容产生的hash值，内容不同产生的contenthash值也不一样。</li></ul><p>一般不会使用第一种，改了一个文件，打包之后，其他文件的hash都变了，http的缓存就都失效了；</p><p>那chunkhash和contenthash的主要应用场景是什么呢？在实际在项目中，我们一般会把项目中的css都抽离出对应的css文件来加以引用。如果我们使用chunkhash，当我们改了css代码之后，会发现css文件hash值改变的同时，js文件的hash值也会改变。这时候，contenthash就派上用场了。</p><h2 id="三、启动服务" tabindex="-1">三、启动服务 <a class="header-anchor" href="#三、启动服务" aria-label="Permalink to &quot;三、启动服务&quot;">​</a></h2><ol><li><code>webpack</code>打包时，默认是访问文件路径的；</li><li>安装：<code>yarn add webpack-dev-server -D</code> 安装开发依赖；</li><li>安装之后直接运行：<code>npx webpack-dev-server</code>，默认在本地启的服务器是<code>localhost:8080</code>，默认以当前目录作为静态目录，可以在<code>devServer</code>选项配置；</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    devServer: { </span><span style="color:#6A737D;">// 开发环境配置</span></span>
<span class="line"><span style="color:#E1E4E8;">        port: </span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 端口</span></span>
<span class="line"><span style="color:#E1E4E8;">        progress: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 打包进度条</span></span>
<span class="line"><span style="color:#E1E4E8;">        contentBase: </span><span style="color:#9ECBFF;">&#39;./build&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//静态服务的路径</span></span>
<span class="line"><span style="color:#E1E4E8;">        open: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 自动打开浏览器</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    devServer: { </span><span style="color:#6A737D;">// 开发环境配置</span></span>
<span class="line"><span style="color:#24292E;">        port: </span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 端口</span></span>
<span class="line"><span style="color:#24292E;">        progress: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 打包进度条</span></span>
<span class="line"><span style="color:#24292E;">        contentBase: </span><span style="color:#032F62;">&#39;./build&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//静态服务的路径</span></span>
<span class="line"><span style="color:#24292E;">        open: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 自动打开浏览器</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>之后可以在<code>package.json</code>里面配置启动了</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;dev&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;webpack-dev-server&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;dev&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;webpack-dev-server&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="4"><li>自动创建html文件并引入；</li></ol><p>（1）安装：yarn add html-webpack-plugin -D</p><p>（2）配置html</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HtmlWebpackPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;html-webpack-plugin&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    plugins: [ </span><span style="color:#6A737D;">// 数组，放着所有的webpack插件</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HtmlWebpackPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            template: </span><span style="color:#9ECBFF;">&#39;./src/index.html&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//  模块目录;</span></span>
<span class="line"><span style="color:#E1E4E8;">            filename: </span><span style="color:#9ECBFF;">&#39;index.html&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 打包后的名字</span></span>
<span class="line"><span style="color:#E1E4E8;">            minify: { </span><span style="color:#6A737D;">// 对html文件进行处理,压缩html文件</span></span>
<span class="line"><span style="color:#E1E4E8;">                removeAttributeQuotes: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 删除html文件中的双引号</span></span>
<span class="line"><span style="color:#E1E4E8;">                collapseWhitespace: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 变成一行</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">            hash: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 添加hash戳 解决缓存的问题</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HtmlWebpackPlugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;html-webpack-plugin&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">    plugins: [ </span><span style="color:#6A737D;">// 数组，放着所有的webpack插件</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HtmlWebpackPlugin</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">            template: </span><span style="color:#032F62;">&#39;./src/index.html&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//  模块目录;</span></span>
<span class="line"><span style="color:#24292E;">            filename: </span><span style="color:#032F62;">&#39;index.html&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 打包后的名字</span></span>
<span class="line"><span style="color:#24292E;">            minify: { </span><span style="color:#6A737D;">// 对html文件进行处理,压缩html文件</span></span>
<span class="line"><span style="color:#24292E;">                removeAttributeQuotes: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 删除html文件中的双引号</span></span>
<span class="line"><span style="color:#24292E;">                collapseWhitespace: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 变成一行</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">            hash: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 添加hash戳 解决缓存的问题</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="四、配置loader" tabindex="-1">四、配置loader <a class="header-anchor" href="#四、配置loader" aria-label="Permalink to &quot;四、配置loader&quot;">​</a></h2><ol><li><code>loader</code>的特点：希望单一；</li><li><code>loader</code>的用法：字符串只用一个loader，多个使用数组</li><li><code>loader</code>的顺序：从右向左执行，从下到上执行；</li><li><code>loader</code>还可以写成对象的形式</li></ol><p>如：<code>{use:[{loader:&#39;&#39;,options:{}}]}</code>，可以在<code>options</code>传入东西</p><p>案例：</p><p>配置css-loader</p><ol><li>yarn add css-loader style-loader -D</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    module: { </span><span style="color:#6A737D;">// 模块</span></span>
<span class="line"><span style="color:#E1E4E8;">        rules: [ </span><span style="color:#6A737D;">// 规则, 里面有很多 css-loader 解析@import这种语法</span></span>
<span class="line"><span style="color:#E1E4E8;">            {</span></span>
<span class="line"><span style="color:#E1E4E8;">                test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">css</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 文件匹配正则</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// style-loader 他是把css插入到head的标签中</span></span>
<span class="line"><span style="color:#E1E4E8;">                use: [{</span></span>
<span class="line"><span style="color:#E1E4E8;">                    loader: </span><span style="color:#9ECBFF;">&#39;style-loader&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        insertAt: </span><span style="color:#9ECBFF;">&#39;top&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 将模块中写的css样式默认插到层级的最下边, 在html模板中写的css层级更高</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }, </span><span style="color:#9ECBFF;">&#39;css-loader&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    module: { </span><span style="color:#6A737D;">// 模块</span></span>
<span class="line"><span style="color:#24292E;">        rules: [ </span><span style="color:#6A737D;">// 规则, 里面有很多 css-loader 解析@import这种语法</span></span>
<span class="line"><span style="color:#24292E;">            {</span></span>
<span class="line"><span style="color:#24292E;">                test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">css</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 文件匹配正则</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// style-loader 他是把css插入到head的标签中</span></span>
<span class="line"><span style="color:#24292E;">                use: [{</span></span>
<span class="line"><span style="color:#24292E;">                    loader: </span><span style="color:#032F62;">&#39;style-loader&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                    options: {</span></span>
<span class="line"><span style="color:#24292E;">                        insertAt: </span><span style="color:#032F62;">&#39;top&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 将模块中写的css样式默认插到层级的最下边, 在html模板中写的css层级更高</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }, </span><span style="color:#032F62;">&#39;css-loader&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ol start="2"><li>添加scss处理</li></ol><p>（1）安装：<code>yarn add sass-loader node-sass -D</code>（sass-loader依赖node-sass）</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">rules</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// use顺序从右向左, 需要先处理sass-loader之后再css;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">scss</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, use: [</span><span style="color:#9ECBFF;">&#39;style-loader&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;css-loader&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;sass-loader&#39;</span><span style="color:#E1E4E8;">]}</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">rules</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// use顺序从右向左, 需要先处理sass-loader之后再css;</span></span>
<span class="line"><span style="color:#24292E;">    {test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">scss</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">, use: [</span><span style="color:#032F62;">&#39;style-loader&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;css-loader&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;sass-loader&#39;</span><span style="color:#24292E;">]}</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="3"><li>css抽离成单文件（默认是在html模块里面的）</li></ol><p>（1）安装：<code>yarn add mini-css-extract-plugin -D</code></p><p>（2）将<code>rules</code>里面的<code>style-loader</code>替换成该插件，如果需要多个文件，可以声明多个插件即可</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MiniCssExtractPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mini-css-extract-plugin&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MiniCssExtractPlugin1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mini-css-extract-plugin&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 当需要多个css文件时, 可以复制一份;</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">            {test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">css</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, use: [{</span></span>
<span class="line"><span style="color:#E1E4E8;">            loader: MiniCssExtractPlugin.loader,</span></span>
<span class="line"><span style="color:#E1E4E8;">            options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">              esModule: </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">          }, </span><span style="color:#9ECBFF;">&#39;css-loader&#39;</span><span style="color:#E1E4E8;">]},</span></span>
<span class="line"><span style="color:#E1E4E8;">            {test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">scss</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, use: [{</span></span>
<span class="line"><span style="color:#E1E4E8;">            loader: MiniCssExtractPlugin.loader,</span></span>
<span class="line"><span style="color:#E1E4E8;">            options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">              esModule: </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">          }, </span><span style="color:#9ECBFF;">&#39;css-loader&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;sass-loader&#39;</span><span style="color:#E1E4E8;">]}</span></span>
<span class="line"><span style="color:#E1E4E8;">        ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MiniCssExtractPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            filename: </span><span style="color:#9ECBFF;">&#39;main.css&#39;</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果想输出到单独的文件夹，可以直接加路径 css/main.css</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MiniCssExtractPlugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;mini-css-extract-plugin&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MiniCssExtractPlugin1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;mini-css-extract-plugin&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 当需要多个css文件时, 可以复制一份;</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    module: {</span></span>
<span class="line"><span style="color:#24292E;">        rules: [</span></span>
<span class="line"><span style="color:#24292E;">            {test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">css</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">, use: [{</span></span>
<span class="line"><span style="color:#24292E;">            loader: MiniCssExtractPlugin.loader,</span></span>
<span class="line"><span style="color:#24292E;">            options: {</span></span>
<span class="line"><span style="color:#24292E;">              esModule: </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">          }, </span><span style="color:#032F62;">&#39;css-loader&#39;</span><span style="color:#24292E;">]},</span></span>
<span class="line"><span style="color:#24292E;">            {test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">scss</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">, use: [{</span></span>
<span class="line"><span style="color:#24292E;">            loader: MiniCssExtractPlugin.loader,</span></span>
<span class="line"><span style="color:#24292E;">            options: {</span></span>
<span class="line"><span style="color:#24292E;">              esModule: </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">          }, </span><span style="color:#032F62;">&#39;css-loader&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;sass-loader&#39;</span><span style="color:#24292E;">]}</span></span>
<span class="line"><span style="color:#24292E;">        ]</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    plugins: [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MiniCssExtractPlugin</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">            filename: </span><span style="color:#032F62;">&#39;main.css&#39;</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果想输出到单独的文件夹，可以直接加路径 css/main.css</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><ol start="4"><li>自动添加兼容前缀</li></ol><p>（1）安装：<code>yarn add postcss-loader autoprefixer -D</code></p><p>（2）配置rules</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">rules</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 先处理postcss-loader, 之后再处理css-loader</span></span>
<span class="line"><span style="color:#E1E4E8;">    {test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">css</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, use: [MiniCssExtractPlugin.loader,</span><span style="color:#9ECBFF;">&#39;css-loader&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;postcss-loader&#39;</span><span style="color:#E1E4E8;">]},</span></span>
<span class="line"><span style="color:#E1E4E8;">    {test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">scss</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, use: [MiniCssExtractPlugin.loader, </span><span style="color:#9ECBFF;">&#39;css-loader&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;postcss-loader&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;sass-loader&#39;</span><span style="color:#E1E4E8;">]}</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">rules</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 先处理postcss-loader, 之后再处理css-loader</span></span>
<span class="line"><span style="color:#24292E;">    {test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">css</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">, use: [MiniCssExtractPlugin.loader,</span><span style="color:#032F62;">&#39;css-loader&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;postcss-loader&#39;</span><span style="color:#24292E;">]},</span></span>
<span class="line"><span style="color:#24292E;">    {test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">scss</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">, use: [MiniCssExtractPlugin.loader, </span><span style="color:#032F62;">&#39;css-loader&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;postcss-loader&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;sass-loader&#39;</span><span style="color:#24292E;">]}</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>（3）在根目录创建<code>postcss.config.js</code></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    plugins: [</span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;autoprefixer&#39;</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    plugins: [</span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;autoprefixer&#39;</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="5"><li>css打包成一行</li></ol><p>（1）安装插件：<code>yarn add optimize-css-assets-webpack-plugin uglifyjs-webpack-plugin -D</code></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> optimizeCssAssetsWebpackPlugin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;optimize-css-assets-webpack-plugin&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 用了css优化, 必须优化js, 否则js就不是一行了</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> UglifyJSPlugin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;uglifyjs-webpack-plugin&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">..</span></span>
<span class="line"><span style="color:#E1E4E8;">    optimization: { </span><span style="color:#6A737D;">// 优化项</span></span>
<span class="line"><span style="color:#E1E4E8;">        minimizer: [</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UglifyJSPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">                cache: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">                parallel: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 并发</span></span>
<span class="line"><span style="color:#E1E4E8;">                sourceMap: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// sourceMap</span></span>
<span class="line"><span style="color:#E1E4E8;">            }),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">optimizeCssAssetsWebpackPlugin</span><span style="color:#E1E4E8;">({})</span></span>
<span class="line"><span style="color:#E1E4E8;">        ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> optimizeCssAssetsWebpackPlugin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;optimize-css-assets-webpack-plugin&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 用了css优化, 必须优化js, 否则js就不是一行了</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> UglifyJSPlugin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;uglifyjs-webpack-plugin&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">..</span></span>
<span class="line"><span style="color:#24292E;">    optimization: { </span><span style="color:#6A737D;">// 优化项</span></span>
<span class="line"><span style="color:#24292E;">        minimizer: [</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UglifyJSPlugin</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">                cache: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 缓存</span></span>
<span class="line"><span style="color:#24292E;">                parallel: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 并发</span></span>
<span class="line"><span style="color:#24292E;">                sourceMap: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// sourceMap</span></span>
<span class="line"><span style="color:#24292E;">            }),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">optimizeCssAssetsWebpackPlugin</span><span style="color:#24292E;">({})</span></span>
<span class="line"><span style="color:#24292E;">        ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>`,51),o=[e];function c(r,t,E,i,y,d){return n(),a("div",null,o)}const F=s(p,[["render",c]]);export{b as __pageData,F as default};
